#
#
#
#
MIB: SNMP-USER-BASED-SM-3DES-MIB (file:./draft-reeder-snmpv3-usm-3desede.mib) converted on Fri Mar 18 22:02:40 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: GB15629dot11-WAPI-MIB (file:./gb15629dot11-wapi.mib) converted on Fri Mar 18 22:02:40 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-ADDRESS-FAMILY-NUMBERS-MIB (file:./iana-ana-address-family-numbers.mib) converted on Fri Mar 18 22:02:40 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-RTPROTO-MIB (file:./ianaiprouteprotocol.mib) converted on Fri Mar 18 22:02:40 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE-802DOT17-RPR-MIB (file:./ieee80217-rpr.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-BRIDGE-MIB (file:./ieee8021-bridge.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CFM-MIB (file:./ieee8021-cfm.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CFM-V2-MIB (file:./ieee8021-cfm-v2.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CN-MIB (file:./ieee8021-cn.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-EVB-MIB (file:./ieee8021-evb.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-SECY-MIB (file:./ieee8021-secy.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-SPB-MIB (file:./ieee8021-spb.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-TC-MIB (file:./ieee8021-tc.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-PAE-MIB (file:./ieee8021x.mib) converted on Fri Mar 18 22:02:41 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021X-PAE-MIB (file:./ieee8021x-pae.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8023-LAG-MIB (file:./ieee8023-lag.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE802dot11-MIB (file:./ieee802dot11.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot11Disassociate .1.2.840.10036.1.6.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The disassociate notification shall be sent when the STA $*
SDESC
The disassociate notification shall be sent when the STA
sends a Disassociation frame. The value of the notification
shall include the MAC address of the MAC to which the Disassociation
frame was sent and the reason for the disassociation.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax="INTEGER"
     Descr="A unique value for each interface.  Its value
            ranges between 1 and the value of ifNumber.  The
            value for each interface must remain constant at
            least from one re-initialization of the entity's
            network management system to the next re-
            initialization."
  2: dot11DisassociateReason
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Reason Code in a
        Disassociation frame.  If no Disassociation frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11DisassociateStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the Address 1 field of the most
        recently transmitted Disassociation frame.  If no Disassociation frame has
        been transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
EVENT dot11Deauthenticate .1.2.840.10036.1.6.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The deauthenticate notification shall be sent when the STA sends a $*
SDESC
The deauthenticate notification shall be sent when the STA sends a
Deauthentication frame. The value of the notification shall include
the MAC address of the MAC to which the Deauthentication frame was
sent and the reason for the deauthentication.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax="INTEGER"
     Descr="A unique value for each interface.  Its value
            ranges between 1 and the value of ifNumber.  The
            value for each interface must remain constant at
            least from one re-initialization of the entity's
            network management system to the next re-
            initialization."
  2: dot11DeauthenticateReason
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Reason Code in a
        Deauthentication frame.  If no Deauthentication frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11DeauthenticateStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the Address 1 field of the most
        recently transmitted Deauthentication frame.  If no Deauthentication
        frame has been transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
EVENT dot11AuthenticateFail .1.2.840.10036.1.6.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA The authenticate failure notification shall be sent when the STA $*
SDESC
The authenticate failure notification shall be sent when the STA
sends an Authentication frame with a status code other than
'successful'. The value of the notification
shall include the MAC address of the MAC to which the Authentication
frame was sent and the reason for the authentication failure.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax="INTEGER"
     Descr="A unique value for each interface.  Its value
            ranges between 1 and the value of ifNumber.  The
            value for each interface must remain constant at
            least from one re-initialization of the entity's
            network management system to the next re-
            initialization."
  2: dot11AuthenticateFailStatus
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Status Code in a failed
        Authentication frame.  If no failed Authentication frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11AuthenticateFailStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the
        Address 1 field of the most recently transmitted
        failed Authentication frame.  If no failed Authentication frame has been
        transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
#
MIB: IPSEC-IKEACTION-MIB (file:./ipsec-ikeaction.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPSEC-IPSECACTION-MIB (file:./ipsec-ipsecaction.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-EVB-EXTENSIONS-MIB (file:./lldp-ext-dot1-evb-extensions.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-MIB (file:./lldp-ext-dot1.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-V2-MIB (file:./lldp-ext-dot1-v2.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT3-MIB (file:./lldp-ext-dot3.mib) converted on Fri Mar 18 22:02:42 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT3-V2-MIB (file:./lldp-ext-dot3-v2.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-MED-MIB (file:./lldp-ext-med.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-MIB (file:./lldp.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpRemTablesChange .1.0.8802.1.1.2.0.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A lldpRemTablesChange notification is sent when the value $*
SDESC
A lldpRemTablesChange notification is sent when the value
of lldpStatsRemTableLastChangeTime changes.  It can be
utilized by an NMS to trigger LLDP remote systems table
maintenance polls.
Note that transmission of lldpRemTablesChange
notifications are throttled by the agent, as specified by the
'lldpNotificationInterval' object.
Variables:
  1: lldpStatsRemTablesInserts
     Syntax=""
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been inserted into tables
            contained in lldpRemoteSystemsData and lldpExtensions objects.

            The complete set of information received from a particular
            MSAP should be inserted into related tables.  If partial
            information cannot be inserted for a reason such as lack
            of resources, all of the complete set of information should
            be removed.

            This counter should be incremented only once after the
            complete set of information is successfully recorded
            in all related tables.  Any failures during inserting
            information set which result in deletion of previously
            inserted information should not trigger any changes in
            lldpStatsRemTablesInserts since the insert is not completed
            yet or or in lldpStatsRemTablesDeletes, since the deletion
            would only be a partial deletion. If the failure was the
            result of lack of resources, the lldpStatsRemTablesDrops
            counter should be incremented once."
  2: lldpStatsRemTablesDeletes
     Syntax=""
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from
            tables contained in lldpRemoteSystemsData and lldpExtensions
            objects.

            This counter should be incremented only once when the
            complete set of information is completely deleted from all
            related tables.  Partial deletions, such as deletion of
            rows associated with a particular MSAP from some tables,
            but not from all tables are not allowed, thus should not
            change the value of this counter."
  3: lldpStatsRemTablesDrops
     Syntax=""
     Descr="The number of times the complete set of information
            advertised by a particular MSAP could not be entered into
            tables contained in lldpRemoteSystemsData and lldpExtensions
            objects because of insufficient resources."
  4: lldpStatsRemTablesAgeouts
     Syntax=""
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from tables
            contained in lldpRemoteSystemsData and lldpExtensions objects
            because the information timeliness interval has expired.

            This counter should be incremented only once when the complete
            set of information is completely invalidated (aged out)
            from all related tables.  Partial aging, similar to deletion
            case, is not allowed, and thus, should not change the value
            of this counter."
EDESC
#
#
#
#
MIB: LLDP-V2-MIB (file:./lldp-v2.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-V2-TC-MIB (file:./lldp-v2-tc.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1213-MIB (file:./rfc1213.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1229-MIB (file:./rfc1229.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1271-MIB (file:./rfc1271.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1315-MIB (file:./rfc1315-fr.mib) converted on Fri Mar 18 22:02:43 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT frDLCIStatusChange .1.3.6.1.2.1.10.32.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap indicates that the indicated Virtual $*
SDESC
This trap indicates that the indicated Virtual
Circuit  has changed state.  It has either been
created or invalidated, or has toggled  between
the active and inactive states.
Variables:
  1: frCircuitIfIndex
     Syntax="INTEGER"
     Descr="The ifIndex Value of the ifEntry this  virtual
                circuit is layered onto."
  2: frCircuitDlci
     Syntax="INTEGER"
     Descr="The Data Link Connection Identifier  for  this
                virtual circuit."
  3: frCircuitState
     Syntax="INTEGER"
       1: invalid
       2: active
       3: inactive
     Descr="Indicates whether the particular virtual  cir-
                cuit  is operational.  In the absence of a Data
                Link Connection Management  Interface,  virtual
                circuit  entries  (rows) may be created by set-
                ting virtual  circuit  state  to  'active',  or
                deleted by changing Circuit state to 'invalid'.
                Whether or not the row actually  disappears  is
                left  to the implementation, so this object may
                actually read as 'invalid' for  some  arbitrary
                length  of  time.   It is also legal to set the
                state of a virtual  circuit  to  'inactive'  to
                temporarily disable a given circuit."
EDESC
#
#
#
#
MIB: RFC1381-MIB (file:./rfc1381-lapb.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1382-MIB (file:./rfc1382-x25.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PPP-LCP-MIB (file:./rfc1471-ppp-lcp.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PPP-IP-NCP-MIB (file:./rfc1473-ppp-ip.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: BRIDGE-MIB (file:./rfc1493-bridge.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT newRoot .1.3.6.1.2.1.17.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The newRoot trap indicates that the sending agent $*
SDESC
The newRoot trap indicates that the sending agent
has become the new root of the Spanning Tree; the
trap is sent by a bridge soon after its election
as the new root, e.g., upon expiration of the
Topology Change Timer immediately subsequent to
its election.  Implementation of this trap is
optional.
EDESC
#
#
#
EVENT topologyChange .1.3.6.1.2.1.17.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A topologyChange trap is sent by a bridge when $*
SDESC
A topologyChange trap is sent by a bridge when
any of its configured ports transitions from the
Learning state to the Forwarding state, or from
the Forwarding state to the Blocking state.  The
trap is not sent if a newRoot trap is sent for the
same transition.  Implementation of this trap is
optional.
EDESC
#
#
#
#
MIB: TOKEN-RING-RMON-MIB (file:./rfc1513-token-ring-rmon.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANAifType-MIB (file:./rfc1573a-IANAifType.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RIPv2-MIB (file:./rfc1724-rip.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNA-SDLC-MIB (file:./rfc1747-sna-sdlc.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT sdlcPortStatusChange .1.3.6.1.2.1.41.1.3.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap indicates that the state of an SDLC $*
SDESC
This trap indicates that the state of an SDLC
port has transitioned to active or inactive.
Variables:
  1: ifIndex
     Syntax="INTEGER"
     Descr="A unique value for each interface.  Its value
            ranges between 1 and the value of ifNumber.  The
            value for each interface must remain constant at
            least from one re-initialization of the entity's
            network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The
            testing(3) state indicates that no operational
            packets can be passed."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The current operational state of the interface.
            The testing(3) state indicates that no operational
            packets can be passed."
  4: sdlcPortOperLastFailTime
     Syntax="TICKS"
     Descr="This object describes the value of sysUpTime
                        when this SDLC port last failed.  If the port
                        has not failed, then this value shall be zero."
  5: sdlcPortOperLastFailCause
     Syntax="INTEGER"
       1: undefined
       2: physical
     Descr="This enumerated object describes the cause of
                        the last failure of this SDLC port.  If the
                        port has not failed, then this object has a
                        value of undefined(1)."
EDESC
#
#
#
EVENT sdlcLSStatusChange .1.3.6.1.2.1.41.1.3.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap indicates that the state of an SDLC $*
SDESC
This trap indicates that the state of an SDLC
link station has transitioned to contacted or
discontacted.
Variables:
  1: ifIndex
     Syntax="INTEGER"
     Descr="A unique value for each interface.  Its value
            ranges between 1 and the value of ifNumber.  The
            value for each interface must remain constant at
            least from one re-initialization of the entity's
            network management system to the next re-
            initialization."
  2: sdlcLSAddress
     Syntax="INTEGER"
     Descr="This value is the poll address of the
                         secondary link station for this SDLC link.  It
                         uniquely identifies the SDLC link station
                         within a single SDLC port."
  3: sdlcLSOperState
     Syntax="INTEGER"
       1: discontacted
       2: contactPending
       3: contacted
       4: discontactPending
     Descr="This object describes the operational state of
                        the SDLC link station.  The managed system
                        shall attempt to keep this value consistent
                        with the administered state, sdlcLSAdminState"
  4: sdlcLSAdminState
     Syntax="INTEGER"
       1: inactive
       2: active
     Descr="This object controls the desired state of the
                        SDLC station.  The managed system shall attempt
                        to keep the operational state, sdlcLSOperState,
                        consistent with this value."
  5: sdlcLSOperLastFailTime
     Syntax="TICKS"
     Descr="This object describes the value of sysUpTime
                         when this SDLC link station last failed.  If
                         the link station has not failed, then this
                         value shall be zero."
  6: sdlcLSOperLastFailCause
     Syntax="INTEGER"
       1: undefined
       2: rxFRMR
       3: txFRMR
       4: noResponse
       5: protocolErr
       6: noActivity
       7: rnrLimit
       8: retriesExpired
     Descr="This enumerated object reflects the cause of
                        the last failure of this SDLC link station.  If
                        the link station has not failed, then this
                        object will have a value of undefined(1)."
  7: sdlcLSOperLastFailFRMRInfo
     Syntax="OCTETSTR"
     Descr="This object reflects the information field of
                        the FRMR frame if the last failure for this
                        SDLC link station was as a result of an invalid
                        frame.  Otherwise, this field has no meaning."
  8: sdlcLSOperLastFailCtrlIn
     Syntax="OCTETSTR"
     Descr="This object reflects the last control octet or
                        octets (depending on modulus) received by this
                        SDLC link station at the time of the last
                        failure.  If the link station has not failed,
                        then this value has no meaning."
  9: sdlcLSOperLastFailCtrlOut
     Syntax="OCTETSTR"
     Descr="This object reflects the last control octet or
                        octets (depending on modulus) sent by this SDLC
                        link station at the time of the last failure.
                        If the link station has not failed, then this
                        value has no meaning."
 10: sdlcLSOperLastFailREPLYTOs
     Syntax="COUNTER"
     Descr="This object reflects the number of times that
                        the REPLYTO timer had expired for an SDLC link
                        station at the time of the last failure. If the
                        link station has not failed, then this value
                        has no meaning."
EDESC
#
#
#
#
MIB: DLSW-MIB (file:./rfc2024-dlsw.mib) converted on Fri Mar 18 22:02:44 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dlswTrapTConnPartnerReject .1.3.6.1.2.1.46.1.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
is rejected by a partner DLSw during Capabilities
Exchanges.  The emission of this trap is controlled
by dlswTrapCntlTConnPartnerReject.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnProtViolation .1.3.6.1.2.1.46.1.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a protocol violation is $*
SDESC
This trap is sent each time a protocol violation is
detected for a transport connection.  The emission of this
trap is controlled by dlswTrapCntlTConnProtViolation.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnUp .1.3.6.1.2.1.46.1.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
enters 'connected' state.  The emission of this trap
is controlled by dlswTrapCntlTConn.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnDown .1.3.6.1.2.1.46.1.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
enters 'disconnected' state.  The emission of this trap
is controlled by dlswTrapCntlTConn.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapCircuitUp .1.3.6.1.2.1.46.1.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a circuit enters 'connected' $*
SDESC
This trap is sent each time a circuit enters 'connected'
state.  The emission of this trap is controlled by
dlswTrapCntlCircuit.
Variables:
  1: dlswCircuitS1Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 1 (S1) used for this circuit."
  2: dlswCircuitS1Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 1 (S1) used for this circuit."
  3: dlswCircuitS2Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 2 (S2) used for this circuit."
  4: dlswCircuitS2Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 2 (S2) used for this circuit."
EDESC
#
#
#
EVENT dlswTrapCircuitDown .1.3.6.1.2.1.46.1.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a circuit enters 'disconnected' $*
SDESC
This trap is sent each time a circuit enters 'disconnected'
state.  The emission of this trap is controlled by
dlswTrapCntlCircuit.
Variables:
  1: dlswCircuitS1Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 1 (S1) used for this circuit."
  2: dlswCircuitS1Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 1 (S1) used for this circuit."
  3: dlswCircuitS2Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 2 (S2) used for this circuit."
  4: dlswCircuitS2Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 2 (S2) used for this circuit."
EDESC
#
#
#
#
MIB: FRAME-RELAY-DTE-MIB (file:./rfc2115-frame-relay-dte.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT frDLCIStatusChange .1.3.6.1.2.1.10.32.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap indicates that the indicated Virtual Circuit $*
SDESC
This trap indicates that the indicated Virtual Circuit
has changed state.  It has either been created or
invalidated, or has toggled between the active and
inactive states.  If, however, the reason for the state
change is due to the DLCMI going down, per-DLCI traps
should not be generated.
Variables:
  1: frCircuitState
     Syntax="INTEGER"
       1: invalid
       2: active
       3: inactive
     Descr="Indicates whether the particular virtual circuit is
       operational.  In the absence of a Data Link Connection
       Management Interface, virtual circuit entries (rows)
       may be created by setting virtual circuit state to
       'active', or deleted by changing Circuit state to
       'invalid'.
       Whether or not the row actually disappears is left to
       the implementation, so this object may actually read as
       'invalid' for some arbitrary length of time.  It is
       also legal to set the state of a virtual circuit to
       'inactive' to temporarily disable a given circuit.
       The use of 'invalid' is deprecated in this SNMP Version
       2 MIB, in favor of frCircuitRowStatus."
EDESC
#
#
#
#
MIB: ISDN-MIB (file:./rfc2127-isdn.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT isdnMibCallInformation .1.3.6.1.2.1.10.20.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap/inform is sent to the manager under the $*
SDESC
This trap/inform is sent to the manager under the
following condidions:
- on incoming calls for each call which is rejected for
policy reasons (e.g. unknown neighbor or access
violation)
- on outgoing calls whenever a call attempt is determined
to have ultimately failed. In the event that call retry
is active, then this will be after all retry attempts
have failed.
- whenever a call connects. In this case, the object
isdnBearerCallConnectTime should be included in the
trap.
Only one such trap is sent in between successful or
unsuccessful call attempts from or to a single neighbor;
subsequent call attempts result in no trap.
If the Dial Control MIB objects dialCtlNbrCfgId and
dialCtlNbrCfgIndex are known by the entity generating
this trap, both objects should be included in the trap
as well. The receipt of this trap with no dial neighbor
information indicates that the manager must poll the
callHistoryTable of the Dial Control MIB to see what
changed.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: isdnBearerOperStatus
     Syntax="INTEGER"
       1: idle
       2: connecting
       3: connected
       4: active
     Descr="The current call control state for this port.
             idle(1):       The B channel is idle.
                            No call or call attempt is going on.
             connecting(2): A connection attempt (outgoing call)
                            is being made on this interface.
             connected(3):  An incoming call is in the process
                            of validation.
             active(4):     A call is active on this interface."
  3: isdnBearerPeerAddress
     Syntax="OCTETSTR"
     Descr="The ISDN address the current or last call is or was
             connected to.

             In some cases, the format of this information can not
             be predicted, since it largely depends on the type
             of switch or PBX the device is connected to. Therefore,
             the detailed format of this information is not
             specified and is implementation dependent.

             If possible, the agent should supply this information
             using the E.164 format. In this case, the number must
             start with '+'. Otherwise, IA5 number digits must be used.

             If the peer ISDN address is not available,
             this object has a length of zero."
  4: isdnBearerPeerSubAddress
     Syntax="OCTETSTR"
     Descr="The ISDN subaddress the current or last call is or was
             connected to.

             The subaddress is an user supplied string of up to 20
             IA5 characters and is transmitted transparently through
             the network.

             If the peer subaddress is not available, this object
             has a length of zero."
  5: isdnBearerCallSetupTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the ISDN setup message for
             the current or last call was sent or received. If since
             system startup there has been no call on this interface,
             this object has a value of zero."
  6: isdnBearerInfoType
     Syntax="INTEGER"
       1: unknown
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The Information Transfer Capability for the current
             or last call.

             speech(2) refers to a non-data connection, whereas
             audio31(6) and audio7(7) refer to data mode connections.

             Note that Q.931, chapter 4.5.5, originally defined
             audio7(7) as '7 kHz audio' and now defines it as
             'Unrestricted digital information with tones/
             announcements'.

             If since system startup there has been no call on this
             interface, this object has a value of unknown(1)."
  7: isdnBearerCallOrigin
     Syntax="INTEGER"
       1: unknown
       2: originate
       3: answer
       4: callback
     Descr="The call origin for the current or last call. If since
             system startup there was no call on this interface,
             this object has a value of unknown(1)."
EDESC
#
#
#
#
MIB: DIAL-CONTROL-MIB (file:./rfc2128-dial-control.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dialCtlPeerCallInformation .1.3.6.1.2.1.10.21.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap/inform is sent to the manager whenever $*
SDESC
This trap/inform is sent to the manager whenever
a successful call clears, or a failed call attempt
is determined to have ultimately failed. In the
event that call retry is active, then this is after
all retry attempts have failed. However, only one such
trap is sent in between successful call attempts;
subsequent call attempts result in no trap.
ifOperStatus will return the operational status of the
virtual interface associated with the peer to whom
this call was made to.
Variables:
  1: callHistoryPeerId
     Syntax="INTEGER"
     Descr="This is the Id value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist, the value of this object
         will be zero."
  2: callHistoryPeerIfIndex
     Syntax="INTEGER"
     Descr="This is the ifIndex value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist, the value of this object
         will be zero."
  3: callHistoryLogicalIfIndex
     Syntax="INTEGER32"
     Descr="This is the ifIndex value of the logical interface through
         which this call was made. For ISDN media, this would be
         the ifIndex of the B channel which was used for this call."
  4: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
  5: callHistoryPeerAddress
     Syntax="OCTETSTR"
     Descr="The number this call was connected to. If the number is
         not available, then it will have a length of zero."
  6: callHistoryPeerSubAddress
     Syntax="OCTETSTR"
     Descr="The subaddress this call was connected to. If the subaddress
         is undefined or not available, this will be a zero length
         string."
  7: callHistoryDisconnectCause
     Syntax="OCTETSTR"
     Descr="The encoded network cause value associated with this call.

         The value of this object will depend on the interface type
         as well as on the protocol and protocol version being
         used on this interface. Some references for possible cause
         values are given below."
  8: callHistoryConnectTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the call was connected."
  9: callHistoryDisconnectTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the call was disconnected."
 10: callHistoryInfoType
     Syntax="INTEGER"
       1: other
       10: fax
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The information type for this call."
 11: callHistoryCallOrigin
     Syntax="INTEGER"
       1: originate
       2: answer
       3: callback
     Descr="The call origin."
EDESC
#
#
#
EVENT dialCtlPeerCallSetup .1.3.6.1.2.1.10.21.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap/inform is sent to the manager whenever $*
SDESC
This trap/inform is sent to the manager whenever
a call setup message is received or sent.
ifOperStatus will return the operational status of the
virtual interface associated with the peer to whom
this call was made to.
Variables:
  1: callActivePeerId
     Syntax="INTEGER"
     Descr="This is the Id value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist or is unknown, the value
         of this object will be zero."
  2: callActivePeerIfIndex
     Syntax="INTEGER"
     Descr="This is the ifIndex value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist or is unknown, the value
         of this object will be zero."
  3: callActiveLogicalIfIndex
     Syntax="INTEGER32"
     Descr="This is the ifIndex value of the logical interface through
         which this call was made. For ISDN media, this would be
         the ifIndex of the B channel which was used for this call.
         If the ifIndex value is unknown, the value of this object
         will be zero."
  4: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
  5: callActivePeerAddress
     Syntax="OCTETSTR"
     Descr="The number this call is connected to. If the number is
         not available, then it will have a length of zero."
  6: callActivePeerSubAddress
     Syntax="OCTETSTR"
     Descr="The subaddress this call is connected to. If the subaddress
         is undefined or not available, this will be a zero length
         string."
  7: callActiveInfoType
     Syntax="INTEGER"
       1: other
       10: fax
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The information type for this call."
  8: callActiveCallOrigin
     Syntax="INTEGER"
       1: originate
       2: answer
       3: callback
     Descr="The call origin."
EDESC
#
#
#
#
MIB: INTEGRATED-SERVICES-MIB (file:./rfc2213-integrated-services.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SYSAPPL-MIB (file:./rfc2287-sysappl.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-TCP-MIB (file:./rfc2452-ipv6-tcp.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-UDP-MIB (file:./rfc2454-ipv6-udp.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-MIB (file:./rfc2465-ipv6.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ipv6IfStateChange .1.3.6.1.2.1.55.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An ipv6IfStateChange notification signifies $*
SDESC
An ipv6IfStateChange notification signifies
that there has been a change in the state of
an ipv6 interface.  This notification should
be generated when the interface's operational
status transitions to or from the up(1) state.
Variables:
  1: ipv6IfDescr
     Syntax="OCTETSTR"
     Descr="A textual string containing information about the
               interface.  This string may be set by the network
               management system."
  2: ipv6IfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: noIfIdentifier
       4: unknown
       5: notPresent
     Descr="The current operational state of the interface.
              The noIfIdentifier(3) state indicates that no valid
              Interface Identifier is assigned to the interface.
              This state usually indicates that the link-local
              interface address failed Duplicate Address Detection.
              If ipv6IfAdminStatus is down(2) then ipv6IfOperStatus
              should be down(2).  If ipv6IfAdminStatus is changed
              to up(1) then ipv6IfOperStatus should change to up(1)
              if the interface is ready to transmit and receive
              network traffic; it should remain in the down(2) or
              noIfIdentifier(3) state if and only if there is a
              fault that prevents it from going to the up(1) state;
              it should remain in the notPresent(5) state if
              the interface has missing (typically, lower layer)
              components."
EDESC
#
#
#
#
MIB: IPV6-TC (file:./rfc2465-ipv6-tc.mib) converted on Fri Mar 18 22:02:45 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-ICMP-MIB (file:./rfc2466-ipv6-icmp.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ATM-TC-MIB (file:./rfc2514-atm-tc.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ATM-MIB (file:./rfc2515-atm.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-FRAMEWORK-MIB (file:./rfc2571-snmp-framework.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-MPD-MIB (file:./rfc2572-snmp-mpd.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-TARGET-MIB (file:./rfc2573-snmp-target.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SMON-MIB (file:./rfc2613-smon.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RADIUS-AUTH-CLIENT-MIB (file:./rfc2618-radius-auth-client.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RADIUS-ACC-CLIENT-MIB (file:./rfc2620-radius-acc-client.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ADSL-LINE-MIB (file:./rfc2662-adsl-line.mib) converted on Fri Mar 18 22:02:46 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT adslAtucPerfLofsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Framing 15-minute interval threshold reached. $*
SDESC
Loss of Framing 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLofs
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Framing."
  2: adslAtucThresh15MinLofs
     Syntax="INTEGER"
     Descr="The number of Loss of Frame Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLofsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfLossThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Signal 15-minute interval threshold reached. $*
SDESC
Loss of Signal 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLoss
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Signal."
  2: adslAtucThresh15MinLoss
     Syntax="INTEGER"
     Descr="The number of Loss of Signal Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLossThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfLprsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Power 15-minute interval threshold reached. $*
SDESC
Loss of Power 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLprs
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Power."
  2: adslAtucThresh15MinLprs
     Syntax="INTEGER"
     Descr="The number of Loss of Power Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLprsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfESsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA Errored Second 15-minute interval threshold reached. $*
SDESC
Errored Second 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinESs
     Syntax=""
     Descr="Count of Errored Seconds in the current 15 minute
                 interval.  The errored second parameter is a count of
                 one-second intervals containing one or more crc
                 anomalies, or one or more los or sef defects."
  2: adslAtucThresh15MinESs
     Syntax="INTEGER"
     Descr="The number of Errored Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfESsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucRateChangeTrap .1.3.6.1.2.1.10.94.1.2.1.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA The ATUCs transmit rate has changed (RADSL mode only) $*
SDESC
The ATUCs transmit rate has changed (RADSL mode only)
Variables:
  1: adslAtucChanCurrTxRate
     Syntax="GAUGE"
     Descr="Actual transmit rate on this channel."
  2: adslAtucChanPrevTxRate
     Syntax="GAUGE"
     Descr="The rate at the time of the last
                 adslAtucRateChangeTrap event. It is also set at
                 initialization to prevent a trap being sent.

                 Rate changes less than adslAtucThresh(*)RateDown
                 or less than adslAtucThresh(*)RateUp will not
                 cause a trap or cause this object to change.
                 (*) == Fast or Interleave.
                 See AdslLineAlarmConfProfileEntry."
EDESC
#
#
#
EVENT adslAtucPerfLolsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Link 15-minute interval threshold reached. $*
SDESC
Loss of Link 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLols
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Link."
  2: adslAtucThresh15MinLols
     Syntax="INTEGER"
     Descr="The number of Loss of Link Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLolsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucInitFailureTrap .1.3.6.1.2.1.10.94.1.2.1.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA ATUC initialization failed. See adslAtucCurrStatus $*
SDESC
ATUC initialization failed. See adslAtucCurrStatus
for potential reasons.
Variables:
  1: adslAtucCurrStatus
     Syntax="BITS"
     Descr="Indicates current state of the ATUC line.  This is a
                 bit-map of possible conditions.  The various bit
                 positions are:

          0      noDefect             There no defects on the line

          1      lossOfFraming        ATUC failure due to not
                                      receiving valid frame.

          2      lossOfSignal         ATUC failure due to not
                                      receiving signal.

          3      lossOfPower          ATUC failure due to loss of
                                      power.
                                      Note: the Agent may still
                                      function.

          4      lossOfSignalQuality  Loss of Signal Quality is
                                      declared when the Noise Margin
                                      falls below the Minimum Noise
                                      Margin, or the bit-error-rate
                                      exceeds 10^-7.

          5      lossOfLink           ATUC failure due to inability
                                      to link with ATUR.

          6      dataInitFailure      ATUC failure during
                                      initialization due to bit
                                      errors corrupting startup
                                      exchange data.

          7      configInitFailure    ATUC failure during
                                      initialization due to peer
                                      ATU not able to support
                                      requested configuration

          8      protocolInitFailure  ATUC failure during
                                      initialization due to
                                      incompatible protocol used by
                                      the peer ATU.

          9      noPeerAtuPresent     ATUC failure during
                                      initialization due to no
                                      activation sequence detected
                                      from peer ATU.

                 This is intended to supplement ifOperStatus."
EDESC
#
#
#
EVENT adslAturPerfLofsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Framing 15-minute interval threshold reached. $*
SDESC
Loss of Framing 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLofs
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Framing."
  2: adslAturThresh15MinLofs
     Syntax="INTEGER"
     Descr="The number of Loss of Frame Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLofsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfLossThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Signal 15-minute interval threshold reached. $*
SDESC
Loss of Signal 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLoss
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Signal."
  2: adslAturThresh15MinLoss
     Syntax="INTEGER"
     Descr="The number of Loss of Signal Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLossThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfLprsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Power 15-minute interval threshold reached. $*
SDESC
Loss of Power 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLprs
     Syntax=""
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Power."
  2: adslAturThresh15MinLprs
     Syntax="INTEGER"
     Descr="The number of Loss of Power Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLprsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfESsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA Errored Second 15-minute interval threshold reached. $*
SDESC
Errored Second 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinESs
     Syntax=""
     Descr="Count of Errored Seconds in the current 15 minute
                interval.  The errored second parameter is a count of
                one-second intervals containing one or more crc
                anomalies, or one or more los or sef defects."
  2: adslAturThresh15MinESs
     Syntax="INTEGER"
     Descr="The number of Errored Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfESsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturRateChangeTrap .1.3.6.1.2.1.10.94.1.2.2.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA The ATURs transmit rate has changed (RADSL mode only) $*
SDESC
The ATURs transmit rate has changed (RADSL mode only)
Variables:
  1: adslAturChanCurrTxRate
     Syntax="GAUGE"
     Descr="Actual transmit rate on this channel."
  2: adslAturChanPrevTxRate
     Syntax="GAUGE"
     Descr="The rate at the time of the last
                 adslAturRateChangeTrap event. It is also set at
                 initialization to prevent a trap being sent.
                 Rate changes less than adslAturThresh(*)RateDown
                 or less than adslAturThresh(*)RateUp will not
                 cause a trap or cause this object to change.
                 (*) == Fast or Interleave.
                 See AdslLineAlarmConfProfileEntry."
EDESC
#
#
#
#
MIB: ADSL-TC-MIB (file:./rfc2662-adsl-tc.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: VRRP-MIB (file:./rfc2787-vrrp.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT vrrpTrapNewMaster .1.3.6.1.2.1.68.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The newMaster trap indicates that the sending agent $*
SDESC
The newMaster trap indicates that the sending agent
has transitioned to 'Master' state.
Variables:
  1: vrrpOperMasterIpAddr
     Syntax="IPADDR"
     Descr="The master router's real (primary) IP address. This is
         the IP address listed as the source in VRRP advertisement
         last received by this virtual router."
EDESC
#
#
#
EVENT vrrpTrapAuthFailure .1.3.6.1.2.1.68.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A vrrpAuthFailure trap signifies that a packet has $*
SDESC
A vrrpAuthFailure trap signifies that a packet has
been received from a router whose authentication key
or authentication type conflicts with this router's
authentication key or authentication type. Implementation
of this trap is optional.
Variables:
  1: vrrpTrapPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound VRRP packet. Used by
          vrrpTrapAuthFailure trap."
  2: vrrpTrapAuthErrorType
     Syntax="INTEGER"
       1: invalidAuthType
       2: authTypeMismatch
       3: authFailure
     Descr="Potential types of configuration conflicts.
         Used by vrrpAuthFailure trap."
EDESC
#
#
#
#
MIB: NETWORK-SERVICES-MIB (file:./rfc2788.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HOST-RESOURCES-MIB (file:./rfc2790-host-resources.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RMON-MIB (file:./rfc2819-rmon.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT risingAlarm .1.3.6.1.2.1.16.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The SNMP trap that is generated when an alarm $*
SDESC
The SNMP trap that is generated when an alarm
entry crosses its rising threshold and generates
an event that is configured for sending SNMP
traps.
Variables:
  1: alarmIndex
     Syntax="INTEGER32"
     Descr="An index that uniquely identifies an entry in the
         alarm table.  Each such entry defines a
         diagnostic sample at a particular interval
         for an object on the device."
  2: alarmVariable
     Syntax="OBJECTID"
     Descr="The object identifier of the particular variable to be
         sampled.  Only variables that resolve to an ASN.1 primitive
         type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
         Gauge, or TimeTicks) may be sampled.

         Because SNMP access control is articulated entirely
         in terms of the contents of MIB views, no access
         control mechanism exists that can restrict the value of
         this object to identify only those objects that exist
         in a particular MIB view.  Because there is thus no
         acceptable means of restricting the read access that
         could be obtained through the alarm mechanism, the
         probe must only grant write access to this object in
         those views that have read access to all objects on
         the probe.

         During a set operation, if the supplied variable name is
         not available in the selected MIB view, a badValue error
         must be returned.  If at any time the variable name of
         an established alarmEntry is no longer available in the
         selected MIB view, the probe must change the status of
         this alarmEntry to invalid(4).

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  3: alarmSampleType
     Syntax="INTEGER"
       1: absoluteValue
       2: deltaValue
     Descr="The method of sampling the selected variable and
         calculating the value to be compared against the
         thresholds.  If the value of this object is
         absoluteValue(1), the value of the selected variable
         will be compared directly with the thresholds at the
         end of the sampling interval.  If the value of this
         object is deltaValue(2), the value of the selected
         variable at the last sample will be subtracted from
         the current value, and the difference compared with
         the thresholds.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  4: alarmValue
     Syntax="INTEGER32"
     Descr="The value of the statistic during the last sampling
         period.  For example, if the sample type is deltaValue,
         this value will be the difference between the samples
         at the beginning and end of the period.  If the sample
         type is absoluteValue, this value will be the sampled
         value at the end of the period.

         This is the value that is compared with the rising and
         falling thresholds.

         The value during the current sampling period is not
         made available until the period is completed and will
         remain available until the next period completes."
  5: alarmRisingThreshold
     Syntax="INTEGER32"
     Descr="A threshold for the sampled statistic.  When the current
         sampled value is greater than or equal to this threshold,
         and the value at the last sampling interval was less than
         this threshold, a single event will be generated.
         A single event will also be generated if the first
         sample after this entry becomes valid is greater than or
         equal to this threshold and the associated
         alarmStartupAlarm is equal to risingAlarm(1) or
         risingOrFallingAlarm(3).

         After a rising event is generated, another such event
         will not be generated until the sampled value
         falls below this threshold and reaches the
         alarmFallingThreshold.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
EDESC
#
#
#
EVENT fallingAlarm .1.3.6.1.2.1.16.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The SNMP trap that is generated when an alarm $*
SDESC
The SNMP trap that is generated when an alarm
entry crosses its falling threshold and generates
an event that is configured for sending SNMP
traps.
Variables:
  1: alarmIndex
     Syntax="INTEGER32"
     Descr="An index that uniquely identifies an entry in the
         alarm table.  Each such entry defines a
         diagnostic sample at a particular interval
         for an object on the device."
  2: alarmVariable
     Syntax="OBJECTID"
     Descr="The object identifier of the particular variable to be
         sampled.  Only variables that resolve to an ASN.1 primitive
         type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
         Gauge, or TimeTicks) may be sampled.

         Because SNMP access control is articulated entirely
         in terms of the contents of MIB views, no access
         control mechanism exists that can restrict the value of
         this object to identify only those objects that exist
         in a particular MIB view.  Because there is thus no
         acceptable means of restricting the read access that
         could be obtained through the alarm mechanism, the
         probe must only grant write access to this object in
         those views that have read access to all objects on
         the probe.

         During a set operation, if the supplied variable name is
         not available in the selected MIB view, a badValue error
         must be returned.  If at any time the variable name of
         an established alarmEntry is no longer available in the
         selected MIB view, the probe must change the status of
         this alarmEntry to invalid(4).

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  3: alarmSampleType
     Syntax="INTEGER"
       1: absoluteValue
       2: deltaValue
     Descr="The method of sampling the selected variable and
         calculating the value to be compared against the
         thresholds.  If the value of this object is
         absoluteValue(1), the value of the selected variable
         will be compared directly with the thresholds at the
         end of the sampling interval.  If the value of this
         object is deltaValue(2), the value of the selected
         variable at the last sample will be subtracted from
         the current value, and the difference compared with
         the thresholds.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  4: alarmValue
     Syntax="INTEGER32"
     Descr="The value of the statistic during the last sampling
         period.  For example, if the sample type is deltaValue,
         this value will be the difference between the samples
         at the beginning and end of the period.  If the sample
         type is absoluteValue, this value will be the sampled
         value at the end of the period.

         This is the value that is compared with the rising and
         falling thresholds.

         The value during the current sampling period is not
         made available until the period is completed and will
         remain available until the next period completes."
  5: alarmFallingThreshold
     Syntax="INTEGER32"
     Descr="A threshold for the sampled statistic.  When the current
         sampled value is less than or equal to this threshold,
         and the value at the last sampling interval was greater than
         this threshold, a single event will be generated.
         A single event will also be generated if the first
         sample after this entry becomes valid is less than or
         equal to this threshold and the associated
         alarmStartupAlarm is equal to fallingAlarm(2) or
         risingOrFallingAlarm(3).

         After a falling event is generated, another such event
         will not be generated until the sampled value
         rises above this threshold and reaches the
         alarmRisingThreshold.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
EDESC
#
#
#
#
MIB: HCNUM-TC (file:./rfc2856-hcnum-tc.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IF-MIB (file:./rfc2863-if.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT linkDown .1.3.6.1.6.3.1.1.5.3 "Status Events" Normal
FORMAT ZBXTRAP $aA A linkDown trap signifies that the SNMP entity, acting in $*
SDESC
A linkDown trap signifies that the SNMP entity, acting in
an agent role, has detected that the ifOperStatus object for
one of its communication links is about to enter the down
state from some other state (but not from the notPresent
state).  This other state is indicated by the included value
of ifOperStatus.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The testing(3) state
            indicates that no operational packets can be passed.  When a
            managed system initializes, all interfaces start with
            ifAdminStatus in the down(2) state.  As a result of either
            explicit management action or per configuration information
            retained by the managed system, ifAdminStatus is then
            changed to either the up(1) or testing(3) states (or remains
            in the down(2) state)."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
EDESC
#
#
#
EVENT linkUp .1.3.6.1.6.3.1.1.5.4 "Status Events" Normal
FORMAT ZBXTRAP $aA A linkUp trap signifies that the SNMP entity, acting in an $*
SDESC
A linkUp trap signifies that the SNMP entity, acting in an
agent role, has detected that the ifOperStatus object for
one of its communication links left the down state and
transitioned into some other state (but not into the
notPresent state).  This other state is indicated by the
included value of ifOperStatus.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The testing(3) state
            indicates that no operational packets can be passed.  When a
            managed system initializes, all interfaces start with
            ifAdminStatus in the down(2) state.  As a result of either
            explicit management action or per configuration information
            retained by the managed system, ifAdminStatus is then
            changed to either the up(1) or testing(3) states (or remains
            in the down(2) state)."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
EDESC
#
#
#
#
MIB: DISMAN-PING-MIB (file:./rfc2925-disman-ping.mib) converted on Fri Mar 18 22:02:47 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pingProbeFailed .1.3.6.1.2.1.80.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Generated when a probe failure is detected when the $*
SDESC
Generated when a probe failure is detected when the
corresponding pingCtlTrapGeneration object is set to
probeFailure(0) subject to the value of
pingCtlTrapProbeFailureFilter.  The object
pingCtlTrapProbeFailureFilter can be used to specify the
number of successive probe failures that are required
before this notification can be generated.
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
EVENT pingTestFailed .1.3.6.1.2.1.80.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Generated when a ping test is determined to have failed $*
SDESC
Generated when a ping test is determined to have failed
when the corresponding pingCtlTrapGeneration object is
set to testFailure(1).  In this instance
pingCtlTrapTestFailureFilter should specify the number of
probes in a test required to have failed in order to
consider the test as failed.
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
EVENT pingTestCompleted .1.3.6.1.2.1.80.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Generated at the completion of a ping test when the $*
SDESC
Generated at the completion of a ping test when the
corresponding pingCtlTrapGeneration object is set to
testCompletion(4).
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
#
MIB: IGMP-STD-MIB (file:./rfc2933-igmp-std.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DISMAN-EVENT-MIB (file:./rfc2981-disman-event.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mteTriggerFired .1.3.6.1.2.1.88.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that the trigger indicated by the object $*
SDESC
Notification that the trigger indicated by the object
instances has fired, for triggers with mteTriggerType
'boolean' or 'existence'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerRising .1.3.6.1.2.1.88.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that the rising threshold was met for triggers $*
SDESC
Notification that the rising threshold was met for triggers
with mteTriggerType 'threshold'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerFalling .1.3.6.1.2.1.88.2.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that the falling threshold was met for triggers $*
SDESC
Notification that the falling threshold was met for triggers
with mteTriggerType 'threshold'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerFailure .1.3.6.1.2.1.88.2.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that an attempt to check a trigger has failed. $*
SDESC
Notification that an attempt to check a trigger has failed.
The network manager must enable this notification only with
a certain fear and trembling, as it can easily crowd out more
important information.  It should be used only to help diagnose
a problem that has appeared in the error counters and can not
be found otherwise.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteFailedReason
     Syntax="INTEGER"
       -1: localResourceLack
       -2: badDestination
       -3: destinationUnreachable
       -4: noResponse
       -5: badType
       -6: sampleOverrun
       0: noError
       1: tooBig
       10: wrongValue
       11: noCreation
       12: inconsistentValue
       13: resourceUnavailable
       14: commitFailed
       15: undoFailed
       16: authorizationError
       17: notWritable
       18: inconsistentName
       2: noSuchName
       3: badValue
       4: readOnly
       5: genErr
       6: noAccess
       7: wrongType
       8: wrongLength
       9: wrongEncoding
     Descr="The reason for the failure of an attempt to check for a
        trigger condition or set an object in response to an event."
EDESC
#
#
#
EVENT mteEventSetFailure .1.3.6.1.2.1.88.2.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that an attempt to do a set in response to an $*
SDESC
Notification that an attempt to do a set in response to an
event has failed.
The network manager must enable this notification only with
a certain fear and trembling, as it can easily crowd out more
important information.  It should be used only to help diagnose
a problem that has appeared in the error counters and can not
be found otherwise.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteFailedReason
     Syntax="INTEGER"
       -1: localResourceLack
       -2: badDestination
       -3: destinationUnreachable
       -4: noResponse
       -5: badType
       -6: sampleOverrun
       0: noError
       1: tooBig
       10: wrongValue
       11: noCreation
       12: inconsistentValue
       13: resourceUnavailable
       14: commitFailed
       15: undoFailed
       16: authorizationError
       17: notWritable
       18: inconsistentName
       2: noSuchName
       3: badValue
       4: readOnly
       5: genErr
       6: noAccess
       7: wrongType
       8: wrongLength
       9: wrongEncoding
     Descr="The reason for the failure of an attempt to check for a
        trigger condition or set an object in response to an event."
EDESC
#
#
#
#
MIB: IPV6-MLD-MIB (file:./rfc3019-ipv6-mld.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HC-RMON-MIB (file:./rfc3273-hc-rmon.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DIFFSERV-DSCP-TC (file:./rfc3289-diffserv-dscp-tc.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DIFFSERV-MIB (file:./rfc3289-diffserv.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-NOTIFICATION-MIB (file:./rfc3413-snmp-notification.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-USER-BASED-SM-MIB (file:./rfc3414-snmp-usm.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-VIEW-BASED-ACM-MIB (file:./rfc3415-snmp-vacm.mib) converted on Fri Mar 18 22:02:48 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMPv2-TM (file:./rfc3417-snmpv2-tm.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMPv2-MIB (file:./rfc3418-snmpv2.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT coldStart .1.3.6.1.6.3.1.1.5.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A coldStart trap signifies that the SNMP entity, $*
SDESC
A coldStart trap signifies that the SNMP entity,
supporting a notification originator application, is
reinitializing itself and that its configuration may
have been altered.
EDESC
#
#
#
EVENT warmStart .1.3.6.1.6.3.1.1.5.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A warmStart trap signifies that the SNMP entity, $*
SDESC
A warmStart trap signifies that the SNMP entity,
supporting a notification originator application,
is reinitializing itself such that its configuration
is unaltered.
EDESC
#
#
#
EVENT authenticationFailure .1.3.6.1.6.3.1.1.5.5 "Status Events" Normal
FORMAT ZBXTRAP $aA An authenticationFailure trap signifies that the SNMP $*
SDESC
An authenticationFailure trap signifies that the SNMP
entity has received a protocol message that is not
properly authenticated.  While all implementations
of SNMP entities MAY be capable of generating this
trap, the snmpEnableAuthenTraps object indicates
whether this trap will be generated.
EDESC
#
#
#
#
MIB: TRANSPORT-ADDRESS-MIB (file:./rfc3419-transport-address.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PerfHist-TC-MIB (file:./rfc3593-perfhist-tc.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-FLOW-LABEL-MIB (file:./rfc3595-ipv6-flow-label.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: POWER-ETHERNET-MIB (file:./rfc3621-power-ethernet.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pethPsePortOnOffNotification .1.3.6.1.2.1.105.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA  This Notification indicates if Pse Port is delivering or $*
SDESC
 This Notification indicates if Pse Port is delivering or
not power to the PD.  This Notification SHOULD be sent on
every status change except in the searching mode.
At least 500 msec must elapse between notifications
being emitted by the same object instance.
Variables:
  1: pethPsePortDetectionStatus
     Syntax="INTEGER"
       1: disabled
       2: searching
       3: deliveringPower
       4: fault
       5: test
       6: otherFault
     Descr="Describes the operational status of the port PD detection.
         A value of disabled(1)- indicates that the PSE State diagram
         is in the state DISABLED.
         A value of deliveringPower(3) - indicates that the PSE State
         diagram is in the state POWER_ON for a duration greater than
         tlim max (see IEEE Std 802.3af Table 33-5 tlim).
         A value of fault(4) - indicates that the PSE State diagram is
         in the state TEST_ERROR.
         A value of test(5) - indicates that the PSE State diagram is
         in the state TEST_MODE.
         A value of otherFault(6) - indicates that the PSE State
         diagram is in the state IDLE due to the variable
         error_conditions.
         A value of searching(2)- indicates the PSE State diagram is
         in a state other than those listed above."
EDESC
#
#
#
EVENT pethMainPowerUsageOnNotification .1.3.6.1.2.1.105.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA  This Notification indicate PSE Threshold usage $*
SDESC
 This Notification indicate PSE Threshold usage
indication is on, the usage power is above the
threshold.  At least 500 msec must elapse between
notifications being emitted by the same object
instance.
Variables:
  1: pethMainPseConsumptionPower
     Syntax="GAUGE"
     Descr="Measured usage power expressed in Watts."
EDESC
#
#
#
EVENT pethMainPowerUsageOffNotification .1.3.6.1.2.1.105.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA  This Notification indicates PSE Threshold usage indication $*
SDESC
 This Notification indicates PSE Threshold usage indication
off, the usage power is below the threshold.
At least 500 msec must elapse between notifications being
emitted by the same object instance.
Variables:
  1: pethMainPseConsumptionPower
     Syntax="GAUGE"
     Descr="Measured usage power expressed in Watts."
EDESC
#
#
#
#
MIB: EtherLike-MIB (file:./rfc3635-EtherLike.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HC-PerfHist-TC-MIB (file:./rfc3705-hc-perfhist-tc.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-TC-STD-MIB (file:./rfc3811-mpls-tc-std.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-TE-STD-MIB (file:./rfc3812-mpls-te-std.mib) converted on Fri Mar 18 22:02:49 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-LSR-STD-MIB (file:./rfc3813-mpls-lsr-std.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-FTN-STD-MIB (file:./rfc3814-mpls-ftn-std.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-LDP-STD-MIB (file:./rfc3815-mpls-ldp-std.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-USM-AES-MIB (file:./rfc3826-snmp-usm-aes.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TE-MIB (file:./rfc3970-te.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT teTunnelUp .1.3.6.1.2.1.122.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelUp notification is generated when the $*
SDESC
A teTunnelUp notification is generated when the
Tunnel indexed by teTunnelName transitions to the
'up' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose
transition to up made the tunnel go up.
This notification MUST be limited to at most one
every minute, in case the tunnel flaps up and down.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelDown .1.3.6.1.2.1.122.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelDown notification is generated when the $*
SDESC
A teTunnelDown notification is generated when the
Tunnel indexed by teTunnelName transitions to the
'down' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose
transition to down made the tunnel go down.
This notification MUST be limited to at most one
every minute, in case the tunnel flaps up and down.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelChanged .1.3.6.1.2.1.122.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelChanged notification is generated when an $*
SDESC
A teTunnelChanged notification is generated when an
active path on the Tunnel indexed by teTunnelName
changes or a new path becomes active.  The value
of tePathName is the new active path.
This notification MUST be limited to at most one
every minute, in case the tunnel changes quickly.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelRerouted .1.3.6.1.2.1.122.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelRerouted notification is generated when $*
SDESC
A teTunnelRerouted notification is generated when
an active path for the Tunnel indexed by
teTunnelName stays the same, but its route changes.
This notification MUST be limited to at most one
every minute, in case the tunnel reroutes quickly.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
#
MIB: INET-ADDRESS-MIB (file:./rfc4001-inet-address.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TCP-MIB (file:./rfc4022-tcp.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: FC-MGMT-MIB (file:./rfc4044-fc-mgmt.mib) converted on Fri Mar 18 22:02:50 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TUNNEL-MIB (file:./rfc4087-tunnel.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: UDP-MIB (file:./rfc4113-udp.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ENTITY-MIB (file:./rfc4133-entity.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT entConfigChange .1.3.6.1.2.1.47.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An entConfigChange notification is generated when the value $*
SDESC
An entConfigChange notification is generated when the value
of entLastChangeTime changes.  It can be utilized by an NMS
to trigger logical/physical entity table maintenance polls.
An agent should not generate more than one entConfigChange
'notification-event' in a given time interval (five seconds
is the suggested default).  A 'notification-event' is the
transmission of a single trap or inform PDU to a list of
notification destinations.
If additional configuration changes occur within the
throttling period, then notification-events for these
changes should be suppressed by the agent until the current
throttling period expires.  At the end of a throttling
period, one notification-event should be generated if any
configuration changes occurred since the start of the
throttling period.  In such a case, another throttling
period is started right away.
An NMS should periodically check the value of
entLastChangeTime to detect any missed entConfigChange
notification-events, e.g., due to throttling or transmission
loss.
EDESC
#
#
#
#
MIB: VPN-TC-STD-MIB (file:./rfc4265-vpn-tc-std.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: BGP4-MIB (file:./rfc4273-bgp4.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT bgpEstablishedNotification .1.3.6.1.2.1.15.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The bgpEstablishedNotification event is generated $*
EXEC curl --location --request POST 'https://netops.iflytek.com/duty/wechat' --header 'Content-Type: application/json' --data '{"msg":"$aA bgp状态恢复established peer $1 状态$3","method":"snmptrap", "host": "$aA", "type": "bgp", "status": "ok"}'
SDESC
The bgpEstablishedNotification event is generated
when the BGP FSM enters the established state.
This Notification replaces the bgpEstablished
Notification.
Variables:
  1: bgpPeerRemoteAddr
     Syntax="IPADDR"
     Descr="The remote IP address of this entry's BGP
                     peer."
  2: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  3: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpBackwardTransNotification .1.3.6.1.2.1.15.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The bgpBackwardTransNotification event is $*
EXEC curl --location --request POST 'https://netops.iflytek.com/duty/wechat' --header 'Content-Type: application/json' --data '{"msg":"$aA bgp状态变化 peer $1 状态$3","method":"snmptrap", "host": "$aA", "type": "bgp", "status": "problem"}'
SDESC
The bgpBackwardTransNotification event is
generated when the BGP FSM moves from a higher
numbered state to a lower numbered state.
This Notification replaces the
bgpBackwardsTransition Notification.
Variables:
  1: bgpPeerRemoteAddr
     Syntax="IPADDR"
     Descr="The remote IP address of this entry's BGP
                     peer."
  2: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  3: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpEstablished .1.3.6.1.2.1.15.7.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The BGP Established event is generated when $*
SDESC
The BGP Established event is generated when
the BGP FSM enters the ESTABLISHED state.
Variables:
  1: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  2: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpBackwardTransition .1.3.6.1.2.1.15.7.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The BGPBackwardTransition Event is generated $*
SDESC
The BGPBackwardTransition Event is generated
when the BGP FSM moves from a higher numbered
state to a lower numbered state.
Variables:
  1: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  2: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
#
MIB: IP-FORWARD-MIB (file:./rfc4292-ip-forward.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IP-MIB (file:./rfc4293-ip.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: P-BRIDGE-MIB (file:./rfc4363-pbridge.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: Q-BRIDGE-MIB (file:./rfc4363-qbridge.mib) converted on Fri Mar 18 22:02:51 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-L3VPN-STD-MIB (file:./rfc4382-mpls-l3vpn-std.mib) converted on Fri Mar 18 22:02:52 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: T11-FC-NAME-SERVER-MIB (file:./rfc4438-t11-fc-name-server.mib) converted on Fri Mar 18 22:02:52 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11NsRejectRegNotify .1.3.6.1.2.1.135.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever a request to $*
SDESC
This notification is generated whenever a request to
register information in a Name Server Information
Subset (for which the corresponding instance of
t11NsInfoSubsetRejReqNotfyEnable is 'true') is
rejected on a particular Fabric for a particular Nx_Port.
The value of t11FamLocalSwitchWwn indicates the
WWN of the switch that received the request.
(If the WWN is unavailable, the value is set to
the zero-length string.)
The value of t11NsRejectCtCommandString indicates
the rejected request, and the values of
t11NsRejectReasonCode, t11NsRejReasonCodeExp, and
t11NsRejReasonVendorCode indicate the reason for
the rejection.
The value of t11NsRegPortName represents the Port Name
if it is able to be extracted out of the Registration
Request, or otherwise the value as currently registered
on the port.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
  2: t11NsRegPortName
     Syntax=""
     Descr="The Port_Name (WWN) of this Nx_Port.
           If this object has not been registered, then its value
           is the zero-length string."
  3: t11NsRejectCtCommandString
     Syntax="OCTETSTR"
     Descr="The binary content of the Registration Request,
           formatted as an octet string (in network byte
           order) containing the CT_IU, as described in
           Table 2 of [FC-GS-4] (including the preamble),
           which was most recently rejected for the particular
           Name Server Information Subset on the particular port
           on the particular Fabric.

           This object contains the zero-length string
           if and when the CT-IU's content is unavailable.

           When the length of this object is 255 octets, it
           contains the first 255 octets of the CT-IU (in
           network-byte order)."
  4: t11NsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="A registration reject reason code.  This object
           contains the reason code of the most recent Name
           Server Registration Request failure for the
           particular port on the particular Fabric."
  5: t11NsRejReasonCodeExp
     Syntax="INTEGER"
       1: noAdditionalExplanation
       10: symbolicNodeNameNotRegistered
       11: portTypeNotRegistered
       12: portIpAddressNotRegistered
       13: fabricPortNameNotRegistered
       14: hardAddressNotRegistered
       15: fc4DescriptorNotRegistered
       16: fc4FeaturesNotRegistered
       17: accessDenied
       18: unacceptablePortIdentifier
       19: databaseEmpty
       2: portIdentifierNotRegistered
       20: noObjectRegInSpecifiedScope
       21: domainIdNotPresent
       22: portIdNotPresent
       23: noDeviceAttached
       24: authorizationException
       25: authenticationException
       26: databaseFull
       3: portNameNotRegistered
       4: nodeNameNotRegistered
       5: classOfServiceNotRegistered
       6: nodeIpAddressNotRegistered
       7: ipaNotRegistered
       8: fc4TypeNotRegistered
       9: symbolicPortNameNotRegistered
     Descr="A registration reject reason code explanation.  This
           object contains the reason code explanation of the most
           recent Name Server Registration Request failure for the
           particular port on the particular Fabric."
  6: t11NsRejReasonVendorCode
     Syntax="OCTETSTR"
     Descr="A registration reject vendor-specific code.  This
           object contains the vendor-specific code of the most
           recent Name Server Registration Request failure for the
           particular port on the particular Fabric."
EDESC
#
#
#
#
MIB: T11-FC-FABRIC-ADDR-MGR-MIB (file:./rfc4439-t11-fc-fabric-addr-mgr.mib) converted on Fri Mar 18 22:02:52 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11FamDomainIdNotAssignedNotify .1.3.6.1.2.1.137.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a Domain_ID has not $*
SDESC
This notification indicates that a Domain_ID has not
been configured or assigned for a particular Fabric,
identified by t11FamNotifyFabricIndex, on a particular
switch identified by t11FamLocalSwitchWwn.  This could
happen under the following conditions, and results in the
switch isolating E_Ports on the Fabric:
- if the switch's request for a configured static
Domain_ID is rejected or no other Domain_ID is
assigned, then the E_Ports are isolated.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax=""
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
EVENT t11FamNewPrincipalSwitchNotify .1.3.6.1.2.1.137.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a particular switch, $*
SDESC
This notification indicates that a particular switch,
identified by t11FamLocalSwitchWwn, has become the new
Principal Switch on the Fabric identified by
t11FamNotifyFabricIndex.
This notification is sent soon after its election as
the new Principal Switch, i.e., upon expiration of a
Principal Switch selection timer that is equal to
twice the Fabric Stability Timeout value (F_S_TOV).
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax=""
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
EVENT t11FamFabricChangeNotify .1.3.6.1.2.1.137.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent whenever a particular switch, $*
SDESC
This notification is sent whenever a particular switch,
identified by t11FamLocalSwitchWwn, sends or
receives a Build Fabric (BF) or a ReConfigure Fabric
(RCF) message on the Fabric identified by
t11FamNotifyFabricIndex.
This notification is not sent if a
't11FamNewPrincipalSwitchNotify' notification is sent
for the same event.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax=""
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
#
MIB: T11-TC-MIB (file:./rfc4439-t11-tc.mib) converted on Fri Mar 18 22:02:52 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ISIS-MIB (file:./rfc4444-isis.mib) converted on Fri Mar 18 22:02:52 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT isisDatabaseOverload .1.3.6.1.2.1.138.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the system $*
SDESC
This notification is generated when the system
enters or leaves the Overload state.  The number
of times this has been generated and cleared is kept
track of by isisSysStatLSPDbaseOloads.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisSysLevelState
     Syntax="INTEGER"
       1: off
       2: on
       3: waiting
       4: overloaded
     Descr="The state of the database at this level.
             The value 'off' indicates that IS-IS is not active at
             this level.
             The value 'on' indicates that IS-IS is active at this
             level and is not overloaded.
             The value 'waiting' indicates a database that is low on
             an essential resource, such as memory.
             The administrator may force the state to 'overloaded'
             by setting the object isisSysLevelSetOverload.
             If the state is 'waiting' or 'overloaded', we
             originate LSPs with the overload bit set."
EDESC
#
#
#
EVENT isisManualAddressDrops .1.3.6.1.2.1.138.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when one of the $*
SDESC
This notification is generated when one of the
manual areaAddresses assigned to this system is
ignored when computing routes.  The object
isisNotificationAreaAddress describes the area that
has been dropped.
The number of times this event has been generated
is counted by isisSysStatManAddrDropFromAreas.
The agent must throttle the generation of
consecutive isisManualAddressDrops notifications
so that there is at least a 5-second gap between
notifications of this type.  When notifications
are throttled, they are dropped, not queued for
sending at a future time.
Variables:
  1: isisNotificationAreaAddress
     Syntax="OCTETSTR"
     Descr="An Area Address."
EDESC
#
#
#
EVENT isisCorruptedLSPDetected .1.3.6.1.2.1.138.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when we find that $*
SDESC
This notification is generated when we find that
an LSP that was stored in memory has become
corrupted.  The number of times this has been
generated is counted by isisSysCorrLSPs.
We forward an LSP ID.  We may have independent
knowledge of the ID, but in some implementations
there is a chance that the ID itself will be
corrupted.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisAttemptToExceedMaxSequence .1.3.6.1.2.1.138.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA When the sequence number on an LSP we generate $*
SDESC
When the sequence number on an LSP we generate
wraps the 32-bit sequence counter, we purge and
wait to re-announce this information.  This
notification describes that event.  Since these
should not be generated rapidly, we generate
an event each time this happens.
While the first 6 bytes of the LSPID are ours,
the other two contain useful information.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisIDLenMismatch .1.3.6.1.2.1.138.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with a different value for the System ID Length.
This notification includes an index to identify
the circuit where we saw the PDU and the header of
the PDU, which may help a network manager identify
the source of the confusion.
The agent must throttle the generation of
consecutive isisIDLenMismatch notifications
so that there is at least a 5-second gap between
notifications of this type.  When notifications
are throttled, they are dropped, not queued for
sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduFieldLen
     Syntax="UNSIGNED32"
     Descr="Holds the System ID length reported in PDU we received."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisMaxAreaAddressesMismatch .1.3.6.1.2.1.138.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with a different value for the Maximum Area
Addresses.  This notification includes the
header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisMaxAreaAddressesMismatch
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduMaxAreaAddress
     Syntax="UNSIGNED32"
     Descr="Holds the Max Area Addresses reported in a PDU
             we received."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisOwnLSPPurge .1.3.6.1.2.1.138.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with our systemID and zero age.  This
notification includes the circuit Index
and router ID from the LSP, if available,
which may help a network manager
identify the source of the confusion.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisSequenceNumberSkip .1.3.6.1.2.1.138.0.8 "Status Events" Normal
FORMAT ZBXTRAP $aA When we receive an LSP with our System ID $*
SDESC
When we receive an LSP with our System ID
and different contents, we may need to reissue
the LSP with a higher sequence number.
We send this notification if we need to increase
the sequence number by more than one.  If two
Intermediate Systems are configured with the same
System ID, this notification will fire.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisAuthenticationTypeFailure .1.3.6.1.2.1.138.0.9 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with the wrong authentication type field.
This notification includes the header of the
packet, which may help a network manager
identify the source of the confusion.
The agent must throttle the generation of
consecutive isisAuthenticationTypeFailure
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAuthenticationFailure .1.3.6.1.2.1.138.0.10 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with an incorrect authentication information
field.  This notification includes the header
of the packet, which may help a network manager
identify the source of the confusion.
The agent must throttle the generation of
consecutive isisAuthenticationFailure
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisVersionSkew .1.3.6.1.2.1.138.0.11 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS running a different version
of the protocol.  This notification includes
the header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisVersionSkew notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduProtocolVersion
     Syntax="UNSIGNED32"
     Descr="Holds the Protocol version reported in PDU we received."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAreaMismatch .1.3.6.1.2.1.138.0.12 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS that does not share any
area address.  This notification includes
the header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisAreaMismatch notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  2: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisRejectedAdjacency .1.3.6.1.2.1.138.0.13 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS but do not establish an
adjacency for some reason.
The agent must throttle the generation of
consecutive isisRejectedAdjacency notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisLSPTooLargeToPropagate .1.3.6.1.2.1.138.0.14 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we attempt to propagate $*
SDESC
A notification sent when we attempt to propagate
an LSP that is larger than the dataLinkBlockSize
for the circuit.
The agent must throttle the generation of
consecutive isisLSPTooLargeToPropagate notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of LSP we received that is too
             big to forward."
  4: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisOrigLSPBuffSizeMismatch .1.3.6.1.2.1.138.0.15 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when a Level 1 LSP or Level $*
SDESC
A notification sent when a Level 1 LSP or Level
2 LSP is received that is larger than the local
value for isisSysLevelOrigLSPBuffSize, or when an
LSP is received that contains the supported Buffer Size
option and the value in the PDU option field does
not match the local value for isisSysLevelOrigLSPBuffSize.
We pass up the size from the option field and the
size of the LSP when one of them exceeds our configuration.
The agent must throttle the generation of
consecutive isisOrigLSPBuffSizeMismatch notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  4: isisPduOriginatingBufferSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of isisSysLevelOrigLSPBuffSize advertised
             by the peer in the originatingLSPBufferSize TLV.
             If the peer does not advertise this TLV, this
             value is set to 0."
  5: isisPduBufferSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of LSP received from peer."
EDESC
#
#
#
EVENT isisProtocolsSupportedMismatch .1.3.6.1.2.1.138.0.16 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when a non-pseudonode $*
SDESC
A notification sent when a non-pseudonode
segment 0 LSP is received that has no matching
protocols supported.  This may be because the system
does not generate the field, or because there are no
common elements.  The list of protocols supported
should be included in the notification: it may be
empty if the TLV is not supported, or if the
TLV is empty.
The agent must throttle the generation of
consecutive isisProtocolsSupportedMismatch
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduProtocolsSupported
     Syntax="OCTETSTR"
     Descr="The list of protocols supported by an
             adjacent system.  This may be empty."
  4: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  5: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAdjacencyChange .1.3.6.1.2.1.138.0.17 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when an adjacency changes $*
SDESC
A notification sent when an adjacency changes
state, entering or leaving state up.
The first 6 bytes of the isisPduLspId are the
SystemID of the adjacent IS.
The isisAdjState is the new state of the adjacency.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  4: isisAdjState
     Syntax="INTEGER"
       1: down
       2: initializing
       3: up
       4: failed
     Descr="The current state of an adjacency."
EDESC
#
#
#
EVENT isisLSPErrorDetected .1.3.6.1.2.1.138.0.18 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when we receive $*
SDESC
This notification is generated when we receive
an LSP with a parse error.  The isisCircIfIndex
holds an index of the circuit on which the PDU
arrived.  The isisPduFragment holds the start of the
LSP, and the isisErrorOffset points to the problem.
If the problem is a malformed TLV, isisErrorOffset
points to the start of the TLV, and isisErrorTLVType
holds the value of the type.
If the problem is with the LSP header, isisErrorOffset
points to the suspicious byte.
The number of such LSPs is accumulated in
isisSysStatLSPErrors.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
  5: isisErrorOffset
     Syntax="UNSIGNED32"
     Descr="An offset to a problem in a PDU.  If the problem
             is a malformed TLV, this points to the beginning
             of the TLV.  If the problem is in the header, this
             points to the byte that is suspicious."
  6: isisErrorTLVType
     Syntax="UNSIGNED32"
     Descr="The type for a malformed TLV."
EDESC
#
#
#
#
MIB: RMON2-MIB (file:./rfc4502-rmon2.mib) converted on Fri Mar 18 22:02:52 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DISMAN-TRACEROUTE-MIB (file:./rfc4560-disman-traceroute.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT traceRoutePathChange .1.3.6.1.2.1.81.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The path to a target has changed. $*
SDESC
The path to a target has changed.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
EVENT traceRouteTestFailed .1.3.6.1.2.1.81.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Could not determine the path to a target. $*
SDESC
Could not determine the path to a target.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
EVENT traceRouteTestCompleted .1.3.6.1.2.1.81.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA The path to a target has just been determined. $*
SDESC
The path to a target has just been determined.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
#
MIB: T11-FC-ROUTE-MIB (file:./rfc4625-t11-fc-route.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: T11-FC-VIRTUAL-FABRIC-MIB (file:./rfc4747-t11-fc-virtual-fabric.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPF-MIB (file:./rfc4750-ospf.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPF-TRAP-MIB (file:./rfc4750-ospf-trap.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SIP-TC-MIB (file:./rfc4780-sip-tc.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SIP-UA-MIB (file:./rfc4780-sip-ua.mib) converted on Fri Mar 18 22:02:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPSEC-SPD-MIB (file:./rfc4807-ipsec-spd.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-MAU-MIB (file:./rfc4836-iana-mau.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MAU-MIB (file:./rfc4836-mau.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT rpMauJabberTrap .1.3.6.1.2.1.26.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent whenever a managed repeater $*
SDESC
This trap is sent whenever a managed repeater
MAU enters the jabber state.
The agent MUST throttle the generation of
consecutive rpMauJabberTraps so that there is at
least a five-second gap between them.
REFERENCE   [IEEE802.3], 30.5.1.3.1, nJabber notification.
Variables:
  1: rpMauJabberState
     Syntax="INTEGER"
       1: other
       2: unknown
       3: noJabber
       4: jabbering
     Descr="The value other(1) is returned if the jabber
                    state is not 2, 3, or 4.  The agent MUST always
                    return other(1) for MAU type dot3MauTypeAUI.

                    The value unknown(2) is returned when the MAU's
                    true state is unknown; for example, when it is
                    being initialized.

                    If the MAU is not jabbering the agent returns
                    noJabber(3).  This is the 'normal' state.

                    If the MAU is in jabber state the agent returns
                    the jabbering(4) value."
EDESC
#
#
#
EVENT ifMauJabberTrap .1.3.6.1.2.1.26.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent whenever a managed interface $*
SDESC
This trap is sent whenever a managed interface
MAU enters the jabber state.
The agent MUST throttle the generation of
consecutive ifMauJabberTraps so that there is at
least a five-second gap between them.
REFERENCE   [IEEE802.3], 30.5.1.3.1, nJabber notification.
Variables:
  1: ifMauJabberState
     Syntax="INTEGER"
       1: other
       2: unknown
       3: noJabber
       4: jabbering
     Descr="The value other(1) is returned if the jabber
                    state is not 2, 3, or 4.  The agent MUST always
                    return other(1) for MAU type dot3MauTypeAUI.

                    The value unknown(2) is returned when the MAU's
                    true state is unknown; for example, when it is
                    being initialized.

                    If the MAU is not jabbering the agent returns
                    noJabber(3).  This is the 'normal' state.

                    If the MAU is in jabber state the agent returns
                    the jabbering(4) value."
EDESC
#
#
#
#
MIB: DOT3-OAM-MIB (file:./rfc4878-dot3-oam.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot3OamThresholdEvent .1.3.6.1.2.1.158.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A dot3OamThresholdEvent notification is sent when a local or $*
SDESC
A dot3OamThresholdEvent notification is sent when a local or
remote threshold crossing event is detected.  A local
threshold crossing event is detected by the local entity,
while a remote threshold crossing event is detected by the
reception of an Ethernet OAM Event Notification OAMPDU
that indicates a threshold event.
This notification should not be sent more than once per
second.
The OAM entity can be derived from extracting the ifIndex from
the variable bindings.  The objects in the notification
correspond to the values in a row instance in the
dot3OamEventLogTable.
The management entity should periodically check
dot3OamEventLogTable to detect any missed events.
Variables:
  1: dot3OamEventLogTimestamp
     Syntax="TICKS"
     Descr="The value of sysUpTime at the time of the logged event.  For
        locally generated events, the time of the event can be
        accurately retrieved from sysUpTime.  For remotely generated
        events, the time of the event is indicated by the reception of
        the Event Notification OAMPDU indicating that the event
        occurred on the peer.  A system may attempt to adjust the
        timestamp value to more accurately reflect the time of the
        event at the peer OAM entity by using other information, such
        as that found in the timestamp found of the Event Notification
        TLVs, which provides an indication of the relative time
        between events at the peer entity.  "
  2: dot3OamEventLogOui
     Syntax="OCTETSTR"
     Descr="The OUI of the entity defining the object type.  All IEEE
        802.3 defined events (as appearing in [802.3ah] except for the
        Organizationally Unique Event TLVs) use the IEEE 802.3 OUI of
        0x0180C2.  Organizations defining their own Event Notification
        TLVs include their OUI in the Event Notification TLV that
        gets reflected here.  "
  3: dot3OamEventLogType
     Syntax="UNSIGNED32"
     Descr="The type of event that generated this entry in the event log.
        When the OUI is the IEEE 802.3 OUI of 0x0180C2, the following
        event types are defined:
        erroredSymbolEvent(1),
        erroredFramePeriodEvent(2),
        erroredFrameEvent(3),
        erroredFrameSecondsEvent(4),
        linkFault(256),
        dyingGaspEvent(257),
        criticalLinkEvent(258)
        The first four are considered threshold crossing events, as
        they are generated when a metric exceeds a given value within
        a specified window.  The other three are not threshold
        crossing events.

        When the OUI is not 71874 (0x0180C2 in hex), then some other
        organization has defined the event space.  If event subtyping
        is known to the implementation, it may be reflected here.
        Otherwise, this value should return all F's (2^32 - 1).
        "
  4: dot3OamEventLogLocation
     Syntax="INTEGER"
       1: local
       2: remote
     Descr="Whether this event occurred locally (local(1)), or was
        received from the OAM peer via Ethernet OAM (remote(2)).
        "
  5: dot3OamEventLogWindowHi
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventWindowHi and dot3OamEventWindowLo, form
        an unsigned 64-bit integer yielding the window over which the
        value was measured for the threshold crossing event (for
        example, 5, when 11 occurrences happened in 5 seconds while
        the threshold was 10).  The two objects are combined as:
        dot3OamEventLogWindow = ((2^32) * dot3OamEventLogWindowHi)
        + dot3OamEventLogWindowLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  6: dot3OamEventLogWindowLo
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventWindowHi and dot3OamEventWindowLo form an
        unsigned 64-bit integer yielding the window over which the
        value was measured for the threshold crossing event (for
        example, 5, when 11 occurrences happened in 5 seconds while
        the threshold was 10).  The two objects are combined as:

        dot3OamEventLogWindow = ((2^32) * dot3OamEventLogWindowHi)
        + dot3OamEventLogWindowLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  7: dot3OamEventLogThresholdHi
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventThresholdHi and dot3OamEventThresholdLo
        form an unsigned 64-bit integer yielding the value that was
        crossed for the threshold crossing event (for example, 10,
        when 11 occurrences happened in 5 seconds while the threshold
        was 10).  The two objects are combined as:

        dot3OamEventLogThreshold = ((2^32) * dot3OamEventLogThresholdHi)
        + dot3OamEventLogThresholdLo

        Otherwise, this value is returned as all F's (2^32 -1) and
        adds no useful information.
        "
  8: dot3OamEventLogThresholdLo
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventThresholdHi and dot3OamEventThresholdLo
        form an unsigned 64-bit integer yielding the value that was
        crossed for the threshold crossing event (for example, 10,
        when 11 occurrences happened in 5 seconds while the threshold
        was 10).  The two objects are combined as:

        dot3OamEventLogThreshold = ((2^32) * dot3OamEventLogThresholdHi)
        + dot3OamEventLogThresholdLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  9: dot3OamEventLogValue
     Syntax="COUNTER64"
     Descr="If the event represents a threshold crossing event, this
        value indicates the value of the parameter within the given
        window that generated this event (for example, 11, when 11
        occurrences happened in 5 seconds while the threshold was 10).

        Otherwise, this value is returned as all F's
        (2^64 - 1) and adds no useful information.
        "
 10: dot3OamEventLogRunningTotal
     Syntax="COUNTER64"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        this event has happened since the last reset (for example,
        3253, when 3253 symbol errors have occurred since the last
        reset, which has resulted in 51 symbol error threshold
        crossing events since the last reset).
        "
 11: dot3OamEventLogEventTotal
     Syntax="UNSIGNED32"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        one or more of these occurrences have resulted in an Event
        Notification (for example, 51 when 3253 symbol errors have
        occurred since the last reset, which has resulted in 51 symbol
        error threshold crossing events since the last reset).
        "
EDESC
#
#
#
EVENT dot3OamNonThresholdEvent .1.3.6.1.2.1.158.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A dot3OamNonThresholdEvent notification is sent when a local $*
SDESC
A dot3OamNonThresholdEvent notification is sent when a local
or remote non-threshold crossing event is detected.  A local
event is detected by the local entity, while a remote event is
detected by the reception of an Ethernet OAM Event
Notification OAMPDU that indicates a non-threshold crossing
event.
This notification should not be sent more than once per
second.
The OAM entity can be derived from extracting the ifIndex from
the variable bindings.  The objects in the notification
correspond to the values in a row instance of the
dot3OamEventLogTable.
The management entity should periodically check
dot3OamEventLogTable to detect any missed events.
Variables:
  1: dot3OamEventLogTimestamp
     Syntax="TICKS"
     Descr="The value of sysUpTime at the time of the logged event.  For
        locally generated events, the time of the event can be
        accurately retrieved from sysUpTime.  For remotely generated
        events, the time of the event is indicated by the reception of
        the Event Notification OAMPDU indicating that the event
        occurred on the peer.  A system may attempt to adjust the
        timestamp value to more accurately reflect the time of the
        event at the peer OAM entity by using other information, such
        as that found in the timestamp found of the Event Notification
        TLVs, which provides an indication of the relative time
        between events at the peer entity.  "
  2: dot3OamEventLogOui
     Syntax="OCTETSTR"
     Descr="The OUI of the entity defining the object type.  All IEEE
        802.3 defined events (as appearing in [802.3ah] except for the
        Organizationally Unique Event TLVs) use the IEEE 802.3 OUI of
        0x0180C2.  Organizations defining their own Event Notification
        TLVs include their OUI in the Event Notification TLV that
        gets reflected here.  "
  3: dot3OamEventLogType
     Syntax="UNSIGNED32"
     Descr="The type of event that generated this entry in the event log.
        When the OUI is the IEEE 802.3 OUI of 0x0180C2, the following
        event types are defined:
        erroredSymbolEvent(1),
        erroredFramePeriodEvent(2),
        erroredFrameEvent(3),
        erroredFrameSecondsEvent(4),
        linkFault(256),
        dyingGaspEvent(257),
        criticalLinkEvent(258)
        The first four are considered threshold crossing events, as
        they are generated when a metric exceeds a given value within
        a specified window.  The other three are not threshold
        crossing events.

        When the OUI is not 71874 (0x0180C2 in hex), then some other
        organization has defined the event space.  If event subtyping
        is known to the implementation, it may be reflected here.
        Otherwise, this value should return all F's (2^32 - 1).
        "
  4: dot3OamEventLogLocation
     Syntax="INTEGER"
       1: local
       2: remote
     Descr="Whether this event occurred locally (local(1)), or was
        received from the OAM peer via Ethernet OAM (remote(2)).
        "
  5: dot3OamEventLogEventTotal
     Syntax="UNSIGNED32"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        one or more of these occurrences have resulted in an Event
        Notification (for example, 51 when 3253 symbol errors have
        occurred since the last reset, which has resulted in 51 symbol
        error threshold crossing events since the last reset).
        "
EDESC
#
#
#
#
MIB: T11-FC-FABRIC-CONFIG-SERVER-MIB (file:./rfc4935-t11-fc-fabric-config-server.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11FcsRqRejectNotification .1.3.6.1.2.1.162.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever the Fabric $*
SDESC
This notification is generated whenever the Fabric
Configuration Server on a switch (indicated by the
value of t11FamLocalSwitchWwn) rejects a Fabric
Configuration Server request.
The Fabric Configuration Server should update the
t11FcsRejectReasonCode, t11FcsRejectReasonCodeExp
and t11FcsRejectReasonVendorCode objects with the
corresponding reason code, explanation and vendor
specific code before sending the notification.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
  2: t11FcsRejectReasonCode
     Syntax=""
     Descr="This object contains the reason code corresponding
        to the latest Fabric Configuration Server request
        rejected by the local system."
  3: t11FcsRejectReasonCodeExp
     Syntax="INTEGER"
       1: noAdditionalExplanation
       10: ieInfoListNotAvailable
       11: portListNotAvailable
       12: portTypeNotAvailable
       13: phyPortNumNotAvailable
       14: attPortNameListNotAvailable
       15: portStateNotAvailable
       16: unableToRegIELogName
       17: platformNameNoExist
       18: platformNameAlreadyExists
       19: platformNodeNameNoExists
       2: invNameIdForIEOrPort
       20: platformNodeNameAlreadyExists
       21: resourceUnavailable
       22: noEntriesInLunMap
       23: invalidDeviceNameLength
       24: multipleAttributes
       25: invalidAttribBlockLength
       26: attributesMissing
       3: ieListNotAvailable
       4: ieTypeNotAvailable
       5: domainIdNotAvailable
       6: mgmtIdNotAvailable
       7: fabNameNotAvailable
       8: ielogNameNotAvailable
       9: mgmtAddrListNotAvailable
     Descr="When the corresponding instance of
        t11FcsRejectReasonCode has the value: 'unable to
        perform command request', this object contains the
        corresponding reason code explanation."
  4: t11FcsRejectReasonVendorCode
     Syntax="OCTETSTR"
     Descr="A registration reject vendor-specific code.  This
        object contains the vendor-specific code of the most
        recently rejected Fabric Configuration Server
        Registration request for the particular port on
        the particular Fabric."
EDESC
#
#
#
EVENT t11FcsDiscoveryCompleteNotify .1.3.6.1.2.1.162.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated by the Fabric $*
SDESC
This notification is generated by the Fabric
Configuration Server on the completion of the
discovery of Fabrics in the range that has
t11FcsFabricDiscoveryRangeLow at its low end.
Variables:
  1: t11FcsFabricDiscoveryRangeLow
     Syntax=""
     Descr="The discovery by a particular switch operates
        within all existing Fabrics that have a Fabric
        Index within a specific inclusive range.  This
        object specifies the minimum Fabric Index value
        within that range.  This value just represents
        the lower end of the range and does not necessarily
        represent any existing Fabric."
EDESC
#
#
#
EVENT t11FcsMgmtAddrChangeNotify .1.3.6.1.2.1.162.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated by the Fabric $*
SDESC
This notification is generated by the Fabric
Configuration Server whenever the management
address of an IE changes, i.e., whenever an
entry in the t11FcsMgmtAddrListTable changes.
Variables:
  1: t11FcsMgmtAddrChangeFabricIndex
     Syntax=""
     Descr="The index value that identifies the Fabric on which
        a management address change has been detected."
  2: t11FcsMgmtAddrChangeIeName
     Syntax=""
     Descr="The IE for which a management address change has been
        detected."
EDESC
#
#
#
#
MIB: T11-FC-ZONE-SERVER-MIB (file:./rfc4936-t11-fc-zone-server.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11ZsRequestRejectNotify .1.3.6.1.2.1.160.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever a Zone Server $*
SDESC
This notification is generated whenever a Zone Server
(indicated by the value of t11FamLocalSwitchWwn) rejects
a request.
The value of t11ZsRejectCtCommandString indicates the
rejected request, and the values of t11ZsRejectReasonCode,
t11ZsRejectReasonCodeExp and t11ZsRejectReasonVendorCode
indicate the reason for the rejection.  The value of
t11ZsRequestClient indicates the source of the request.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
  2: t11ZsRejectRequestSource
     Syntax=""
     Descr="The WWN that was the source of the CT_IU
           contained in the corresponding instance of
           t11ZsRejectCtCommandString."
  3: t11ZsRejectCtCommandString
     Syntax="OCTETSTR"
     Descr="The binary content of the Zone Server request,
           formatted as an octet string (in network byte order)
           containing the Common Transport Information Unit
           (CT_IU), as described in Table 2 of FC-GS-5 (including
           the preamble), which was most recently rejected by the
           Fabric Configuration Server for this Fabric.

           This object contains the zero-length string
           if and when the CT-IU's content is unavailable.

           When the length of this object is 255 octets, it
           contains the first 255 octets of the CT-IU (in
           network byte order)."
  4: t11ZsRejectReasonCode
     Syntax=""
     Descr="The reason code corresponding to the most recent
           rejection of a request by the Zone Server for
           this Fabric."
  5: t11ZsRejectReasonCodeExp
     Syntax="INTEGER"
       1: other
       10: deactivateZoneSetFailed
       11: reqNotSupported
       12: capabilityNotSupported
       13: zoneMemberIDTypeNotSupp
       14: invalidZoneSetDefinition
       15: enhancedZoningCmdsNotSupported
       16: zoneSetExists
       17: zoneExists
       18: aliasExists
       19: zoneSetUnknown
       2: noAdditionalExplanation
       20: zoneUnknown
       21: aliasUnknown
       22: zoneAliasTypeUnknown
       23: unableEnhancedMode
       24: basicZoningCmdsNotSupported
       25: zoneAttribObjectExists
       26: zoneAttribObjectUnknown
       27: requestInProcess
       28: cmitInProcess
       29: hardEnforcementFailed
       3: zonesNotSupported
       30: unresolvedReferences
       31: consistencyChecksFailed
       4: zoneSetNameUnknown
       5: noZoneSetActive
       6: zoneNameUnknown
       7: zoneStateUnknown
       8: incorrectPayloadLen
       9: tooLargeZoneSet
     Descr="When the value of t11ZsRejectReasonCode is
           'Unable to perform command request', this
           object contains the corresponding reason code
           explanation."
  6: t11ZsRejectReasonVendorCode
     Syntax="OCTETSTR"
     Descr="When the value of t11ZsRejectReasonCode is
           'Vendor Specific Error', this object contains
           the corresponding vendor-specific reason code."
EDESC
#
#
#
EVENT t11ZsMergeFailureNotify .1.3.6.1.2.1.160.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a Zone merge $*
SDESC
This notification indicates that a Zone merge
failure has occurred on the Fabric indicated by the
value of t11ZsFabricIndex, on the interface
indicated by the value of ifIndex.
If multiple Virtual Fabrics are configured on an
interface, and all have a Zone merge failure
at the same time, then just one notification is
generated and t11ZsFabricIndex has the value 4096.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: t11ZsFabricIndex
     Syntax="UNSIGNED32"
     Descr="This object contains either a value of
           T11FabricIndex to identify the Fabric on which
           some occurrence has caused a notification to be
           generated, or it has the value 4096 to indicate
           all applicable Fabrics."
EDESC
#
#
#
EVENT t11ZsMergeSuccessNotify .1.3.6.1.2.1.160.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a successful Zone $*
SDESC
This notification indicates that a successful Zone
merge has occurred on the Fabric indicated by the
value of t11ZsFabricIndex, on the interface
indicated by the value of ifIndex.
If multiple Virtual Fabrics are configured on an
interface, and all have a successful Zone Merge
at the same time, then just one notification is
generated and t11ZsFabricIndex has the value 4096.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: t11ZsFabricIndex
     Syntax="UNSIGNED32"
     Descr="This object contains either a value of
           T11FabricIndex to identify the Fabric on which
           some occurrence has caused a notification to be
           generated, or it has the value 4096 to indicate
           all applicable Fabrics."
EDESC
#
#
#
EVENT t11ZsDefZoneChangeNotify .1.3.6.1.2.1.160.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that the $*
SDESC
This notification indicates that the
value of a Default Zone Setting has changed.
The value of t11ZsServerDefaultZoneSetting
contains the value after the change.
Variables:
  1: t11ZsServerDefaultZoneSetting
     Syntax="INTEGER"
       1: permit
       2: deny
     Descr="This object controls the Enhanced Zoning flag that
           governs the behavior of the Default Zone on this Fabric.

           If this object is set to 'permit', then the members of
           the Default Zone on this Fabric can communicate with
           each other.

           If this object is set to 'deny', then the members of the
           Default Zone on this Fabric cannot communicate with each
           other."
EDESC
#
#
#
EVENT t11ZsActivateNotify .1.3.6.1.2.1.160.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever a switch $*
SDESC
This notification is generated whenever a switch
(indicated by the value of t11FamLocalSwitchWwn)
activates/deactivates a Zone Set on a Fabric.
The t11ZsActivateResult object denotes the outcome
of the activation/deactivation.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax=""
  2: t11ZsActivateResult
     Syntax="INTEGER"
       1: activateSuccess
       2: activateFailure
       3: deactivateSuccess
       4: deactivateFailure
       5: inProgress
       6: none
     Descr="This object indicates the outcome of the most recent
           activation/deactivation using this entry.

           When the value of this object is 'inProgress', the
           values of the corresponding instances of
           t11ZsActivateRequest and t11ZsActivateDeactivate
           cannot be modified.

           The value 'none' indicates activation/deactivation
           has not been attempted since the last restart of
           the management system."
EDESC
#
#
#
#
MIB: PIM-STD-MIB (file:./rfc5060-pim-std.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pimNeighborLoss .1.3.6.1.2.1.157.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A pimNeighborLoss notification signifies the loss of an $*
SDESC
A pimNeighborLoss notification signifies the loss of an
adjacency with a neighbor.  This notification should be
generated when the neighbor timer expires, and the router
has no other neighbors on the same interface with the same
IP version and a lower IP address than itself.
This notification is generated whenever the counter
pimNeighborLossCount is incremented, subject
to the rate limit specified by
pimNeighborLossNotificationPeriod.
REFERENCE RFC 4601 section 4.3.2
Variables:
  1: pimNeighborUpTime
     Syntax="TICKS"
     Descr="The time since this PIM neighbor (last) became a neighbor
            of the local router."
EDESC
#
#
#
#
MIB: LANGTAG-TC-MIB (file:./rfc5131-langtag-tc.mib) converted on Fri Mar 18 22:02:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPMCAST-MIB (file:./rfc5132-ipmcast.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PIM-BSR-MIB (file:./rfc5240-pim-bsr.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pimBsrElectedBSRLostElection .1.3.6.1.2.1.172.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A pimBsrElectedBSRLostElection notification should be $*
SDESC
A pimBsrElectedBSRLostElection notification should be
generated when current E-BSR lost election to a new
Candidate-BSR.  Only an E-BSR should generate this
notification.
This notification is generated when
pimBsrCandidateBSRElectedBSR becomes FALSE.
REFERENCE RFC 5059, section 3.1
Variables:
  1: pimBsrElectedBSRAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="The address type of the elected BSR."
  2: pimBsrElectedBSRAddress
     Syntax="OCTETSTR"
     Descr="The (unicast) address of the elected BSR.  The
           InetAddressType is given by the
           pimBsrElectedBSRAddressType object."
  3: pimBsrElectedBSRPriority
     Syntax="UNSIGNED32"
     Descr="The priority value for the elected BSR for this address
           type.  Numerically higher values for this object indicate
           higher priorities."
EDESC
#
#
#
EVENT pimBsrCandidateBSRWinElection .1.3.6.1.2.1.172.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A pimBsrCandidateBSRWinElection notification should be $*
SDESC
A pimBsrCandidateBSRWinElection notification should be
generated when a C-BSR wins BSR Election.  Only an
E-BSR should generate this notification.
This notification is generated when
pimBsrCandidateBSRElectedBSR becomes TRUE.
REFERENCE RFC 5059, section 3.1
Variables:
  1: pimBsrCandidateBSRElectedBSR
     Syntax="INTEGER"
       1: true
       2: false
     Descr="Whether the local router is the elected BSR for this
           zone."
EDESC
#
#
#
#
MIB: SYSLOG-TC-MIB (file:./rfc5427-syslog-tc.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MGMD-STD-MIB (file:./rfc5519-mgmd-std.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-TC-STD-MIB (file:./rfc5542-pw-tc-std.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-PWE3-MIB (file:./rfc5601-iana-pwe3.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-STD-MIB (file:./rfc5601-pw-std.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pwDown .1.3.6.1.2.1.10.246.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the pwOperStatus $*
SDESC
This notification is generated when the pwOperStatus
object for one or more contiguous entries in the pwTable are
about to enter the down(2) or lowerLayerDown(6) state from
any other state, except for transition from the
notPresent(5) state.  For the purpose of deciding when
these notifications occur, the lowerLayerDown(6) state
and the down(2) state are considered to be equivalent;
i.e., there is no notification on transition from
lowerLayerDown(6) into down(2), and there is a trap on
transition from any other state except down(2) (and
notPresent) into lowerLayerDown(6).
The included values of pwOperStatus MUST each be equal to
down(2) or lowerLayerDown(6).  The two instances of
pwOperStatus in this notification indicate the range of
indexes that are affected.  Note that all the indexes of
the two ends of the range can be derived from the
instance identifiers of these two objects.  For cases
where a contiguous range of cross-connects have
transitioned into the down(2) and lowerLayerDown(6) states
at roughly the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in an
effort to minimize the emission of a large number of
notifications.  If a notification has to be issued for
just a single cross-connect entry, then the instance
identifier (and values) of the two pwOperStatus objects
MUST be identical.
Variables:
  1: pwOperStatus
     Syntax=""
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
  2: pwOperStatus
     Syntax=""
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
EDESC
#
#
#
EVENT pwUp .1.3.6.1.2.1.10.246.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the pwOperStatus $*
SDESC
This notification is generated when the pwOperStatus
object for one or more contiguous entries in the pwTable are
about to enter the up(1) state from some other state
except the notPresent(5) state and given that the pwDown
notification been issued for these entries.  The included
values of pwOperStatus MUST both be set equal to this
new state (i.e., up(1)).  The two instances of pwOperStatus
in this notification indicate the range of indexes that
are affected.  Note that all the indexes of the two ends
of the range can be derived from the instance identifiers
of these two objects.  For cases where a contiguous range
of cross-connects have transitioned into the up(1) state
at roughly the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in an
effort to minimize the emission of a large number of
notifications.  If a notification has to be issued for
just a single cross-connect entry, then the instance
identifier (and values) of the two pwOperStatus objects
MUST be identical.
Variables:
  1: pwOperStatus
     Syntax=""
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
  2: pwOperStatus
     Syntax=""
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
EDESC
#
#
#
EVENT pwDeleted .1.3.6.1.2.1.10.246.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the PW has been $*
SDESC
This notification is generated when the PW has been
deleted, i.e., when the pwRowStatus has been set to
destroy(6) or the PW has been deleted by a non-MIB
application or due to an auto-discovery process.

Variables:
  1: pwType
     Syntax=""
     Descr="This value indicates the emulated service to be carried over
         this PW.
        "
  2: pwID
     Syntax=""
     Descr="Pseudowire identifier.

         If the pwOwner object is 'pwIdFecSignaling' or
         'l2tpControlProtocol', then this object is signaled in the
         outgoing PW ID field within the 'Virtual Circuit FEC
         Element'.  For other values of pwOwner, this object is not
         signaled and it MAY be set to zero.

         For implementations that support the pwIndexMappingTable,
         a non-zero value is RECOMMENDED, even if this
         identifier is not signaled.  This is so that reverse
         mappings can be provided by pwIndexMappingTable and
         pwPeerMappingTable.  It is therefore RECOMMENDED that the
         value of this pwID be unique (or if pwPeerAddrType is not
         'unknown', at least [pwType, pwID, pwPeerAddrType, pwPeerAddr]
         is unique.)"
  3: pwPeerAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Denotes the address type of the peer node.  It should be
          set to 'unknown' if PE/PW maintenance protocol is not used
          and the address is unknown."
  4: pwPeerAddr
     Syntax="OCTETSTR"
     Descr="This object contains the value of the peer node address
          of the PW/PE maintenance protocol entity.  This object
          SHOULD contain a value of all zeroes if not applicable
          (pwPeerAddrType is 'unknown')."
EDESC
#
#
#
#
MIB: PW-MPLS-STD-MIB (file:./rfc5602-pw-mpls-std.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-ENET-STD-MIB (file:./rfc5603-pw-enet-std.mib) converted on Fri Mar 18 22:02:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPFV3-MIB (file:./rfc5643-ospfv3.mib) converted on Fri Mar 18 22:02:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ospfv3VirtIfStateChange .1.3.6.1.2.1.191.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtIfStateChange notification signifies that $*
SDESC
An ospfv3VirtIfStateChange notification signifies that
there has been a change in the state of an OSPFv3 virtual
interface.
This notification should be generated when the interface
state regresses (e.g., goes from Point-to-Point to Down)
or progresses to a terminal state (i.e., Point-to-Point).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
EDESC
#
#
#
EVENT ospfv3NbrStateChange .1.3.6.1.2.1.191.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3NbrStateChange notification signifies that $*
SDESC
An ospfv3NbrStateChange notification signifies that
there has been a change in the state of a
non-virtual OSPFv3 neighbor.  This notification should be
generated when the neighbor state regresses
(e.g., goes from Attempt or Full to 1-Way or
Down) or progresses to a terminal state (e.g.,
2-Way or Full).  When a neighbor transitions
from or to Full on non-broadcast multi-access
and broadcast networks, the notification should be
generated by the Designated Router.  A Designated
Router transitioning to Down will be noted by
ospfIfStateChange.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3NbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the relationship with this
        neighbor."
EDESC
#
#
#
EVENT ospfv3VirtNbrStateChange .1.3.6.1.2.1.191.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtNbrStateChange notification signifies $*
SDESC
An ospfv3VirtNbrStateChange notification signifies
that there has been a change in the state of an OSPFv3
virtual neighbor.  This notification should be generated
when the neighbor state regresses (e.g., goes
from Attempt or Full to 1-Way or Down) or
progresses to a terminal state (e.g., Full).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the virtual neighbor relationship."
EDESC
#
#
#
EVENT ospfv3IfConfigError .1.3.6.1.2.1.191.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3IfConfigError notification signifies that a $*
SDESC
An ospfv3IfConfigError notification signifies that a
packet has been received on a non-virtual
interface from a router whose configuration
parameters conflict with this router's
configuration parameters.  Note that the event
optionMismatch should cause a notification only if it
prevents an adjacency from forming.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
  3: ospfv3PacketSrc
     Syntax="OCTETSTR"
     Descr="The IPv6 address of an inbound packet that cannot
    be identified by a neighbor instance.

    Only IPv6 addresses without zone index are expected."
  4: ospfv3ConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: helloIntervalMismatch
       6: deadIntervalMismatch
       7: optionMismatch
       8: mtuMismatch
       9: duplicateRouterId
     Descr="Potential types of configuration conflicts.
    Used by the ospfv3ConfigError and
    ospfv3ConfigVirtError notifications."
  5: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3VirtIfConfigError .1.3.6.1.2.1.191.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtIfConfigError notification signifies that a $*
SDESC
An ospfv3VirtIfConfigError notification signifies that a
packet has been received on a virtual interface
from a router whose configuration parameters
conflict with this router's configuration
parameters.  Note that the event optionMismatch
should cause a notification only if it prevents an
adjacency from forming.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
  3: ospfv3ConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: helloIntervalMismatch
       6: deadIntervalMismatch
       7: optionMismatch
       8: mtuMismatch
       9: duplicateRouterId
     Descr="Potential types of configuration conflicts.
    Used by the ospfv3ConfigError and
    ospfv3ConfigVirtError notifications."
  4: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3IfRxBadPacket .1.3.6.1.2.1.191.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3IfRxBadPacket notification signifies that an $*
SDESC
An ospfv3IfRxBadPacket notification signifies that an
OSPFv3 packet that cannot be parsed has been received on a
non-virtual interface.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
  3: ospfv3PacketSrc
     Syntax="OCTETSTR"
     Descr="The IPv6 address of an inbound packet that cannot
    be identified by a neighbor instance.

    Only IPv6 addresses without zone index are expected."
  4: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3VirtIfRxBadPacket .1.3.6.1.2.1.191.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtIfRxBadPacket notification signifies $*
SDESC
An ospfv3VirtIfRxBadPacket notification signifies
that an OSPFv3 packet that cannot be parsed has been
received on a virtual interface.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
  3: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3LsdbOverflow .1.3.6.1.2.1.191.0.8 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3LsdbOverflow notification signifies that the $*
SDESC
An ospfv3LsdbOverflow notification signifies that the
number of LSAs in the router's link state
database has exceeded ospfv3ExtAreaLsdbLimit.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3ExtAreaLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
        AS-external-LSA entries that can be stored in the
        link state database.  If the value is -1, then
        there is no limit.

        When the number of non-default AS-external-LSAs
        in a router's link state database reaches
        ospfv3ExtAreaLsdbLimit, the router enters Overflow
        state.  The router never holds more than
        ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs
        in its database.  ospfv3ExtAreaLsdbLimit MUST be set
        identically in all routers attached to the OSPFv3
        backbone and/or any regular OSPFv3 area (i.e.,
        OSPFv3 stub areas and not-so-stubby-areas (NSSAs)
        are excluded).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
EDESC
#
#
#
EVENT ospfv3LsdbApproachingOverflow .1.3.6.1.2.1.191.0.9 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3LsdbApproachingOverflow notification signifies $*
SDESC
An ospfv3LsdbApproachingOverflow notification signifies
that the number of LSAs in the router's
link state database has exceeded ninety percent of
ospfv3ExtAreaLsdbLimit.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3ExtAreaLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
        AS-external-LSA entries that can be stored in the
        link state database.  If the value is -1, then
        there is no limit.

        When the number of non-default AS-external-LSAs
        in a router's link state database reaches
        ospfv3ExtAreaLsdbLimit, the router enters Overflow
        state.  The router never holds more than
        ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs
        in its database.  ospfv3ExtAreaLsdbLimit MUST be set
        identically in all routers attached to the OSPFv3
        backbone and/or any regular OSPFv3 area (i.e.,
        OSPFv3 stub areas and not-so-stubby-areas (NSSAs)
        are excluded).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
EDESC
#
#
#
EVENT ospfv3IfStateChange .1.3.6.1.2.1.191.0.10 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3IfStateChange notification signifies that there $*
SDESC
An ospfv3IfStateChange notification signifies that there
has been a change in the state of a non-virtual
OSPFv3 interface.  This notification should be generated
when the interface state regresses (e.g., goes
from DR to Down) or progresses to a terminal
state (i.e., Point-to-Point, DR Other, DR, or
Backup).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
EDESC
#
#
#
EVENT ospfv3NssaTranslatorStatusChange .1.3.6.1.2.1.191.0.11 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3NssaTranslatorStatusChange notification $*
SDESC
An ospfv3NssaTranslatorStatusChange notification
indicates that there has been a change in the router's
ability to translate OSPFv3 NSSA LSAs into OSPFv3 External
LSAs.  This notification should be generated when the
Translator Status transitions from or to any defined
status on a per-area basis.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3AreaNssaTranslatorState
     Syntax="INTEGER"
       1: enabled
       2: elected
       3: disabled
     Descr="Indicates if and how an NSSA border router is
         performing NSSA translation of NSSA-LSAs into
         AS-External-LSAs.  When this object is set to
         'enabled', the NSSA border router's
         ospfv3AreaNssaTranslatorRole has been set to 'always'.
         When this object is set to 'elected', a candidate
         NSSA border router is translating NSSA-LSAs into
         AS-External-LSAs.  When this object is set to
         'disabled', a candidate NSSA Border router is NOT
         translating NSSA-LSAs into AS-External-LSAs."
EDESC
#
#
#
EVENT ospfv3RestartStatusChange .1.3.6.1.2.1.191.0.12 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3RestartStatusChange notification signifies that $*
SDESC
An ospfv3RestartStatusChange notification signifies that
there has been a change in the graceful restart
state for the router.  This notification should be
generated when the router restart status
changes.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3RestartStatus
     Syntax="INTEGER"
       1: notRestarting
       2: plannedRestart
       3: unplannedRestart
     Descr="The current status of OSPF graceful restart capability."
  3: ospfv3RestartInterval
     Syntax="UNSIGNED32"
     Descr="Configured OSPF graceful restart timeout interval.

       This object is persistent, and when written, the
       entity SHOULD save the change to non-volatile
       storage."
  4: ospfv3RestartExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at a
      graceful restart.

      none:        no restart has yet been attempted.
      inProgress:      a restart attempt is currently underway.
      completed:       the last restart completed successfully.
      timedOut:    the last restart timed out.
      topologyChanged: the last restart was aborted due to
               a topology change."
EDESC
#
#
#
EVENT ospfv3NbrRestartHelperStatusChange .1.3.6.1.2.1.191.0.13 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3NbrRestartHelperStatusChange notification $*
SDESC
An ospfv3NbrRestartHelperStatusChange notification
signifies that there has been a change in the
graceful restart helper state for the neighbor.
This notification should be generated when the
neighbor restart helper status transitions for a neighbor.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3NbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
      as a graceful restart helper for the neighbor."
  3: ospfv3NbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
      interval, if the router is acting as a restart
      helper for the neighbor."
  4: ospfv3NbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
      as a graceful restart helper for the neighbor.

      none:        no restart has yet been attempted.
      inProgress:      a restart attempt is currently underway.
      completed:       the last restart completed successfully.
      timedOut:    the last restart timed out.
      topologyChanged: the last restart was aborted due to
               a topology change."
EDESC
#
#
#
EVENT ospfv3VirtNbrRestartHelperStatusChange .1.3.6.1.2.1.191.0.14 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtNbrRestartHelperStatusChange $*
SDESC
An ospfv3VirtNbrRestartHelperStatusChange
notification signifies that there has been a
change in the graceful restart helper state for
the virtual neighbor.  This notification should be
generated when the virtual neighbor restart helper status
transitions for a virtual neighbor.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
       as a graceful restart helper for the neighbor."
  3: ospfv3VirtNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in the current OSPF graceful restart
       interval, if the router is acting as a restart
       helper for the neighbor."
  4: ospfv3VirtNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
       as a graceful restart helper for the neighbor.

       none:        no restart has yet been attempted.
       inProgress:      a restart attempt is currently underway.
       completed:       the last restart completed successfully.
       timedOut:    the last restart timed out.
       topologyChanged: the last restart was aborted due to
                a topology change."
EDESC
#
#
#
#
MIB: SYSLOG-MSG-MIB (file:./rfc5676-syslog-msg.mib) converted on Fri Mar 18 22:02:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT syslogMsgNotification .1.3.6.1.2.1.192.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The syslogMsgNotification is generated when a new SYSLOG $*
SDESC
The syslogMsgNotification is generated when a new SYSLOG
message is received and the value of
syslogMsgGenerateNotifications is true.
Implementations may add syslogMsgSDParamValue objects as long
as the resulting notification fits into the size constraints
imposed by the implementation environment and the notification
message size constraints imposed by maxMessageSize [RFC3412]
and SNMP transport mappings.
Variables:
  1: syslogMsgFacility
     Syntax=""
     Descr="The facility of the SYSLOG message."
  2: syslogMsgSeverity
     Syntax=""
     Descr="The severity of the SYSLOG message"
  3: syslogMsgVersion
     Syntax="UNSIGNED32"
     Descr="The version of the SYSLOG message.  A value of 0 indicates
        that the version is unknown."
  4: syslogMsgTimeStamp
     Syntax="OCTETSTR"
     Descr="The timestamp of the SYSLOG message.  A zero-length
        string is returned if the timestamp is unknown."
  5: syslogMsgHostName
     Syntax="OCTETSTR"
     Descr="The hostname and the (optional) domain name of the SYSLOG
        message.  A zero-length string indicates an unknown hostname.
        The SYSLOG protocol specification constrains this string to
        printable US-ASCII code points."
  6: syslogMsgAppName
     Syntax="OCTETSTR"
     Descr="The app-name of the SYSLOG message.  A zero-length string
        indicates an unknown app-name.  The SYSLOG protocol
        specification constrains this string to printable US-ASCII
        code points."
  7: syslogMsgProcID
     Syntax="OCTETSTR"
     Descr="The procid of the SYSLOG message.  A zero-length string
        indicates an unknown procid.  The SYSLOG protocol
        specification constrains this string to printable
        US-ASCII code points."
  8: syslogMsgMsgID
     Syntax="OCTETSTR"
     Descr="The msgid of the SYSLOG message.  A zero-length string
        indicates an unknown msgid.  The SYSLOG protocol specification
        constrains this string to printable US-ASCII code points."
  9: syslogMsgSDParams
     Syntax="UNSIGNED32"
     Descr="The total number of structured data element parameters
        carried in the SYSLOG message.  This number effectively
        indicates the number of entries in the syslogMsgSDTable.
        It can be used, for example, by a notification receiver
        to determine whether a notification carried all
        structured data element parameters of a SYSLOG message."
 10: syslogMsgMsg
     Syntax="OCTETSTR"
     Descr="The message part of the SYSLOG message.  The syntax does not
        impose a size restriction.  Implementations of this MIB module
        may truncate the message part of the SYSLOG message such that
        it fits into the size constraints imposed by the implementation
        environment.  Such truncations can also happen elsewhere in the
        SYSLOG forwarding chain.

        If the first octets contain the value 'EFBBBF'h, then the rest
        of the message is a UTF-8 string.  Since SYSLOG messages may be
        truncated at arbitrary octet boundaries during forwarding, the
        message may contain invalid UTF-8 encodings at the end."
EDESC
#
#
#
#
MIB: CAPWAP-BASE-MIB (file:./rfc5833-capwap-base.mib) converted on Fri Mar 18 22:02:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT capwapBaseChannelUp .1.3.6.1.2.1.196.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent by the AC when a CAPWAP channel $*
SDESC
This notification is sent by the AC when a CAPWAP channel
is established.
The notification is separated for data or control channel.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfAuthenMethod
     Syntax="INTEGER"
       1: other
       2: clear
       3: x509
       4: psk
     Descr="Represents the authentication method for the CAPWAP Channel."
EDESC
#
#
#
EVENT capwapBaseChannelDown .1.3.6.1.2.1.196.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent by the AC when a CAPWAP channel $*
SDESC
This notification is sent by the AC when a CAPWAP channel
is down.
The notification is separated for data or control channel.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfChannelDownReason
     Syntax="INTEGER"
       1: timeout
       2: rekeyFailure
       3: acRebootWtp
       4: dtlsError
       5: maxRetransmit
     Descr="Represents the reason the channel is down.
         The following enumerated values are supported:
           timeout(1)       - The keepalive timed out
           rekeyFailure(2)  - Rekey process failed; channel will be
                              broken
           acRebootWtp(3)   - The AC rebooted the WTP
           dtlsError(4)     - DTLS notifications: DTLSAborted,
                              DTLSReassemblyFailure, DTLSPeerDisconnect,
                              or frequent DTLSDecapFailure
           maxRetransmit(5) - The underlying reliable transport's
                              RetransmitCount counter has reached the
                              MaxRetransmit variable"
EDESC
#
#
#
EVENT capwapBaseDecryptErrorReport .1.3.6.1.2.1.196.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP has had a $*
SDESC
This notification is generated when a WTP has had a
decryption error since the last report.
REFERENCE
Section 4.6.17 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfRadioId
     Syntax="UNSIGNED32"
     Descr="Represents the identifier of a PHY radio on a WTP, which is
         only required to be unique on a WTP.
         For example, WTP A and WTP B can use the same value of
         capwapBaseNtfRadioId for their first radio."
  3: capwapBaseNtfStationIdList
     Syntax=""
     Descr="Represents a list of station MAC addresses separated by
         semicolons."
EDESC
#
#
#
EVENT capwapBaseJoinFailure .1.3.6.1.2.1.196.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP fails to join. $*
SDESC
This notification is generated when a WTP fails to join.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfJoinFailureReason
     Syntax="INTEGER"
       1: unspecified
       2: resDepletion
       3: unknownSource
       4: incorrectData
       5: sessionIdInUse
       6: unsupportedHw
       7: unsupportedBinding
     Descr="Represents the reason of join failure.
         The following enumerated values are supported:
           unspecified(1)        - Unspecified failure
           resDepletion(2)       - Resource depletion
           unknownSource(3)      - Unknown source
           incorrectData(4)      - Incorrect data
           sessionIdInUse(5)     - Session ID already in use
           unsupportedHw(6)      - WTP hardware not supported
           unsupportedBinding(7) - Binding not supported"
EDESC
#
#
#
EVENT capwapBaseImageUpgradeFailure .1.3.6.1.2.1.196.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP fails to update $*
SDESC
This notification is generated when a WTP fails to update
the firmware image.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfImageFailureReason
     Syntax="INTEGER"
       1: invalidChecksum
       2: invalidLength
       3: other
       4: inStorage
     Descr="Represents the reason of image failure.
         The following enumerated values are supported:
           invalidChecksum(1) - Invalid checksum
           invalidLength(2)   - Invalid data length
           other(3)           - Other error
           inStorage(4)       - Image already present"
EDESC
#
#
#
EVENT capwapBaseConfigMsgError .1.3.6.1.2.1.196.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP receives message $*
SDESC
This notification is generated when a WTP receives message
elements in the configuration management messages that it
is unable to apply locally.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfConfigMsgErrorType
     Syntax="INTEGER"
       1: unknownElement
       2: unsupportedElement
       3: unknownValue
       4: unsupportedValue
     Descr="Represents the type of configuration message error.
         The following enumerated values are supported:
           unknownElement(1)     - Unknown message element
           unsupportedElement(2) - Unsupported message element
           unknownValue(3)       - Unknown message element value
           unsupportedValue(4)   - Unsupported message element value"
  3: capwapBaseNtfMsgErrorElements
     Syntax="OCTETSTR"
     Descr="Represents the message elements sent by the AC in the
         Configuration Status Response message that caused the error."
EDESC
#
#
#
EVENT capwapBaseRadioOperableStatus .1.3.6.1.2.1.196.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA The notification is generated when a radio's operational state $*
SDESC
The notification is generated when a radio's operational state
has changed.
REFERENCE
Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfRadioId
     Syntax="UNSIGNED32"
     Descr="Represents the identifier of a PHY radio on a WTP, which is
         only required to be unique on a WTP.
         For example, WTP A and WTP B can use the same value of
         capwapBaseNtfRadioId for their first radio."
  3: capwapBaseNtfRadioOperStatusFlag
     Syntax="INTEGER"
       0: operable
       1: inoperable
     Descr="Represents the operation status of a radio.
         The following enumerated values are supported:
           operable(0)   - The radio is operable
           inoperable(1) - The radio is inoperable, and the
                           capwapBaseNtfRadioStatusCause object
                           gives the reason in detail
         Note that the CAPWAP field [RFC5415] modeled by this
         object takes zero as starting value; this MIB object
         follows that rule."
  4: capwapBaseNtfRadioStatusCause
     Syntax="INTEGER"
       0: normal
       1: hwError
       2: swError
       3: adminSet
     Descr="Represents the reason why the radio is out of service.
         The following enumerated values are supported:
           normal(0)   - Normal status
           hwError(1)  - Radio failure
           swError(2)  - Software failure
           adminSet(3) - Administratively set
         Note that the CAPWAP field [RFC5415] modeled by this
         object takes zero as starting value; this MIB object
         follows that rule."
EDESC
#
#
#
EVENT capwapBaseAuthenFailure .1.3.6.1.2.1.196.0.8 "Status Events" Normal
FORMAT ZBXTRAP $aA This is notification of an authentication failure event $*
SDESC
This is notification of an authentication failure event
and provides the reason for it.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfAuthenMethod
     Syntax="INTEGER"
       1: other
       2: clear
       3: x509
       4: psk
     Descr="Represents the authentication method for the CAPWAP Channel."
  4: capwapBaseNtfAuthenFailureReason
     Syntax="INTEGER"
       1: keyMismatch
       2: invalidCert
       3: reassemblyFailure
       4: decapFailure
       5: encapFailure
       6: timeout
       8: unknown
     Descr="Represents the reason for WTP authorization failure.
         The following enumerated values are supported:
           keyMismatch(1)       - WTP's and AC's keys did not match
           invalidCert(2)       - Certification is not valid
           reassemblyFailure(3) - Fragment reassembly failure
           decapFailure(4)      - Decapsulation error
           encapFailure(5)      - Encapsulation error
           timeout(6)           - WaitDTLS timer timeout
           unknown(8)           - Unknown reason"
EDESC
#
#
#
#
MIB: CAPWAP-DOT11-MIB (file:./rfc5834-capwap-dot11.mib) converted on Fri Mar 18 22:02:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-FRR-FACILITY-STD-MIB (file:./rfc6445-mpls-frr-facility-std.mib) converted on Fri Mar 18 22:02:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsFrrFacilityInitialBackupTunnelInvoked .1.3.6.1.2.1.204.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a tunnel running over an $*
SDESC
This notification is generated when a tunnel running over an
interface as specified in the mplsFrrConstraintsTable is
initially protected by the backup tunnel also specified in the
mplsFrrConstraintsTable.  In some implementations, there may
be a difference between when the control plane triggers
this notification and when the hardware is programmed to
utilize the protection path.  Due to the urgency of this
operation, it is acceptable for the control plane to
issue this notification either before or after it programs
the hardware.  In cases where it is the latter approach,
the notification MUST be sent immediately after the
data plane has been altered.
This notification should not be generated for each subsequent
tunnel that is backed up by the FRR feature on this LSR, as
this may result in potential scaling issues with regard to
LSR performance and network load.  Note also that
notifications MUST be generated in accordance with the
mplsFrrNotificationsMaxRate.
Variables:
  1: mplsFrrFacilityDBNumProtectingTunnelOnIf
     Syntax="GAUGE"
     Descr="The number of backup tunnels protecting the
       interface specified by mplsFrrFacilityProtectedIfIndex."
  2: mplsFrrFacilityDBNumProtectedLspOnIf
     Syntax="GAUGE"
     Descr="The number of LSPs currently being protected on
       the interface specified by
       mplsFrrFacilityProtectedIfIndex."
  3: mplsFrrFacilityDBNumProtectedTunnels
     Syntax="GAUGE"
     Descr="The number of tunnels protected on the interface
       specified by mplsFrrFacilityProtectedIfIndex."
  4: mplsFrrFacilityDBProtectingTunnelStatus
     Syntax="INTEGER"
       1: active
       2: ready
       3: partial
     Descr="Specifies the state of the protecting tunnel as
       specified by mplsFrrFacilityProtectingTunnelIndex.

       active  - This tunnel's label has been placed in the
                 LFIB and is ready to be applied to incoming
                 packets.
       ready   - This tunnel's label entry has been created but
                 is not yet in the LFIB.
       partial - This tunnel's label entry has not been fully
                 created."
  5: mplsFrrFacilityDBProtectingTunnelResvBw
     Syntax=""
     Descr="Specifies the amount of bandwidth in units
       of '1,000 bits per second', actually reserved by
       the protecting tunnel for facility backup purposes.
       This value is repeated here from the MPLS-TE-STD-MIB
       module because the tunnel entry will reveal the
       bandwidth reserved by the signaling protocol, which is
       typically 0 for backup tunnels so as to not over-book
       bandwidth.  However, internal reservations are
       typically made on the PLR; thus, this value should be
       revealed here, as it is often different from
       mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB
       module."
EDESC
#
#
#
EVENT mplsFrrFacilityFinalTunnelRestored .1.3.6.1.2.1.204.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the final tunnel that is $*
SDESC
This notification is generated when the final tunnel that is
being protected by a backup tunnel as specified in the
mplsFrrConstraintsTable is restored to normal operation.  This
notification should not be generated for each restored tunnel,
as this may result in potential scaling issues with regard to
LSR performance and network load.  Note also that
notifications MUST be generated in accordance with the
mplsFrrNotificationsMaxRate.
Variables:
  1: mplsFrrFacilityDBNumProtectingTunnelOnIf
     Syntax="GAUGE"
     Descr="The number of backup tunnels protecting the
       interface specified by mplsFrrFacilityProtectedIfIndex."
  2: mplsFrrFacilityDBNumProtectedLspOnIf
     Syntax="GAUGE"
     Descr="The number of LSPs currently being protected on
       the interface specified by
       mplsFrrFacilityProtectedIfIndex."
  3: mplsFrrFacilityDBNumProtectedTunnels
     Syntax="GAUGE"
     Descr="The number of tunnels protected on the interface
       specified by mplsFrrFacilityProtectedIfIndex."
  4: mplsFrrFacilityDBProtectingTunnelStatus
     Syntax="INTEGER"
       1: active
       2: ready
       3: partial
     Descr="Specifies the state of the protecting tunnel as
       specified by mplsFrrFacilityProtectingTunnelIndex.

       active  - This tunnel's label has been placed in the
                 LFIB and is ready to be applied to incoming
                 packets.
       ready   - This tunnel's label entry has been created but
                 is not yet in the LFIB.
       partial - This tunnel's label entry has not been fully
                 created."
  5: mplsFrrFacilityDBProtectingTunnelResvBw
     Syntax=""
     Descr="Specifies the amount of bandwidth in units
       of '1,000 bits per second', actually reserved by
       the protecting tunnel for facility backup purposes.
       This value is repeated here from the MPLS-TE-STD-MIB
       module because the tunnel entry will reveal the
       bandwidth reserved by the signaling protocol, which is
       typically 0 for backup tunnels so as to not over-book
       bandwidth.  However, internal reservations are
       typically made on the PLR; thus, this value should be
       revealed here, as it is often different from
       mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB
       module."
EDESC
#
#
#
#
MIB: MPLS-FRR-GENERAL-STD-MIB (file:./rfc6445-mpls-frr-general-std.mib) converted on Fri Mar 18 22:02:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RBRIDGE-MIB (file:./rfc6850-rbridge.mib) converted on Fri Mar 18 22:02:57 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT rbridgeBaseNewDrb .1.3.6.1.2.1.214.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The rbridgeBaseNewDrb notification indicates that the $*
SDESC
The rbridgeBaseNewDrb notification indicates that the
sending agent has become the new Designated RBridge; the
notification is sent by an RBridge soon after its election
as the new DRB root, e.g., upon expiration of the Topology
Change Timer, immediately subsequent to its election.
EDESC
#
#
#
EVENT rbridgeBaseTopologyChange .1.3.6.1.2.1.214.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The rbridgeBaseTopologyChange notification is sent by an $*
SDESC
The rbridgeBaseTopologyChange notification is sent by an
RBridge when any of its configured ports transition to/from
the VLAN-x designated forwarder.  The notification is not
sent if an rbridgeBaseNewDrb notification is sent for the
same transition.
EDESC
#
#
#
#
MIB: SNMP-USM-HMAC-SHA2-MIB (file:./rfc7860-snmp-usm-hmac-sha2.mib) converted on Fri Mar 18 22:02:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SAVI-MIB (file:./savi.mib) converted on Fri Mar 18 22:02:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SFLOW-MIB (file:./sflow.mib) converted on Fri Mar 18 22:02:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: StationSW-MIB (file:./station-sw.mib) converted on Fri Mar 18 22:02:57 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ucMacChangeTrap .1.3.6.1.4.1.49763.1.2.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Traps of unicaset mac address change. $*
SDESC
Traps of unicaset mac address change.
Variables:
  1: ucMacChange
     Syntax="OCTETSTR"
     Descr="Describe unicaset mac address change.
        The format is as follows:
        port_id<space>macAddress1&macAddress2&...<space>vlan_id1
        <space>macAddress3&macAddress4&...<space>vlan_id2..."
EDESC
#
#
#
EVENT userTrap .1.3.6.1.4.1.49763.1.2.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Traps of user operation. $*
SDESC
Traps of user operation.
Variables:
  1: userIndex
     Syntax="INTEGER32"
     Descr="Index of userTable."
  2: userName
     Syntax="OCTETSTR"
     Descr="Device user name."
  3: userType
     Syntax="INTEGER"
       1: http
       2: https
       3: snmp
       4: telnet
       5: ssh
       6: cli
       7: iec61850
       8: console
     Descr="Device user type."
  4: userStatus
     Syntax="INTEGER"
       1: logIn
       2: logOut
       3: changePassword
       4: loginFail
     Descr="Device user type."
  5: userModified
     Syntax="OCTETSTR"
     Descr="changePassword: Username who's password was modified.
        other operation: None."
  6: userIP
     Syntax="OCTETSTR"
     Descr="Device user IP. If no IP, use 0.0.0.0."
EDESC
#
#
#
EVENT userOperTrap .1.3.6.1.4.1.49763.1.2.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Traps of user operate command. $*
SDESC
Traps of user operate command.
Variables:
  1: userOperIndex
     Syntax="INTEGER32"
     Descr="Index of userOperTable."
  2: userOperName
     Syntax="OCTETSTR"
     Descr="Device user name."
  3: userOperIP
     Syntax="OCTETSTR"
     Descr="Device user IP. If no IP, use 0.0.0.0."
  4: userOperCommand
     Syntax="OCTETSTR"
     Descr="Device user Command."
EDESC
#
#
#
#
MIB: SNMP-USER-BASED-SM-3DES-MIB (file:./draft-reeder-snmpv3-usm-3desede.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: GB15629dot11-WAPI-MIB (file:./gb15629dot11-wapi.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-ADDRESS-FAMILY-NUMBERS-MIB (file:./iana-ana-address-family-numbers.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-RTPROTO-MIB (file:./ianaiprouteprotocol.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE-802DOT17-RPR-MIB (file:./ieee80217-rpr.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-BRIDGE-MIB (file:./ieee8021-bridge.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CFM-MIB (file:./ieee8021-cfm.mib) converted on Fri Mar 18 23:12:53 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot1agCfmFaultAlarm .1.3.111.2.802.1.1.8.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A MEP has a persistent defect condition. A notification $*
SDESC
A MEP has a persistent defect condition. A notification
(fault alarm) is sent to the management entity with the OID
of the MEP that has detected the fault.
Whenever a MEP has a persistent defect,
it may or may not generate a Fault Alarm to warn the system
administrator of the problem, as controlled by the MEP
Fault Notification Generator State Machine and associated
Managed Objects. Only the highest-priority defect, as shown
in Table 20-1, is reported in the Fault Alarm.
If a defect with a higher priority is raised after a Fault
Alarm has been issued, another Fault Alarm is issued.
The management entity receiving the notification can identify
the system from the network source address of the
notification, and can identify the MEP reporting the defect
by the indices in the OID of the dot1agCfmMepHighestPrDefect
variable in the notification:
dot1agCfmMdIndex - Also the index of the MEP's
Maintenance Domain table entry
(dot1agCfmMdTable).
dot1agCfmMaIndex - Also an index (with the MD table index)
of the MEP's Maintenance Association
network table entry
(dot1agCfmMaNetTable), and (with the MD
table index and component ID) of the
MEP's MA component table entry
(dot1agCfmMaCompTable).
dot1agCfmMepIdentifier - MEP Identifier and final index
into the MEP table (dot1agCfmMepTable).

REFERENCE
12.14.7.7
Variables:
  1: dot1agCfmMepHighestPrDefect
     Syntax="INTEGER"
       0: none
       1: defRDICCM
       2: defMACstatus
       3: defRemoteCCM
       4: defErrorCCM
       5: defXconCCM
     Descr="The highest priority defect that has been present since the
        MEPs Fault Notification Generator State Machine was last in
        the FNG_RESET state.
       "
EDESC
#
#
#
#
MIB: IEEE8021-CFM-V2-MIB (file:./ieee8021-cfm-v2.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CN-MIB (file:./ieee8021-cn.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-EVB-MIB (file:./ieee8021-evb.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-SECY-MIB (file:./ieee8021-secy.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-SPB-MIB (file:./ieee8021-spb.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-TC-MIB (file:./ieee8021-tc.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-PAE-MIB (file:./ieee8021x.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021X-PAE-MIB (file:./ieee8021x-pae.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8023-LAG-MIB (file:./ieee8023-lag.mib) converted on Fri Mar 18 23:12:54 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE802dot11-MIB (file:./ieee802dot11.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot11Disassociate .1.2.840.10036.1.6.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The disassociate notification shall be sent when the STA $*
SDESC
The disassociate notification shall be sent when the STA
sends a Disassociation frame. The value of the notification
shall include the MAC address of the MAC to which the Disassociation
frame was sent and the reason for the disassociation.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax=""
  2: dot11DisassociateReason
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Reason Code in a
        Disassociation frame.  If no Disassociation frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11DisassociateStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the Address 1 field of the most
        recently transmitted Disassociation frame.  If no Disassociation frame has
        been transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
EVENT dot11Deauthenticate .1.2.840.10036.1.6.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The deauthenticate notification shall be sent when the STA sends a $*
SDESC
The deauthenticate notification shall be sent when the STA sends a
Deauthentication frame. The value of the notification shall include
the MAC address of the MAC to which the Deauthentication frame was
sent and the reason for the deauthentication.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax=""
  2: dot11DeauthenticateReason
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Reason Code in a
        Deauthentication frame.  If no Deauthentication frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11DeauthenticateStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the Address 1 field of the most
        recently transmitted Deauthentication frame.  If no Deauthentication
        frame has been transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
EVENT dot11AuthenticateFail .1.2.840.10036.1.6.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA The authenticate failure notification shall be sent when the STA $*
SDESC
The authenticate failure notification shall be sent when the STA
sends an Authentication frame with a status code other than
'successful'. The value of the notification
shall include the MAC address of the MAC to which the Authentication
frame was sent and the reason for the authentication failure.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax=""
  2: dot11AuthenticateFailStatus
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Status Code in a failed
        Authentication frame.  If no failed Authentication frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11AuthenticateFailStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the
        Address 1 field of the most recently transmitted
        failed Authentication frame.  If no failed Authentication frame has been
        transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
#
MIB: IPSEC-IKEACTION-MIB (file:./ipsec-ikeaction.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPSEC-IPSECACTION-MIB (file:./ipsec-ipsecaction.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-EVB-EXTENSIONS-MIB (file:./lldp-ext-dot1-evb-extensions.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-MIB (file:./lldp-ext-dot1.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-V2-MIB (file:./lldp-ext-dot1-v2.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT3-MIB (file:./lldp-ext-dot3.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT3-V2-MIB (file:./lldp-ext-dot3-v2.mib) converted on Fri Mar 18 23:12:55 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-MED-MIB (file:./lldp-ext-med.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpXMedTopologyChangeDetected .1.0.8802.1.1.2.1.5.4795.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification generated by the local device sensing $*
SDESC
A notification generated by the local device sensing
a change in the topology that indicates that a new remote
device attached to a local port, or a remote device disconnected
or moved from one port to another.
Variables:
  1: lldpRemChassisIdSubtype
     Syntax="INTEGER"
       1: chassisComponent
       2: interfaceAlias
       3: portComponent
       4: macAddress
       5: networkAddress
       6: interfaceName
       7: local
     Descr="The type of encoding used to identify the chassis associated
            with the remote system."
  2: lldpRemChassisId
     Syntax="OCTETSTR"
     Descr="The string value used to identify the chassis component
            associated with the remote system."
  3: lldpXMedRemDeviceClass
     Syntax="INTEGER"
       0: notDefined
       1: endpointClass1
       2: endpointClass2
       3: endpointClass3
       4: networkConnectivity
     Descr="Device Class as advertised by the device remotely connected to the
             port."
EDESC
#
#
#
#
MIB: LLDP-MIB (file:./lldp.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpRemTablesChange .1.0.8802.1.1.2.0.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A lldpRemTablesChange notification is sent when the value $*
SDESC
A lldpRemTablesChange notification is sent when the value
of lldpStatsRemTableLastChangeTime changes.  It can be
utilized by an NMS to trigger LLDP remote systems table
maintenance polls.
Note that transmission of lldpRemTablesChange
notifications are throttled by the agent, as specified by the
'lldpNotificationInterval' object.
Variables:
  1: lldpStatsRemTablesInserts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been inserted into tables
            contained in lldpRemoteSystemsData and lldpExtensions objects.

            The complete set of information received from a particular
            MSAP should be inserted into related tables.  If partial
            information cannot be inserted for a reason such as lack
            of resources, all of the complete set of information should
            be removed.

            This counter should be incremented only once after the
            complete set of information is successfully recorded
            in all related tables.  Any failures during inserting
            information set which result in deletion of previously
            inserted information should not trigger any changes in
            lldpStatsRemTablesInserts since the insert is not completed
            yet or or in lldpStatsRemTablesDeletes, since the deletion
            would only be a partial deletion. If the failure was the
            result of lack of resources, the lldpStatsRemTablesDrops
            counter should be incremented once."
  2: lldpStatsRemTablesDeletes
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from
            tables contained in lldpRemoteSystemsData and lldpExtensions
            objects.

            This counter should be incremented only once when the
            complete set of information is completely deleted from all
            related tables.  Partial deletions, such as deletion of
            rows associated with a particular MSAP from some tables,
            but not from all tables are not allowed, thus should not
            change the value of this counter."
  3: lldpStatsRemTablesDrops
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP could not be entered into
            tables contained in lldpRemoteSystemsData and lldpExtensions
            objects because of insufficient resources."
  4: lldpStatsRemTablesAgeouts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from tables
            contained in lldpRemoteSystemsData and lldpExtensions objects
            because the information timeliness interval has expired.

            This counter should be incremented only once when the complete
            set of information is completely invalidated (aged out)
            from all related tables.  Partial aging, similar to deletion
            case, is not allowed, and thus, should not change the value
            of this counter."
EDESC
#
#
#
#
MIB: LLDP-V2-MIB (file:./lldp-v2.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpV2RemTablesChange .1.3.111.2.802.1.1.13.0.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A lldpV2RemTablesChange notification is sent when the value $*
SDESC
A lldpV2RemTablesChange notification is sent when the value
of lldpV2StatsRemTablesLastChangeTime changes. It can be
utilized by an NMS to trigger LLDP remote systems table
maintenance polls.
Note that transmission of lldpV2RemTablesChange
notifications are throttled by the agent, as specified by the
'lldpV2NotificationInterval' object.
Variables:
  1: lldpV2StatsRemTablesInserts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been inserted into tables
            contained in lldpV2RemoteSystemsData and lldpV2Extensions objects.

            The complete set of information received from a particular
            MSAP should be inserted into related tables. If partial
            information cannot be inserted for a reason such as lack
            of resources, all of the complete set of information should
            be removed.

            This counter should be incremented only once after the
            complete set of information is successfully recorded
            in all related tables. Any failures during inserting
            information set which result in deletion of previously
            inserted information should not trigger any changes in
            lldpV2StatsRemTablesInserts since the insert is not completed
            yet or in lldpStatsRemTablesDeletes, since the deletion
            would only be a partial deletion. If the failure was the
            result of lack of resources, the lldpStatsRemTablesDrops
            counter should be incremented once."
  2: lldpV2StatsRemTablesDeletes
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from
            tables contained in lldpV2RemoteSystemsData and lldpV2Extensions
            objects.

            This counter should be incremented only once when the
            complete set of information is completely deleted from all
            related tables. Partial deletions, such as deletion of
            rows associated with a particular MSAP from some tables,
            but not from all tables are not allowed, thus should not
            change the value of this counter."
  3: lldpV2StatsRemTablesDrops
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP could not be entered into
            tables contained in lldpV2RemoteSystemsData and lldpV2Extensions
            objects because of insufficient resources."
  4: lldpV2StatsRemTablesAgeouts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from tables
            contained in lldpV2RemoteSystemsData and lldpV2Extensions objects
            because the information timeliness interval has expired.

            This counter should be incremented only once when the complete
            set of information is completely invalidated (aged out)
            from all related tables. Partial ageing, similar to deletion
            case, is not allowed, and thus, should not change the value
            of this counter."
EDESC
#
#
#
#
MIB: LLDP-V2-TC-MIB (file:./lldp-v2-tc.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1213-MIB (file:./rfc1213.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1229-MIB (file:./rfc1229.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1271-MIB (file:./rfc1271.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1315-MIB (file:./rfc1315-fr.mib) converted on Fri Mar 18 23:12:56 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1381-MIB (file:./rfc1381-lapb.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1382-MIB (file:./rfc1382-x25.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PPP-LCP-MIB (file:./rfc1471-ppp-lcp.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PPP-IP-NCP-MIB (file:./rfc1473-ppp-ip.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: BRIDGE-MIB (file:./rfc1493-bridge.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TOKEN-RING-RMON-MIB (file:./rfc1513-token-ring-rmon.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANAifType-MIB (file:./rfc1573a-IANAifType.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RIPv2-MIB (file:./rfc1724-rip.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNA-SDLC-MIB (file:./rfc1747-sna-sdlc.mib) converted on Fri Mar 18 23:12:57 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DLSW-MIB (file:./rfc2024-dlsw.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dlswTrapTConnPartnerReject .1.3.6.1.2.1.46.1.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
is rejected by a partner DLSw during Capabilities
Exchanges.  The emission of this trap is controlled
by dlswTrapCntlTConnPartnerReject.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnProtViolation .1.3.6.1.2.1.46.1.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a protocol violation is $*
SDESC
This trap is sent each time a protocol violation is
detected for a transport connection.  The emission of this
trap is controlled by dlswTrapCntlTConnProtViolation.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnUp .1.3.6.1.2.1.46.1.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
enters 'connected' state.  The emission of this trap
is controlled by dlswTrapCntlTConn.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnDown .1.3.6.1.2.1.46.1.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
enters 'disconnected' state.  The emission of this trap
is controlled by dlswTrapCntlTConn.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapCircuitUp .1.3.6.1.2.1.46.1.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a circuit enters 'connected' $*
SDESC
This trap is sent each time a circuit enters 'connected'
state.  The emission of this trap is controlled by
dlswTrapCntlCircuit.
Variables:
  1: dlswCircuitS1Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 1 (S1) used for this circuit."
  2: dlswCircuitS1Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 1 (S1) used for this circuit."
  3: dlswCircuitS2Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 2 (S2) used for this circuit."
  4: dlswCircuitS2Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 2 (S2) used for this circuit."
EDESC
#
#
#
EVENT dlswTrapCircuitDown .1.3.6.1.2.1.46.1.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent each time a circuit enters 'disconnected' $*
SDESC
This trap is sent each time a circuit enters 'disconnected'
state.  The emission of this trap is controlled by
dlswTrapCntlCircuit.
Variables:
  1: dlswCircuitS1Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 1 (S1) used for this circuit."
  2: dlswCircuitS1Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 1 (S1) used for this circuit."
  3: dlswCircuitS2Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 2 (S2) used for this circuit."
  4: dlswCircuitS2Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 2 (S2) used for this circuit."
EDESC
#
#
#
#
MIB: FRAME-RELAY-DTE-MIB (file:./rfc2115-frame-relay-dte.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT frDLCIStatusChange .1.3.6.1.2.1.10.32.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap indicates that the indicated Virtual Circuit $*
SDESC
This trap indicates that the indicated Virtual Circuit
has changed state.  It has either been created or
invalidated, or has toggled between the active and
inactive states.  If, however, the reason for the state
change is due to the DLCMI going down, per-DLCI traps
should not be generated.
Variables:
  1: frCircuitState
     Syntax="INTEGER"
       1: invalid
       2: active
       3: inactive
     Descr="Indicates whether the particular virtual circuit is
       operational.  In the absence of a Data Link Connection
       Management Interface, virtual circuit entries (rows)
       may be created by setting virtual circuit state to
       'active', or deleted by changing Circuit state to
       'invalid'.
       Whether or not the row actually disappears is left to
       the implementation, so this object may actually read as
       'invalid' for some arbitrary length of time.  It is
       also legal to set the state of a virtual circuit to
       'inactive' to temporarily disable a given circuit.
       The use of 'invalid' is deprecated in this SNMP Version
       2 MIB, in favor of frCircuitRowStatus."
EDESC
#
#
#
#
MIB: ISDN-MIB (file:./rfc2127-isdn.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT isdnMibCallInformation .1.3.6.1.2.1.10.20.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap/inform is sent to the manager under the $*
SDESC
This trap/inform is sent to the manager under the
following condidions:
- on incoming calls for each call which is rejected for
policy reasons (e.g. unknown neighbor or access
violation)
- on outgoing calls whenever a call attempt is determined
to have ultimately failed. In the event that call retry
is active, then this will be after all retry attempts
have failed.
- whenever a call connects. In this case, the object
isdnBearerCallConnectTime should be included in the
trap.
Only one such trap is sent in between successful or
unsuccessful call attempts from or to a single neighbor;
subsequent call attempts result in no trap.
If the Dial Control MIB objects dialCtlNbrCfgId and
dialCtlNbrCfgIndex are known by the entity generating
this trap, both objects should be included in the trap
as well. The receipt of this trap with no dial neighbor
information indicates that the manager must poll the
callHistoryTable of the Dial Control MIB to see what
changed.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: isdnBearerOperStatus
     Syntax="INTEGER"
       1: idle
       2: connecting
       3: connected
       4: active
     Descr="The current call control state for this port.
             idle(1):       The B channel is idle.
                            No call or call attempt is going on.
             connecting(2): A connection attempt (outgoing call)
                            is being made on this interface.
             connected(3):  An incoming call is in the process
                            of validation.
             active(4):     A call is active on this interface."
  3: isdnBearerPeerAddress
     Syntax="OCTETSTR"
     Descr="The ISDN address the current or last call is or was
             connected to.

             In some cases, the format of this information can not
             be predicted, since it largely depends on the type
             of switch or PBX the device is connected to. Therefore,
             the detailed format of this information is not
             specified and is implementation dependent.

             If possible, the agent should supply this information
             using the E.164 format. In this case, the number must
             start with '+'. Otherwise, IA5 number digits must be used.

             If the peer ISDN address is not available,
             this object has a length of zero."
  4: isdnBearerPeerSubAddress
     Syntax="OCTETSTR"
     Descr="The ISDN subaddress the current or last call is or was
             connected to.

             The subaddress is an user supplied string of up to 20
             IA5 characters and is transmitted transparently through
             the network.

             If the peer subaddress is not available, this object
             has a length of zero."
  5: isdnBearerCallSetupTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the ISDN setup message for
             the current or last call was sent or received. If since
             system startup there has been no call on this interface,
             this object has a value of zero."
  6: isdnBearerInfoType
     Syntax="INTEGER"
       1: unknown
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The Information Transfer Capability for the current
             or last call.

             speech(2) refers to a non-data connection, whereas
             audio31(6) and audio7(7) refer to data mode connections.

             Note that Q.931, chapter 4.5.5, originally defined
             audio7(7) as '7 kHz audio' and now defines it as
             'Unrestricted digital information with tones/
             announcements'.

             If since system startup there has been no call on this
             interface, this object has a value of unknown(1)."
  7: isdnBearerCallOrigin
     Syntax="INTEGER"
       1: unknown
       2: originate
       3: answer
       4: callback
     Descr="The call origin for the current or last call. If since
             system startup there was no call on this interface,
             this object has a value of unknown(1)."
EDESC
#
#
#
#
MIB: DIAL-CONTROL-MIB (file:./rfc2128-dial-control.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dialCtlPeerCallInformation .1.3.6.1.2.1.10.21.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap/inform is sent to the manager whenever $*
SDESC
This trap/inform is sent to the manager whenever
a successful call clears, or a failed call attempt
is determined to have ultimately failed. In the
event that call retry is active, then this is after
all retry attempts have failed. However, only one such
trap is sent in between successful call attempts;
subsequent call attempts result in no trap.
ifOperStatus will return the operational status of the
virtual interface associated with the peer to whom
this call was made to.
Variables:
  1: callHistoryPeerId
     Syntax="INTEGER"
     Descr="This is the Id value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist, the value of this object
         will be zero."
  2: callHistoryPeerIfIndex
     Syntax="INTEGER"
     Descr="This is the ifIndex value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist, the value of this object
         will be zero."
  3: callHistoryLogicalIfIndex
     Syntax="INTEGER32"
     Descr="This is the ifIndex value of the logical interface through
         which this call was made. For ISDN media, this would be
         the ifIndex of the B channel which was used for this call."
  4: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
  5: callHistoryPeerAddress
     Syntax="OCTETSTR"
     Descr="The number this call was connected to. If the number is
         not available, then it will have a length of zero."
  6: callHistoryPeerSubAddress
     Syntax="OCTETSTR"
     Descr="The subaddress this call was connected to. If the subaddress
         is undefined or not available, this will be a zero length
         string."
  7: callHistoryDisconnectCause
     Syntax="OCTETSTR"
     Descr="The encoded network cause value associated with this call.

         The value of this object will depend on the interface type
         as well as on the protocol and protocol version being
         used on this interface. Some references for possible cause
         values are given below."
  8: callHistoryConnectTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the call was connected."
  9: callHistoryDisconnectTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the call was disconnected."
 10: callHistoryInfoType
     Syntax="INTEGER"
       1: other
       10: fax
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The information type for this call."
 11: callHistoryCallOrigin
     Syntax="INTEGER"
       1: originate
       2: answer
       3: callback
     Descr="The call origin."
EDESC
#
#
#
EVENT dialCtlPeerCallSetup .1.3.6.1.2.1.10.21.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap/inform is sent to the manager whenever $*
SDESC
This trap/inform is sent to the manager whenever
a call setup message is received or sent.
ifOperStatus will return the operational status of the
virtual interface associated with the peer to whom
this call was made to.
Variables:
  1: callActivePeerId
     Syntax="INTEGER"
     Descr="This is the Id value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist or is unknown, the value
         of this object will be zero."
  2: callActivePeerIfIndex
     Syntax="INTEGER"
     Descr="This is the ifIndex value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist or is unknown, the value
         of this object will be zero."
  3: callActiveLogicalIfIndex
     Syntax="INTEGER32"
     Descr="This is the ifIndex value of the logical interface through
         which this call was made. For ISDN media, this would be
         the ifIndex of the B channel which was used for this call.
         If the ifIndex value is unknown, the value of this object
         will be zero."
  4: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
  5: callActivePeerAddress
     Syntax="OCTETSTR"
     Descr="The number this call is connected to. If the number is
         not available, then it will have a length of zero."
  6: callActivePeerSubAddress
     Syntax="OCTETSTR"
     Descr="The subaddress this call is connected to. If the subaddress
         is undefined or not available, this will be a zero length
         string."
  7: callActiveInfoType
     Syntax="INTEGER"
       1: other
       10: fax
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The information type for this call."
  8: callActiveCallOrigin
     Syntax="INTEGER"
       1: originate
       2: answer
       3: callback
     Descr="The call origin."
EDESC
#
#
#
#
MIB: INTEGRATED-SERVICES-MIB (file:./rfc2213-integrated-services.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SYSAPPL-MIB (file:./rfc2287-sysappl.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-TCP-MIB (file:./rfc2452-ipv6-tcp.mib) converted on Fri Mar 18 23:12:58 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-UDP-MIB (file:./rfc2454-ipv6-udp.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-MIB (file:./rfc2465-ipv6.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ipv6IfStateChange .1.3.6.1.2.1.55.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An ipv6IfStateChange notification signifies $*
SDESC
An ipv6IfStateChange notification signifies
that there has been a change in the state of
an ipv6 interface.  This notification should
be generated when the interface's operational
status transitions to or from the up(1) state.
Variables:
  1: ipv6IfDescr
     Syntax="OCTETSTR"
     Descr="A textual string containing information about the
               interface.  This string may be set by the network
               management system."
  2: ipv6IfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: noIfIdentifier
       4: unknown
       5: notPresent
     Descr="The current operational state of the interface.
              The noIfIdentifier(3) state indicates that no valid
              Interface Identifier is assigned to the interface.
              This state usually indicates that the link-local
              interface address failed Duplicate Address Detection.
              If ipv6IfAdminStatus is down(2) then ipv6IfOperStatus
              should be down(2).  If ipv6IfAdminStatus is changed
              to up(1) then ipv6IfOperStatus should change to up(1)
              if the interface is ready to transmit and receive
              network traffic; it should remain in the down(2) or
              noIfIdentifier(3) state if and only if there is a
              fault that prevents it from going to the up(1) state;
              it should remain in the notPresent(5) state if
              the interface has missing (typically, lower layer)
              components."
EDESC
#
#
#
#
MIB: IPV6-TC (file:./rfc2465-ipv6-tc.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-ICMP-MIB (file:./rfc2466-ipv6-icmp.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ATM-TC-MIB (file:./rfc2514-atm-tc.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ATM-MIB (file:./rfc2515-atm.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-FRAMEWORK-MIB (file:./rfc2571-snmp-framework.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-MPD-MIB (file:./rfc2572-snmp-mpd.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-TARGET-MIB (file:./rfc2573-snmp-target.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SMON-MIB (file:./rfc2613-smon.mib) converted on Fri Mar 18 23:12:59 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RADIUS-AUTH-CLIENT-MIB (file:./rfc2618-radius-auth-client.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RADIUS-ACC-CLIENT-MIB (file:./rfc2620-radius-acc-client.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ADSL-LINE-MIB (file:./rfc2662-adsl-line.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT adslAtucPerfLofsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Framing 15-minute interval threshold reached. $*
SDESC
Loss of Framing 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLofs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Framing."
  2: adslAtucThresh15MinLofs
     Syntax="INTEGER"
     Descr="The number of Loss of Frame Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLofsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfLossThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Signal 15-minute interval threshold reached. $*
SDESC
Loss of Signal 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLoss
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Signal."
  2: adslAtucThresh15MinLoss
     Syntax="INTEGER"
     Descr="The number of Loss of Signal Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLossThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfLprsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Power 15-minute interval threshold reached. $*
SDESC
Loss of Power 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLprs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Power."
  2: adslAtucThresh15MinLprs
     Syntax="INTEGER"
     Descr="The number of Loss of Power Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLprsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfESsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA Errored Second 15-minute interval threshold reached. $*
SDESC
Errored Second 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinESs
     Syntax="GAUGE"
     Descr="Count of Errored Seconds in the current 15 minute
                 interval.  The errored second parameter is a count of
                 one-second intervals containing one or more crc
                 anomalies, or one or more los or sef defects."
  2: adslAtucThresh15MinESs
     Syntax="INTEGER"
     Descr="The number of Errored Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfESsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucRateChangeTrap .1.3.6.1.2.1.10.94.1.2.1.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA The ATUCs transmit rate has changed (RADSL mode only) $*
SDESC
The ATUCs transmit rate has changed (RADSL mode only)
Variables:
  1: adslAtucChanCurrTxRate
     Syntax="GAUGE"
     Descr="Actual transmit rate on this channel."
  2: adslAtucChanPrevTxRate
     Syntax="GAUGE"
     Descr="The rate at the time of the last
                 adslAtucRateChangeTrap event. It is also set at
                 initialization to prevent a trap being sent.

                 Rate changes less than adslAtucThresh(*)RateDown
                 or less than adslAtucThresh(*)RateUp will not
                 cause a trap or cause this object to change.
                 (*) == Fast or Interleave.
                 See AdslLineAlarmConfProfileEntry."
EDESC
#
#
#
EVENT adslAtucPerfLolsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Link 15-minute interval threshold reached. $*
SDESC
Loss of Link 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLols
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Link."
  2: adslAtucThresh15MinLols
     Syntax="INTEGER"
     Descr="The number of Loss of Link Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLolsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucInitFailureTrap .1.3.6.1.2.1.10.94.1.2.1.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA ATUC initialization failed. See adslAtucCurrStatus $*
SDESC
ATUC initialization failed. See adslAtucCurrStatus
for potential reasons.
Variables:
  1: adslAtucCurrStatus
     Syntax="BITS"
     Descr="Indicates current state of the ATUC line.  This is a
                 bit-map of possible conditions.  The various bit
                 positions are:

          0      noDefect             There no defects on the line

          1      lossOfFraming        ATUC failure due to not
                                      receiving valid frame.

          2      lossOfSignal         ATUC failure due to not
                                      receiving signal.

          3      lossOfPower          ATUC failure due to loss of
                                      power.
                                      Note: the Agent may still
                                      function.

          4      lossOfSignalQuality  Loss of Signal Quality is
                                      declared when the Noise Margin
                                      falls below the Minimum Noise
                                      Margin, or the bit-error-rate
                                      exceeds 10^-7.

          5      lossOfLink           ATUC failure due to inability
                                      to link with ATUR.

          6      dataInitFailure      ATUC failure during
                                      initialization due to bit
                                      errors corrupting startup
                                      exchange data.

          7      configInitFailure    ATUC failure during
                                      initialization due to peer
                                      ATU not able to support
                                      requested configuration

          8      protocolInitFailure  ATUC failure during
                                      initialization due to
                                      incompatible protocol used by
                                      the peer ATU.

          9      noPeerAtuPresent     ATUC failure during
                                      initialization due to no
                                      activation sequence detected
                                      from peer ATU.

                 This is intended to supplement ifOperStatus."
EDESC
#
#
#
EVENT adslAturPerfLofsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Framing 15-minute interval threshold reached. $*
SDESC
Loss of Framing 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLofs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Framing."
  2: adslAturThresh15MinLofs
     Syntax="INTEGER"
     Descr="The number of Loss of Frame Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLofsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfLossThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Signal 15-minute interval threshold reached. $*
SDESC
Loss of Signal 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLoss
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Signal."
  2: adslAturThresh15MinLoss
     Syntax="INTEGER"
     Descr="The number of Loss of Signal Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLossThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfLprsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Loss of Power 15-minute interval threshold reached. $*
SDESC
Loss of Power 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLprs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Power."
  2: adslAturThresh15MinLprs
     Syntax="INTEGER"
     Descr="The number of Loss of Power Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLprsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfESsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA Errored Second 15-minute interval threshold reached. $*
SDESC
Errored Second 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinESs
     Syntax="GAUGE"
     Descr="Count of Errored Seconds in the current 15 minute
                interval.  The errored second parameter is a count of
                one-second intervals containing one or more crc
                anomalies, or one or more los or sef defects."
  2: adslAturThresh15MinESs
     Syntax="INTEGER"
     Descr="The number of Errored Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfESsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturRateChangeTrap .1.3.6.1.2.1.10.94.1.2.2.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA The ATURs transmit rate has changed (RADSL mode only) $*
SDESC
The ATURs transmit rate has changed (RADSL mode only)
Variables:
  1: adslAturChanCurrTxRate
     Syntax="GAUGE"
     Descr="Actual transmit rate on this channel."
  2: adslAturChanPrevTxRate
     Syntax="GAUGE"
     Descr="The rate at the time of the last
                 adslAturRateChangeTrap event. It is also set at
                 initialization to prevent a trap being sent.
                 Rate changes less than adslAturThresh(*)RateDown
                 or less than adslAturThresh(*)RateUp will not
                 cause a trap or cause this object to change.
                 (*) == Fast or Interleave.
                 See AdslLineAlarmConfProfileEntry."
EDESC
#
#
#
#
MIB: ADSL-TC-MIB (file:./rfc2662-adsl-tc.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: VRRP-MIB (file:./rfc2787-vrrp.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT vrrpTrapNewMaster .1.3.6.1.2.1.68.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The newMaster trap indicates that the sending agent $*
SDESC
The newMaster trap indicates that the sending agent
has transitioned to 'Master' state.
Variables:
  1: vrrpOperMasterIpAddr
     Syntax="IPADDR"
     Descr="The master router's real (primary) IP address. This is
         the IP address listed as the source in VRRP advertisement
         last received by this virtual router."
EDESC
#
#
#
EVENT vrrpTrapAuthFailure .1.3.6.1.2.1.68.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A vrrpAuthFailure trap signifies that a packet has $*
SDESC
A vrrpAuthFailure trap signifies that a packet has
been received from a router whose authentication key
or authentication type conflicts with this router's
authentication key or authentication type. Implementation
of this trap is optional.
Variables:
  1: vrrpTrapPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound VRRP packet. Used by
          vrrpTrapAuthFailure trap."
  2: vrrpTrapAuthErrorType
     Syntax="INTEGER"
       1: invalidAuthType
       2: authTypeMismatch
       3: authFailure
     Descr="Potential types of configuration conflicts.
         Used by vrrpAuthFailure trap."
EDESC
#
#
#
#
MIB: NETWORK-SERVICES-MIB (file:./rfc2788.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HOST-RESOURCES-MIB (file:./rfc2790-host-resources.mib) converted on Fri Mar 18 23:13:00 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RMON-MIB (file:./rfc2819-rmon.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT risingAlarm .1.3.6.1.2.1.16.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The SNMP trap that is generated when an alarm $*
SDESC
The SNMP trap that is generated when an alarm
entry crosses its rising threshold and generates
an event that is configured for sending SNMP
traps.
Variables:
  1: alarmIndex
     Syntax="INTEGER32"
     Descr="An index that uniquely identifies an entry in the
         alarm table.  Each such entry defines a
         diagnostic sample at a particular interval
         for an object on the device."
  2: alarmVariable
     Syntax="OBJECTID"
     Descr="The object identifier of the particular variable to be
         sampled.  Only variables that resolve to an ASN.1 primitive
         type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
         Gauge, or TimeTicks) may be sampled.

         Because SNMP access control is articulated entirely
         in terms of the contents of MIB views, no access
         control mechanism exists that can restrict the value of
         this object to identify only those objects that exist
         in a particular MIB view.  Because there is thus no
         acceptable means of restricting the read access that
         could be obtained through the alarm mechanism, the
         probe must only grant write access to this object in
         those views that have read access to all objects on
         the probe.

         During a set operation, if the supplied variable name is
         not available in the selected MIB view, a badValue error
         must be returned.  If at any time the variable name of
         an established alarmEntry is no longer available in the
         selected MIB view, the probe must change the status of
         this alarmEntry to invalid(4).

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  3: alarmSampleType
     Syntax="INTEGER"
       1: absoluteValue
       2: deltaValue
     Descr="The method of sampling the selected variable and
         calculating the value to be compared against the
         thresholds.  If the value of this object is
         absoluteValue(1), the value of the selected variable
         will be compared directly with the thresholds at the
         end of the sampling interval.  If the value of this
         object is deltaValue(2), the value of the selected
         variable at the last sample will be subtracted from
         the current value, and the difference compared with
         the thresholds.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  4: alarmValue
     Syntax="INTEGER32"
     Descr="The value of the statistic during the last sampling
         period.  For example, if the sample type is deltaValue,
         this value will be the difference between the samples
         at the beginning and end of the period.  If the sample
         type is absoluteValue, this value will be the sampled
         value at the end of the period.

         This is the value that is compared with the rising and
         falling thresholds.

         The value during the current sampling period is not
         made available until the period is completed and will
         remain available until the next period completes."
  5: alarmRisingThreshold
     Syntax="INTEGER32"
     Descr="A threshold for the sampled statistic.  When the current
         sampled value is greater than or equal to this threshold,
         and the value at the last sampling interval was less than
         this threshold, a single event will be generated.
         A single event will also be generated if the first
         sample after this entry becomes valid is greater than or
         equal to this threshold and the associated
         alarmStartupAlarm is equal to risingAlarm(1) or
         risingOrFallingAlarm(3).

         After a rising event is generated, another such event
         will not be generated until the sampled value
         falls below this threshold and reaches the
         alarmFallingThreshold.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
EDESC
#
#
#
EVENT fallingAlarm .1.3.6.1.2.1.16.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The SNMP trap that is generated when an alarm $*
SDESC
The SNMP trap that is generated when an alarm
entry crosses its falling threshold and generates
an event that is configured for sending SNMP
traps.
Variables:
  1: alarmIndex
     Syntax="INTEGER32"
     Descr="An index that uniquely identifies an entry in the
         alarm table.  Each such entry defines a
         diagnostic sample at a particular interval
         for an object on the device."
  2: alarmVariable
     Syntax="OBJECTID"
     Descr="The object identifier of the particular variable to be
         sampled.  Only variables that resolve to an ASN.1 primitive
         type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
         Gauge, or TimeTicks) may be sampled.

         Because SNMP access control is articulated entirely
         in terms of the contents of MIB views, no access
         control mechanism exists that can restrict the value of
         this object to identify only those objects that exist
         in a particular MIB view.  Because there is thus no
         acceptable means of restricting the read access that
         could be obtained through the alarm mechanism, the
         probe must only grant write access to this object in
         those views that have read access to all objects on
         the probe.

         During a set operation, if the supplied variable name is
         not available in the selected MIB view, a badValue error
         must be returned.  If at any time the variable name of
         an established alarmEntry is no longer available in the
         selected MIB view, the probe must change the status of
         this alarmEntry to invalid(4).

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  3: alarmSampleType
     Syntax="INTEGER"
       1: absoluteValue
       2: deltaValue
     Descr="The method of sampling the selected variable and
         calculating the value to be compared against the
         thresholds.  If the value of this object is
         absoluteValue(1), the value of the selected variable
         will be compared directly with the thresholds at the
         end of the sampling interval.  If the value of this
         object is deltaValue(2), the value of the selected
         variable at the last sample will be subtracted from
         the current value, and the difference compared with
         the thresholds.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  4: alarmValue
     Syntax="INTEGER32"
     Descr="The value of the statistic during the last sampling
         period.  For example, if the sample type is deltaValue,
         this value will be the difference between the samples
         at the beginning and end of the period.  If the sample
         type is absoluteValue, this value will be the sampled
         value at the end of the period.

         This is the value that is compared with the rising and
         falling thresholds.

         The value during the current sampling period is not
         made available until the period is completed and will
         remain available until the next period completes."
  5: alarmFallingThreshold
     Syntax="INTEGER32"
     Descr="A threshold for the sampled statistic.  When the current
         sampled value is less than or equal to this threshold,
         and the value at the last sampling interval was greater than
         this threshold, a single event will be generated.
         A single event will also be generated if the first
         sample after this entry becomes valid is less than or
         equal to this threshold and the associated
         alarmStartupAlarm is equal to fallingAlarm(2) or
         risingOrFallingAlarm(3).

         After a falling event is generated, another such event
         will not be generated until the sampled value
         rises above this threshold and reaches the
         alarmRisingThreshold.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
EDESC
#
#
#
#
MIB: HCNUM-TC (file:./rfc2856-hcnum-tc.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IF-MIB (file:./rfc2863-if.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT linkDown .1.3.6.1.6.3.1.1.5.3 "Status Events" Normal
FORMAT ZBXTRAP $aA A linkDown trap signifies that the SNMP entity, acting in $*
SDESC
A linkDown trap signifies that the SNMP entity, acting in
an agent role, has detected that the ifOperStatus object for
one of its communication links is about to enter the down
state from some other state (but not from the notPresent
state).  This other state is indicated by the included value
of ifOperStatus.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The testing(3) state
            indicates that no operational packets can be passed.  When a
            managed system initializes, all interfaces start with
            ifAdminStatus in the down(2) state.  As a result of either
            explicit management action or per configuration information
            retained by the managed system, ifAdminStatus is then
            changed to either the up(1) or testing(3) states (or remains
            in the down(2) state)."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
EDESC
#
#
#
EVENT linkUp .1.3.6.1.6.3.1.1.5.4 "Status Events" Normal
FORMAT ZBXTRAP $aA A linkUp trap signifies that the SNMP entity, acting in an $*
SDESC
A linkUp trap signifies that the SNMP entity, acting in an
agent role, has detected that the ifOperStatus object for
one of its communication links left the down state and
transitioned into some other state (but not into the
notPresent state).  This other state is indicated by the
included value of ifOperStatus.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The testing(3) state
            indicates that no operational packets can be passed.  When a
            managed system initializes, all interfaces start with
            ifAdminStatus in the down(2) state.  As a result of either
            explicit management action or per configuration information
            retained by the managed system, ifAdminStatus is then
            changed to either the up(1) or testing(3) states (or remains
            in the down(2) state)."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
EDESC
#
#
#
#
MIB: DISMAN-PING-MIB (file:./rfc2925-disman-ping.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pingProbeFailed .1.3.6.1.2.1.80.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Generated when a probe failure is detected when the $*
SDESC
Generated when a probe failure is detected when the
corresponding pingCtlTrapGeneration object is set to
probeFailure(0) subject to the value of
pingCtlTrapProbeFailureFilter.  The object
pingCtlTrapProbeFailureFilter can be used to specify the
number of successive probe failures that are required
before this notification can be generated.
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
EVENT pingTestFailed .1.3.6.1.2.1.80.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Generated when a ping test is determined to have failed $*
SDESC
Generated when a ping test is determined to have failed
when the corresponding pingCtlTrapGeneration object is
set to testFailure(1).  In this instance
pingCtlTrapTestFailureFilter should specify the number of
probes in a test required to have failed in order to
consider the test as failed.
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
EVENT pingTestCompleted .1.3.6.1.2.1.80.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Generated at the completion of a ping test when the $*
SDESC
Generated at the completion of a ping test when the
corresponding pingCtlTrapGeneration object is set to
testCompletion(4).
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
#
MIB: IGMP-STD-MIB (file:./rfc2933-igmp-std.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DISMAN-EVENT-MIB (file:./rfc2981-disman-event.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mteTriggerFired .1.3.6.1.2.1.88.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that the trigger indicated by the object $*
SDESC
Notification that the trigger indicated by the object
instances has fired, for triggers with mteTriggerType
'boolean' or 'existence'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerRising .1.3.6.1.2.1.88.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that the rising threshold was met for triggers $*
SDESC
Notification that the rising threshold was met for triggers
with mteTriggerType 'threshold'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerFalling .1.3.6.1.2.1.88.2.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that the falling threshold was met for triggers $*
SDESC
Notification that the falling threshold was met for triggers
with mteTriggerType 'threshold'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerFailure .1.3.6.1.2.1.88.2.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that an attempt to check a trigger has failed. $*
SDESC
Notification that an attempt to check a trigger has failed.
The network manager must enable this notification only with
a certain fear and trembling, as it can easily crowd out more
important information.  It should be used only to help diagnose
a problem that has appeared in the error counters and can not
be found otherwise.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteFailedReason
     Syntax="INTEGER"
       -1: localResourceLack
       -2: badDestination
       -3: destinationUnreachable
       -4: noResponse
       -5: badType
       -6: sampleOverrun
       0: noError
       1: tooBig
       10: wrongValue
       11: noCreation
       12: inconsistentValue
       13: resourceUnavailable
       14: commitFailed
       15: undoFailed
       16: authorizationError
       17: notWritable
       18: inconsistentName
       2: noSuchName
       3: badValue
       4: readOnly
       5: genErr
       6: noAccess
       7: wrongType
       8: wrongLength
       9: wrongEncoding
     Descr="The reason for the failure of an attempt to check for a
        trigger condition or set an object in response to an event."
EDESC
#
#
#
EVENT mteEventSetFailure .1.3.6.1.2.1.88.2.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA Notification that an attempt to do a set in response to an $*
SDESC
Notification that an attempt to do a set in response to an
event has failed.
The network manager must enable this notification only with
a certain fear and trembling, as it can easily crowd out more
important information.  It should be used only to help diagnose
a problem that has appeared in the error counters and can not
be found otherwise.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteFailedReason
     Syntax="INTEGER"
       -1: localResourceLack
       -2: badDestination
       -3: destinationUnreachable
       -4: noResponse
       -5: badType
       -6: sampleOverrun
       0: noError
       1: tooBig
       10: wrongValue
       11: noCreation
       12: inconsistentValue
       13: resourceUnavailable
       14: commitFailed
       15: undoFailed
       16: authorizationError
       17: notWritable
       18: inconsistentName
       2: noSuchName
       3: badValue
       4: readOnly
       5: genErr
       6: noAccess
       7: wrongType
       8: wrongLength
       9: wrongEncoding
     Descr="The reason for the failure of an attempt to check for a
        trigger condition or set an object in response to an event."
EDESC
#
#
#
#
MIB: IPV6-MLD-MIB (file:./rfc3019-ipv6-mld.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HC-RMON-MIB (file:./rfc3273-hc-rmon.mib) converted on Fri Mar 18 23:13:01 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DIFFSERV-DSCP-TC (file:./rfc3289-diffserv-dscp-tc.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DIFFSERV-MIB (file:./rfc3289-diffserv.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-NOTIFICATION-MIB (file:./rfc3413-snmp-notification.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-USER-BASED-SM-MIB (file:./rfc3414-snmp-usm.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-VIEW-BASED-ACM-MIB (file:./rfc3415-snmp-vacm.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMPv2-TM (file:./rfc3417-snmpv2-tm.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMPv2-MIB (file:./rfc3418-snmpv2.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT coldStart .1.3.6.1.6.3.1.1.5.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A coldStart trap signifies that the SNMP entity, $*
SDESC
A coldStart trap signifies that the SNMP entity,
supporting a notification originator application, is
reinitializing itself and that its configuration may
have been altered.
EDESC
#
#
#
EVENT warmStart .1.3.6.1.6.3.1.1.5.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A warmStart trap signifies that the SNMP entity, $*
SDESC
A warmStart trap signifies that the SNMP entity,
supporting a notification originator application,
is reinitializing itself such that its configuration
is unaltered.
EDESC
#
#
#
EVENT authenticationFailure .1.3.6.1.6.3.1.1.5.5 "Status Events" Normal
FORMAT ZBXTRAP $aA An authenticationFailure trap signifies that the SNMP $*
SDESC
An authenticationFailure trap signifies that the SNMP
entity has received a protocol message that is not
properly authenticated.  While all implementations
of SNMP entities MAY be capable of generating this
trap, the snmpEnableAuthenTraps object indicates
whether this trap will be generated.
EDESC
#
#
#
#
MIB: TRANSPORT-ADDRESS-MIB (file:./rfc3419-transport-address.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PerfHist-TC-MIB (file:./rfc3593-perfhist-tc.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-FLOW-LABEL-MIB (file:./rfc3595-ipv6-flow-label.mib) converted on Fri Mar 18 23:13:02 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: POWER-ETHERNET-MIB (file:./rfc3621-power-ethernet.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pethPsePortOnOffNotification .1.3.6.1.2.1.105.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA  This Notification indicates if Pse Port is delivering or $*
SDESC
 This Notification indicates if Pse Port is delivering or
not power to the PD.  This Notification SHOULD be sent on
every status change except in the searching mode.
At least 500 msec must elapse between notifications
being emitted by the same object instance.
Variables:
  1: pethPsePortDetectionStatus
     Syntax="INTEGER"
       1: disabled
       2: searching
       3: deliveringPower
       4: fault
       5: test
       6: otherFault
     Descr="Describes the operational status of the port PD detection.
         A value of disabled(1)- indicates that the PSE State diagram
         is in the state DISABLED.
         A value of deliveringPower(3) - indicates that the PSE State
         diagram is in the state POWER_ON for a duration greater than
         tlim max (see IEEE Std 802.3af Table 33-5 tlim).
         A value of fault(4) - indicates that the PSE State diagram is
         in the state TEST_ERROR.
         A value of test(5) - indicates that the PSE State diagram is
         in the state TEST_MODE.
         A value of otherFault(6) - indicates that the PSE State
         diagram is in the state IDLE due to the variable
         error_conditions.
         A value of searching(2)- indicates the PSE State diagram is
         in a state other than those listed above."
EDESC
#
#
#
EVENT pethMainPowerUsageOnNotification .1.3.6.1.2.1.105.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA  This Notification indicate PSE Threshold usage $*
SDESC
 This Notification indicate PSE Threshold usage
indication is on, the usage power is above the
threshold.  At least 500 msec must elapse between
notifications being emitted by the same object
instance.
Variables:
  1: pethMainPseConsumptionPower
     Syntax="GAUGE"
     Descr="Measured usage power expressed in Watts."
EDESC
#
#
#
EVENT pethMainPowerUsageOffNotification .1.3.6.1.2.1.105.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA  This Notification indicates PSE Threshold usage indication $*
SDESC
 This Notification indicates PSE Threshold usage indication
off, the usage power is below the threshold.
At least 500 msec must elapse between notifications being
emitted by the same object instance.
Variables:
  1: pethMainPseConsumptionPower
     Syntax="GAUGE"
     Descr="Measured usage power expressed in Watts."
EDESC
#
#
#
#
MIB: EtherLike-MIB (file:./rfc3635-EtherLike.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HC-PerfHist-TC-MIB (file:./rfc3705-hc-perfhist-tc.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-TC-STD-MIB (file:./rfc3811-mpls-tc-std.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-TE-STD-MIB (file:./rfc3812-mpls-te-std.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsTunnelUp .1.3.6.1.2.1.10.166.3.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a $*
SDESC
This notification is generated when a
mplsTunnelOperStatus object for one of the
configured tunnels is about to leave the down state
and transition into some other state (but not into
the notPresent state).  This other state is
indicated by the included value of
mplsTunnelOperStatus.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
EVENT mplsTunnelDown .1.3.6.1.2.1.10.166.3.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a $*
SDESC
This notification is generated when a
mplsTunnelOperStatus object for one of the
configured tunnels is about to enter the down state
from some other state (but not from the notPresent
state).  This other state is indicated by the
included value of mplsTunnelOperStatus.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
EVENT mplsTunnelRerouted .1.3.6.1.2.1.10.166.3.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a tunnel is $*
SDESC
This notification is generated when a tunnel is
rerouted. If the mplsTunnelARHopTable is used, then
this tunnel instance's entry in the
mplsTunnelARHopTable MAY contain the new path for
this tunnel some time after this trap is issued by
the agent.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
EVENT mplsTunnelReoptimized .1.3.6.1.2.1.10.166.3.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a tunnel is $*
SDESC
This notification is generated when a tunnel is
reoptimized. If the mplsTunnelARHopTable is used,
then this tunnel instance's entry in the
mplsTunnelARHopTable MAY contain the new path for
this tunnel some time after this trap is issued by
the agent.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
#
MIB: MPLS-LSR-STD-MIB (file:./rfc3813-mpls-lsr-std.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsXCUp .1.3.6.1.2.1.10.166.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the $*
SDESC
This notification is generated when the
mplsXCOperStatus object for one or more contiguous
entries in mplsXCTable are about to enter the up(1)
state from some other state. The included values of
mplsXCOperStatus MUST both be set equal to this
new state (i.e: up(1)).  The two instances of
mplsXCOperStatus in this notification indicate the range
of indexes that are affected.  Note that all the indexes
of the two ends of the range can be derived from the
instance identifiers of these two objects.  For
cases where a contiguous range of cross-connects
have transitioned into the up(1) state at roughly
the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in
an effort to minimize the emission of a large number
of notifications.  If a notification has to be
issued for just a single cross-connect entry, then
the instance identifier (and values) of the two
mplsXCOperStatus objects MUST be the identical.
Variables:
  1: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
  2: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
EDESC
#
#
#
EVENT mplsXCDown .1.3.6.1.2.1.10.166.2.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the $*
SDESC
This notification is generated when the
mplsXCOperStatus object for one or more contiguous
entries in mplsXCTable are about to enter the
down(2) state from some other state. The included values
of mplsXCOperStatus MUST both be set equal to this
down(2) state.  The two instances of mplsXCOperStatus
in this notification indicate the range of indexes
that are affected.  Note that all the indexes of the
two ends of the range can be derived from the
instance identifiers of these two objects.  For
cases where a contiguous range of cross-connects
have transitioned into the down(2) state at roughly
the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in
an effort to minimize the emission of a large number
of notifications.  If a notification has to be
issued for just a single cross-connect entry, then
the instance identifier (and values) of the two
mplsXCOperStatus objects MUST be identical.
Variables:
  1: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
  2: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
EDESC
#
#
#
#
MIB: MPLS-FTN-STD-MIB (file:./rfc3814-mpls-ftn-std.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-LDP-STD-MIB (file:./rfc3815-mpls-ldp-std.mib) converted on Fri Mar 18 23:13:03 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsLdpInitSessionThresholdExceeded .1.3.6.1.2.1.10.166.4.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the value of $*
SDESC
This notification is generated when the value of
the 'mplsLdpEntityInitSessionThreshold' object
is not zero, and the number of Session
Initialization messages exceeds the value
of the 'mplsLdpEntityInitSessionThreshold' object.
Variables:
  1: mplsLdpEntityInitSessionThreshold
     Syntax="INTEGER32"
     Descr="When attempting to establish a session with
             a given Peer, the given LDP Entity should
             send out the SNMP notification,
             'mplsLdpInitSessionThresholdExceeded', when
             the number of Session Initialization messages
             sent exceeds this threshold.

             The notification is used to notify an
             operator when this Entity and its Peer are
             possibly engaged in an endless sequence
             of messages as each NAKs the other's

             Initialization messages with Error Notification
             messages.  Setting this threshold which triggers
             the notification is one way to notify the
             operator.  The notification should be generated
             each time this threshold is exceeded and
             for every subsequent Initialization message
             which is NAK'd with an Error Notification
             message after this threshold is exceeded.

             A value of 0 (zero) for this object
             indicates that the threshold is infinity, thus
             the SNMP notification will never be generated."
EDESC
#
#
#
EVENT mplsLdpPathVectorLimitMismatch .1.3.6.1.2.1.10.166.4.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent when the $*
SDESC
This notification is sent when the
'mplsLdpEntityPathVectorLimit' does NOT match
the value of the 'mplsLdpPeerPathVectorLimit' for
a specific Entity.
REFERENCE
RFC3036, LDP Specification, Section 3.5.3.
Variables:
  1: mplsLdpEntityPathVectorLimit
     Syntax="INTEGER32"
     Descr="If the value of this object is 0 (zero) then
             Loop Detection for Path Vectors is disabled.

             Otherwise, if this object has a value greater than
             zero, then Loop Dection for Path Vectors is enabled,
             and the Path Vector Limit is this value.
             Also, the value of the object,
             'mplsLdpLsrLoopDetectionCapable', must be set to
             either 'pathVector(4)' or 'hopCountAndPathVector(5)',
             if this object has a value greater than 0 (zero),
             otherwise it is ignored."
  2: mplsLdpPeerPathVectorLimit
     Syntax="INTEGER32"
     Descr="If the value of this object is 0 (zero) then
             Loop Dection for Path Vectors for this Peer
             is disabled.

             Otherwise, if this object has a value greater than
             zero, then Loop Dection for Path  Vectors for this
             Peer is enabled and the Path Vector Limit is this value."
EDESC
#
#
#
EVENT mplsLdpSessionUp .1.3.6.1.2.1.10.166.4.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA If this notification is sent when the $*
SDESC
If this notification is sent when the
value of 'mplsLdpSessionState' enters
the 'operational(5)' state.
Variables:
  1: mplsLdpSessionState
     Syntax="INTEGER"
       1: nonexistent
       2: initialized
       3: openrec
       4: opensent
       5: operational
     Descr="The current state of the session, all of the
             states 1 to 5 are based on the state machine
             for session negotiation behavior."
  2: mplsLdpSessionDiscontinuityTime
     Syntax="TICKS"
     Descr="The value of sysUpTime on the most recent occasion
             at which any one or more of this session's counters
             suffered a discontinuity.  The relevant counters are
             the specific instances associated with this session
             of any Counter32 object contained in the
             mplsLdpSessionStatsTable.

             The initial value of this object is the value of
             sysUpTime when the entry was created in this table.

             Also, a command generator can distinguish when a session
             between a given Entity and Peer goes away and a new
             session is established.  This value would change and
             thus indicate to the command generator that this is a
             different session."
  3: mplsLdpSessionStatsUnknownMesTypeErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown Message Type
             Errors detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
  4: mplsLdpSessionStatsUnknownTlvErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown TLV Errors
             detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
EDESC
#
#
#
EVENT mplsLdpSessionDown .1.3.6.1.2.1.10.166.4.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent when the $*
SDESC
This notification is sent when the
value of 'mplsLdpSessionState' leaves
the 'operational(5)' state.
Variables:
  1: mplsLdpSessionState
     Syntax="INTEGER"
       1: nonexistent
       2: initialized
       3: openrec
       4: opensent
       5: operational
     Descr="The current state of the session, all of the
             states 1 to 5 are based on the state machine
             for session negotiation behavior."
  2: mplsLdpSessionDiscontinuityTime
     Syntax="TICKS"
     Descr="The value of sysUpTime on the most recent occasion
             at which any one or more of this session's counters
             suffered a discontinuity.  The relevant counters are
             the specific instances associated with this session
             of any Counter32 object contained in the
             mplsLdpSessionStatsTable.

             The initial value of this object is the value of
             sysUpTime when the entry was created in this table.

             Also, a command generator can distinguish when a session
             between a given Entity and Peer goes away and a new
             session is established.  This value would change and
             thus indicate to the command generator that this is a
             different session."
  3: mplsLdpSessionStatsUnknownMesTypeErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown Message Type
             Errors detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
  4: mplsLdpSessionStatsUnknownTlvErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown TLV Errors
             detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
EDESC
#
#
#
#
MIB: SNMP-USM-AES-MIB (file:./rfc3826-snmp-usm-aes.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TE-MIB (file:./rfc3970-te.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT teTunnelUp .1.3.6.1.2.1.122.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelUp notification is generated when the $*
SDESC
A teTunnelUp notification is generated when the
Tunnel indexed by teTunnelName transitions to the
'up' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose
transition to up made the tunnel go up.
This notification MUST be limited to at most one
every minute, in case the tunnel flaps up and down.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelDown .1.3.6.1.2.1.122.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelDown notification is generated when the $*
SDESC
A teTunnelDown notification is generated when the
Tunnel indexed by teTunnelName transitions to the
'down' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose
transition to down made the tunnel go down.
This notification MUST be limited to at most one
every minute, in case the tunnel flaps up and down.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelChanged .1.3.6.1.2.1.122.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelChanged notification is generated when an $*
SDESC
A teTunnelChanged notification is generated when an
active path on the Tunnel indexed by teTunnelName
changes or a new path becomes active.  The value
of tePathName is the new active path.
This notification MUST be limited to at most one
every minute, in case the tunnel changes quickly.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelRerouted .1.3.6.1.2.1.122.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA A teTunnelRerouted notification is generated when $*
SDESC
A teTunnelRerouted notification is generated when
an active path for the Tunnel indexed by
teTunnelName stays the same, but its route changes.
This notification MUST be limited to at most one
every minute, in case the tunnel reroutes quickly.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
#
MIB: INET-ADDRESS-MIB (file:./rfc4001-inet-address.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TCP-MIB (file:./rfc4022-tcp.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: FC-MGMT-MIB (file:./rfc4044-fc-mgmt.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TUNNEL-MIB (file:./rfc4087-tunnel.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: UDP-MIB (file:./rfc4113-udp.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ENTITY-MIB (file:./rfc4133-entity.mib) converted on Fri Mar 18 23:13:04 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT entConfigChange .1.3.6.1.2.1.47.2.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An entConfigChange notification is generated when the value $*
SDESC
An entConfigChange notification is generated when the value
of entLastChangeTime changes.  It can be utilized by an NMS
to trigger logical/physical entity table maintenance polls.
An agent should not generate more than one entConfigChange
'notification-event' in a given time interval (five seconds
is the suggested default).  A 'notification-event' is the
transmission of a single trap or inform PDU to a list of
notification destinations.
If additional configuration changes occur within the
throttling period, then notification-events for these
changes should be suppressed by the agent until the current
throttling period expires.  At the end of a throttling
period, one notification-event should be generated if any
configuration changes occurred since the start of the
throttling period.  In such a case, another throttling
period is started right away.
An NMS should periodically check the value of
entLastChangeTime to detect any missed entConfigChange
notification-events, e.g., due to throttling or transmission
loss.
EDESC
#
#
#
#
MIB: VPN-TC-STD-MIB (file:./rfc4265-vpn-tc-std.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: BGP4-MIB (file:./rfc4273-bgp4.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT bgpEstablishedNotification .1.3.6.1.2.1.15.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The bgpEstablishedNotification event is generated $*
EXEC curl --location --request POST 'https://netops.iflytek.com/duty/wechat' --header 'Content-Type: application/json' --data '{"msg":"$aA bgp状态恢复established peer $1 状态$3","method":"snmptrap", "host": "$aA", "type": "bgp", "status": "ok"}'
SDESC
The bgpEstablishedNotification event is generated
when the BGP FSM enters the established state.
This Notification replaces the bgpEstablished
Notification.
Variables:
  1: bgpPeerRemoteAddr
     Syntax="IPADDR"
     Descr="The remote IP address of this entry's BGP
                     peer."
  2: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  3: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpBackwardTransNotification .1.3.6.1.2.1.15.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The bgpBackwardTransNotification event is $*
SDESC
The bgpBackwardTransNotification event is
generated when the BGP FSM moves from a higher
numbered state to a lower numbered state.
This Notification replaces the
bgpBackwardsTransition Notification.
Variables:
  1: bgpPeerRemoteAddr
     Syntax="IPADDR"
     Descr="The remote IP address of this entry's BGP
                     peer."
  2: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  3: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpEstablished .1.3.6.1.2.1.15.7.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The BGP Established event is generated when $*
SDESC
The BGP Established event is generated when
the BGP FSM enters the ESTABLISHED state.
Variables:
  1: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  2: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpBackwardTransition .1.3.6.1.2.1.15.7.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The BGPBackwardTransition Event is generated $*
SDESC
The BGPBackwardTransition Event is generated
when the BGP FSM moves from a higher numbered
state to a lower numbered state.
Variables:
  1: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  2: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
#
MIB: IP-FORWARD-MIB (file:./rfc4292-ip-forward.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IP-MIB (file:./rfc4293-ip.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: P-BRIDGE-MIB (file:./rfc4363-pbridge.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: Q-BRIDGE-MIB (file:./rfc4363-qbridge.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-L3VPN-STD-MIB (file:./rfc4382-mpls-l3vpn-std.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsL3VpnVrfUp .1.3.6.1.2.1.10.166.11.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when: $*
SDESC
This notification is generated when:
a. No interface is associated with this VRF, and the first
(and only first) interface associated with it has its
ifOperStatus change to up(1).
b. One interface is associated with this VRF, and
the ifOperStatus of this interface changes to up(1).
c. Multiple interfaces are associated with this VRF, and the
ifOperStatus of all interfaces is down(2), and the first
of those interfaces has its ifOperStatus change to up(1).
Variables:
  1: mplsL3VpnIfConfRowStatus
     Syntax="INTEGER"
       1: active
       2: notInService
       3: notReady
       4: createAndGo
       5: createAndWait
       6: destroy
     Descr="This variable is used to create, modify, and/or
        delete a row in this table.  Rows in this
        table signify that the specified interface is
        associated with this VRF.  If the row creation
        operation succeeds, the interface will have been
        associated with the specified VRF, otherwise the
        agent MUST not allow the association.  If the agent
        only allows read-only operations on this table, it
        MUST create entries in this table as they are created
        on the device.  When a row in this table is in
        active(1) state, no objects in that row can be
        modified except mplsL3VpnIfConfStorageType and
        mplsL3VpnIfConfRowStatus."
  2: mplsL3VpnVrfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
     Descr="Denotes whether or not a VRF is operational.  A VRF is
        up(1) when there is at least one interface associated
        with the VRF whose ifOperStatus is up(1).  A VRF is
        down(2) when:
        a. There does not exist at least one interface whose
           ifOperStatus is up(1).
        b. There are no interfaces associated with the VRF."
EDESC
#
#
#
EVENT mplsL3VpnVrfDown .1.3.6.1.2.1.10.166.11.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when: $*
SDESC
This notification is generated when:
a. One interface is associated with this VRF, and
the ifOperStatus of this interface changes from up(1)
to down(2).
b. Multiple interfaces are associated with this VRF, and
the ifOperStatus of all except one of these interfaces is
equal to up(1), and the ifOperStatus of that interface
changes from up(1) to down(2).
c. The last interface with ifOperStatus equal to up(1)
is disassociated from a VRF.
Variables:
  1: mplsL3VpnIfConfRowStatus
     Syntax="INTEGER"
       1: active
       2: notInService
       3: notReady
       4: createAndGo
       5: createAndWait
       6: destroy
     Descr="This variable is used to create, modify, and/or
        delete a row in this table.  Rows in this
        table signify that the specified interface is
        associated with this VRF.  If the row creation
        operation succeeds, the interface will have been
        associated with the specified VRF, otherwise the
        agent MUST not allow the association.  If the agent
        only allows read-only operations on this table, it
        MUST create entries in this table as they are created
        on the device.  When a row in this table is in
        active(1) state, no objects in that row can be
        modified except mplsL3VpnIfConfStorageType and
        mplsL3VpnIfConfRowStatus."
  2: mplsL3VpnVrfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
     Descr="Denotes whether or not a VRF is operational.  A VRF is
        up(1) when there is at least one interface associated
        with the VRF whose ifOperStatus is up(1).  A VRF is
        down(2) when:
        a. There does not exist at least one interface whose
           ifOperStatus is up(1).
        b. There are no interfaces associated with the VRF."
EDESC
#
#
#
EVENT mplsL3VpnVrfRouteMidThreshExceeded .1.3.6.1.2.1.10.166.11.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the number of routes $*
SDESC
This notification is generated when the number of routes
contained by the specified VRF exceeds the value indicated by
mplsL3VpnVrfMidRouteThreshold.  A single notification MUST be
generated when this threshold is exceeded, and no other
notifications of this type should be issued until the value
of mplsL3VpnVrfPerfCurrNumRoutes has fallen below that of
mplsL3VpnVrfConfMidRteThresh.
Variables:
  1: mplsL3VpnVrfPerfCurrNumRoutes
     Syntax="GAUGE"
     Descr="Indicates the number of routes currently used by this
        VRF."
  2: mplsL3VpnVrfConfMidRteThresh
     Syntax="UNSIGNED32"
     Descr="Denotes mid-level water marker for the number
      of routes that this VRF may hold."
EDESC
#
#
#
EVENT mplsL3VpnVrfNumVrfRouteMaxThreshExceeded .1.3.6.1.2.1.10.166.11.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the number of routes $*
SDESC
This notification is generated when the number of routes
contained by the specified VRF exceeds or attempts to exceed
the maximum allowed value as indicated by
mplsL3VpnVrfMaxRouteThreshold.  In cases where
mplsL3VpnVrfConfHighRteThresh is set to the same value
as mplsL3VpnVrfConfMaxRoutes, mplsL3VpnVrfConfHighRteThresh
need not be exceeded; rather, just reached for this notification
to be issued.
Note that mplsL3VpnVrfConfRteMxThrshTime denotes the interval
at which the this notification will be reissued after the
maximum value has been exceeded (or reached if
mplsL3VpnVrfConfMaxRoutes and mplsL3VpnVrfConfHighRteThresh are
equal) and the initial notification has been issued.  This value
is intended to prevent continuous generation of notifications by
an agent in the event that routes are continually added to a VRF
after it has reached its maximum value.  The default value is 0
minutes.  If this value is set to 0, the agent should only issue
a single notification at the time that the maximum threshold has
been reached, and should not issue any more notifications until
the value of routes has fallen below the configured threshold
value.
Variables:
  1: mplsL3VpnVrfPerfCurrNumRoutes
     Syntax="GAUGE"
     Descr="Indicates the number of routes currently used by this
        VRF."
  2: mplsL3VpnVrfConfHighRteThresh
     Syntax="UNSIGNED32"
     Descr="Denotes high-level water marker for the number of
      routes that this VRF may hold."
EDESC
#
#
#
EVENT mplsL3VpnNumVrfSecIllglLblThrshExcd .1.3.6.1.2.1.10.166.11.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the number of illegal $*
SDESC
This notification is generated when the number of illegal
label violations on a VRF as indicated by
mplsL3VpnVrfSecIllegalLblVltns has exceeded
mplsL3VpnIllLblRcvThrsh.  The threshold is not
included in the varbind here because the value of
mplsL3VpnVrfSecIllegalLblVltns should be one greater than
the threshold at the time this notification is issued.
Variables:
  1: mplsL3VpnVrfSecIllegalLblVltns
     Syntax="COUNTER"
     Descr="Indicates the number of illegally received
        labels on this VPN/VRF.

        Discontinuities in the value of this counter can occur
        at re-initialization of the management system, and at
        other times as indicated by the value of
        mplsL3VpnVrfSecDiscontinuityTime."
EDESC
#
#
#
EVENT mplsL3VpnNumVrfRouteMaxThreshCleared .1.3.6.1.2.1.10.166.11.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated only after the number of routes $*
SDESC
This notification is generated only after the number of routes
contained by the specified VRF exceeds or attempts to exceed
the maximum allowed value as indicated by
mplsVrfMaxRouteThreshold, and then falls below this value.  The
emission of this notification informs the operator that the
error condition has been cleared without the operator having to
query the device.
Note that mplsL3VpnVrfConfRteMxThrshTime denotes the interval at
which the mplsNumVrfRouteMaxThreshExceeded notification will
be reissued after the maximum value has been exceeded (or
reached if mplsL3VpnVrfConfMaxRoutes and
mplsL3VpnVrfConfHighRteThresh are equal) and the initial
notification has been issued.  Therefore,
the generation of this notification should also be emitted with
this same frequency (assuming that the error condition is
cleared).  Specifically, if the error condition is reached and
cleared several times during the period of time specified in
mplsL3VpnVrfConfRteMxThrshTime, only a single notification will
be issued to indicate the first instance of the error condition
as well as the first time the error condition is cleared.
This behavior is intended to prevent continuous generation of
notifications by an agent in the event that routes are
continually added and removed to/from a VRF after it has
reached its maximum value.  The default value is 0.  If this
value is set to 0, the agent should issue a notification
whenever the maximum threshold has been cleared.
Variables:
  1: mplsL3VpnVrfPerfCurrNumRoutes
     Syntax="GAUGE"
     Descr="Indicates the number of routes currently used by this
        VRF."
  2: mplsL3VpnVrfConfHighRteThresh
     Syntax="UNSIGNED32"
     Descr="Denotes high-level water marker for the number of
      routes that this VRF may hold."
EDESC
#
#
#
#
MIB: T11-FC-NAME-SERVER-MIB (file:./rfc4438-t11-fc-name-server.mib) converted on Fri Mar 18 23:13:05 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11NsRejectRegNotify .1.3.6.1.2.1.135.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever a request to $*
SDESC
This notification is generated whenever a request to
register information in a Name Server Information
Subset (for which the corresponding instance of
t11NsInfoSubsetRejReqNotfyEnable is 'true') is
rejected on a particular Fabric for a particular Nx_Port.
The value of t11FamLocalSwitchWwn indicates the
WWN of the switch that received the request.
(If the WWN is unavailable, the value is set to
the zero-length string.)
The value of t11NsRejectCtCommandString indicates
the rejected request, and the values of
t11NsRejectReasonCode, t11NsRejReasonCodeExp, and
t11NsRejReasonVendorCode indicate the reason for
the rejection.
The value of t11NsRegPortName represents the Port Name
if it is able to be extracted out of the Registration
Request, or otherwise the value as currently registered
on the port.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11NsRegPortName
     Syntax="OCTETSTR"
     Descr="The Port_Name (WWN) of this Nx_Port.
           If this object has not been registered, then its value
           is the zero-length string."
  3: t11NsRejectCtCommandString
     Syntax="OCTETSTR"
     Descr="The binary content of the Registration Request,
           formatted as an octet string (in network byte
           order) containing the CT_IU, as described in
           Table 2 of [FC-GS-4] (including the preamble),
           which was most recently rejected for the particular
           Name Server Information Subset on the particular port
           on the particular Fabric.

           This object contains the zero-length string
           if and when the CT-IU's content is unavailable.

           When the length of this object is 255 octets, it
           contains the first 255 octets of the CT-IU (in
           network-byte order)."
  4: t11NsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="A registration reject reason code.  This object
           contains the reason code of the most recent Name
           Server Registration Request failure for the
           particular port on the particular Fabric."
  5: t11NsRejReasonCodeExp
     Syntax="INTEGER"
       1: noAdditionalExplanation
       10: symbolicNodeNameNotRegistered
       11: portTypeNotRegistered
       12: portIpAddressNotRegistered
       13: fabricPortNameNotRegistered
       14: hardAddressNotRegistered
       15: fc4DescriptorNotRegistered
       16: fc4FeaturesNotRegistered
       17: accessDenied
       18: unacceptablePortIdentifier
       19: databaseEmpty
       2: portIdentifierNotRegistered
       20: noObjectRegInSpecifiedScope
       21: domainIdNotPresent
       22: portIdNotPresent
       23: noDeviceAttached
       24: authorizationException
       25: authenticationException
       26: databaseFull
       3: portNameNotRegistered
       4: nodeNameNotRegistered
       5: classOfServiceNotRegistered
       6: nodeIpAddressNotRegistered
       7: ipaNotRegistered
       8: fc4TypeNotRegistered
       9: symbolicPortNameNotRegistered
     Descr="A registration reject reason code explanation.  This
           object contains the reason code explanation of the most
           recent Name Server Registration Request failure for the
           particular port on the particular Fabric."
  6: t11NsRejReasonVendorCode
     Syntax="OCTETSTR"
     Descr="A registration reject vendor-specific code.  This
           object contains the vendor-specific code of the most
           recent Name Server Registration Request failure for the
           particular port on the particular Fabric."
EDESC
#
#
#
#
MIB: T11-FC-FABRIC-ADDR-MGR-MIB (file:./rfc4439-t11-fc-fabric-addr-mgr.mib) converted on Fri Mar 18 23:13:06 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11FamDomainIdNotAssignedNotify .1.3.6.1.2.1.137.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a Domain_ID has not $*
SDESC
This notification indicates that a Domain_ID has not
been configured or assigned for a particular Fabric,
identified by t11FamNotifyFabricIndex, on a particular
switch identified by t11FamLocalSwitchWwn.  This could
happen under the following conditions, and results in the
switch isolating E_Ports on the Fabric:
- if the switch's request for a configured static
Domain_ID is rejected or no other Domain_ID is
assigned, then the E_Ports are isolated.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax="UNSIGNED32"
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
EVENT t11FamNewPrincipalSwitchNotify .1.3.6.1.2.1.137.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a particular switch, $*
SDESC
This notification indicates that a particular switch,
identified by t11FamLocalSwitchWwn, has become the new
Principal Switch on the Fabric identified by
t11FamNotifyFabricIndex.
This notification is sent soon after its election as
the new Principal Switch, i.e., upon expiration of a
Principal Switch selection timer that is equal to
twice the Fabric Stability Timeout value (F_S_TOV).
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax="UNSIGNED32"
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
EVENT t11FamFabricChangeNotify .1.3.6.1.2.1.137.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent whenever a particular switch, $*
SDESC
This notification is sent whenever a particular switch,
identified by t11FamLocalSwitchWwn, sends or
receives a Build Fabric (BF) or a ReConfigure Fabric
(RCF) message on the Fabric identified by
t11FamNotifyFabricIndex.
This notification is not sent if a
't11FamNewPrincipalSwitchNotify' notification is sent
for the same event.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax="UNSIGNED32"
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
#
MIB: T11-TC-MIB (file:./rfc4439-t11-tc.mib) converted on Fri Mar 18 23:13:06 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ISIS-MIB (file:./rfc4444-isis.mib) converted on Fri Mar 18 23:13:06 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT isisDatabaseOverload .1.3.6.1.2.1.138.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the system $*
SDESC
This notification is generated when the system
enters or leaves the Overload state.  The number
of times this has been generated and cleared is kept
track of by isisSysStatLSPDbaseOloads.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisSysLevelState
     Syntax="INTEGER"
       1: off
       2: on
       3: waiting
       4: overloaded
     Descr="The state of the database at this level.
             The value 'off' indicates that IS-IS is not active at
             this level.
             The value 'on' indicates that IS-IS is active at this
             level and is not overloaded.
             The value 'waiting' indicates a database that is low on
             an essential resource, such as memory.
             The administrator may force the state to 'overloaded'
             by setting the object isisSysLevelSetOverload.
             If the state is 'waiting' or 'overloaded', we
             originate LSPs with the overload bit set."
EDESC
#
#
#
EVENT isisManualAddressDrops .1.3.6.1.2.1.138.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when one of the $*
SDESC
This notification is generated when one of the
manual areaAddresses assigned to this system is
ignored when computing routes.  The object
isisNotificationAreaAddress describes the area that
has been dropped.
The number of times this event has been generated
is counted by isisSysStatManAddrDropFromAreas.
The agent must throttle the generation of
consecutive isisManualAddressDrops notifications
so that there is at least a 5-second gap between
notifications of this type.  When notifications
are throttled, they are dropped, not queued for
sending at a future time.
Variables:
  1: isisNotificationAreaAddress
     Syntax="OCTETSTR"
     Descr="An Area Address."
EDESC
#
#
#
EVENT isisCorruptedLSPDetected .1.3.6.1.2.1.138.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when we find that $*
SDESC
This notification is generated when we find that
an LSP that was stored in memory has become
corrupted.  The number of times this has been
generated is counted by isisSysCorrLSPs.
We forward an LSP ID.  We may have independent
knowledge of the ID, but in some implementations
there is a chance that the ID itself will be
corrupted.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisAttemptToExceedMaxSequence .1.3.6.1.2.1.138.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA When the sequence number on an LSP we generate $*
SDESC
When the sequence number on an LSP we generate
wraps the 32-bit sequence counter, we purge and
wait to re-announce this information.  This
notification describes that event.  Since these
should not be generated rapidly, we generate
an event each time this happens.
While the first 6 bytes of the LSPID are ours,
the other two contain useful information.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisIDLenMismatch .1.3.6.1.2.1.138.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with a different value for the System ID Length.
This notification includes an index to identify
the circuit where we saw the PDU and the header of
the PDU, which may help a network manager identify
the source of the confusion.
The agent must throttle the generation of
consecutive isisIDLenMismatch notifications
so that there is at least a 5-second gap between
notifications of this type.  When notifications
are throttled, they are dropped, not queued for
sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduFieldLen
     Syntax="UNSIGNED32"
     Descr="Holds the System ID length reported in PDU we received."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisMaxAreaAddressesMismatch .1.3.6.1.2.1.138.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with a different value for the Maximum Area
Addresses.  This notification includes the
header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisMaxAreaAddressesMismatch
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduMaxAreaAddress
     Syntax="UNSIGNED32"
     Descr="Holds the Max Area Addresses reported in a PDU
             we received."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisOwnLSPPurge .1.3.6.1.2.1.138.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with our systemID and zero age.  This
notification includes the circuit Index
and router ID from the LSP, if available,
which may help a network manager
identify the source of the confusion.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisSequenceNumberSkip .1.3.6.1.2.1.138.0.8 "Status Events" Normal
FORMAT ZBXTRAP $aA When we receive an LSP with our System ID $*
SDESC
When we receive an LSP with our System ID
and different contents, we may need to reissue
the LSP with a higher sequence number.
We send this notification if we need to increase
the sequence number by more than one.  If two
Intermediate Systems are configured with the same
System ID, this notification will fire.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisAuthenticationTypeFailure .1.3.6.1.2.1.138.0.9 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with the wrong authentication type field.
This notification includes the header of the
packet, which may help a network manager
identify the source of the confusion.
The agent must throttle the generation of
consecutive isisAuthenticationTypeFailure
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAuthenticationFailure .1.3.6.1.2.1.138.0.10 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with an incorrect authentication information
field.  This notification includes the header
of the packet, which may help a network manager
identify the source of the confusion.
The agent must throttle the generation of
consecutive isisAuthenticationFailure
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisVersionSkew .1.3.6.1.2.1.138.0.11 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS running a different version
of the protocol.  This notification includes
the header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisVersionSkew notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduProtocolVersion
     Syntax="UNSIGNED32"
     Descr="Holds the Protocol version reported in PDU we received."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAreaMismatch .1.3.6.1.2.1.138.0.12 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS that does not share any
area address.  This notification includes
the header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisAreaMismatch notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  2: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisRejectedAdjacency .1.3.6.1.2.1.138.0.13 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS but do not establish an
adjacency for some reason.
The agent must throttle the generation of
consecutive isisRejectedAdjacency notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisLSPTooLargeToPropagate .1.3.6.1.2.1.138.0.14 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when we attempt to propagate $*
SDESC
A notification sent when we attempt to propagate
an LSP that is larger than the dataLinkBlockSize
for the circuit.
The agent must throttle the generation of
consecutive isisLSPTooLargeToPropagate notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of LSP we received that is too
             big to forward."
  4: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisOrigLSPBuffSizeMismatch .1.3.6.1.2.1.138.0.15 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when a Level 1 LSP or Level $*
SDESC
A notification sent when a Level 1 LSP or Level
2 LSP is received that is larger than the local
value for isisSysLevelOrigLSPBuffSize, or when an
LSP is received that contains the supported Buffer Size
option and the value in the PDU option field does
not match the local value for isisSysLevelOrigLSPBuffSize.
We pass up the size from the option field and the
size of the LSP when one of them exceeds our configuration.
The agent must throttle the generation of
consecutive isisOrigLSPBuffSizeMismatch notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  4: isisPduOriginatingBufferSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of isisSysLevelOrigLSPBuffSize advertised
             by the peer in the originatingLSPBufferSize TLV.
             If the peer does not advertise this TLV, this
             value is set to 0."
  5: isisPduBufferSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of LSP received from peer."
EDESC
#
#
#
EVENT isisProtocolsSupportedMismatch .1.3.6.1.2.1.138.0.16 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when a non-pseudonode $*
SDESC
A notification sent when a non-pseudonode
segment 0 LSP is received that has no matching
protocols supported.  This may be because the system
does not generate the field, or because there are no
common elements.  The list of protocols supported
should be included in the notification: it may be
empty if the TLV is not supported, or if the
TLV is empty.
The agent must throttle the generation of
consecutive isisProtocolsSupportedMismatch
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduProtocolsSupported
     Syntax="OCTETSTR"
     Descr="The list of protocols supported by an
             adjacent system.  This may be empty."
  4: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  5: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAdjacencyChange .1.3.6.1.2.1.138.0.17 "Status Events" Normal
FORMAT ZBXTRAP $aA A notification sent when an adjacency changes $*
SDESC
A notification sent when an adjacency changes
state, entering or leaving state up.
The first 6 bytes of the isisPduLspId are the
SystemID of the adjacent IS.
The isisAdjState is the new state of the adjacency.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  4: isisAdjState
     Syntax="INTEGER"
       1: down
       2: initializing
       3: up
       4: failed
     Descr="The current state of an adjacency."
EDESC
#
#
#
EVENT isisLSPErrorDetected .1.3.6.1.2.1.138.0.18 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when we receive $*
SDESC
This notification is generated when we receive
an LSP with a parse error.  The isisCircIfIndex
holds an index of the circuit on which the PDU
arrived.  The isisPduFragment holds the start of the
LSP, and the isisErrorOffset points to the problem.
If the problem is a malformed TLV, isisErrorOffset
points to the start of the TLV, and isisErrorTLVType
holds the value of the type.
If the problem is with the LSP header, isisErrorOffset
points to the suspicious byte.
The number of such LSPs is accumulated in
isisSysStatLSPErrors.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
  5: isisErrorOffset
     Syntax="UNSIGNED32"
     Descr="An offset to a problem in a PDU.  If the problem
             is a malformed TLV, this points to the beginning
             of the TLV.  If the problem is in the header, this
             points to the byte that is suspicious."
  6: isisErrorTLVType
     Syntax="UNSIGNED32"
     Descr="The type for a malformed TLV."
EDESC
#
#
#
#
MIB: RMON2-MIB (file:./rfc4502-rmon2.mib) converted on Fri Mar 18 23:13:06 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DISMAN-TRACEROUTE-MIB (file:./rfc4560-disman-traceroute.mib) converted on Fri Mar 18 23:13:07 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT traceRoutePathChange .1.3.6.1.2.1.81.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The path to a target has changed. $*
SDESC
The path to a target has changed.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
EVENT traceRouteTestFailed .1.3.6.1.2.1.81.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Could not determine the path to a target. $*
SDESC
Could not determine the path to a target.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
EVENT traceRouteTestCompleted .1.3.6.1.2.1.81.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA The path to a target has just been determined. $*
SDESC
The path to a target has just been determined.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
#
MIB: T11-FC-ROUTE-MIB (file:./rfc4625-t11-fc-route.mib) converted on Fri Mar 18 23:13:07 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: T11-FC-VIRTUAL-FABRIC-MIB (file:./rfc4747-t11-fc-virtual-fabric.mib) converted on Fri Mar 18 23:13:07 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPF-MIB (file:./rfc4750-ospf.mib) converted on Fri Mar 18 23:13:07 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPF-TRAP-MIB (file:./rfc4750-ospf-trap.mib) converted on Fri Mar 18 23:13:07 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ospfVirtIfStateChange .1.3.6.1.2.1.14.16.2.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtIfStateChange trap signifies that there $*
SDESC
An ospfVirtIfStateChange trap signifies that there
has been a change in the state of an OSPF virtual
interface.
This trap should be generated when the interface
state regresses (e.g., goes from Point-to-Point to Down)
or progresses to a terminal state
(i.e., Point-to-Point).
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfVirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states."
EDESC
#
#
#
EVENT ospfNbrStateChange .1.3.6.1.2.1.14.16.2.2 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfNbrStateChange trap signifies that $*
SDESC
An ospfNbrStateChange trap signifies that
there has been a change in the state of a
non-virtual OSPF neighbor.  This trap should be
generated when the neighbor state regresses
(e.g., goes from Attempt or Full to 1-Way or
Down) or progresses to a terminal state (e.g.,
2-Way or Full).  When an neighbor transitions
from or to Full on non-broadcast multi-access
and broadcast networks, the trap should be
generated by the designated router.  A designated
router transitioning to Down will be noted by
ospfIfStateChange.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfNbrIpAddr
     Syntax="IPADDR"
     Descr="The IP address this neighbor is using in its
          IP source address.  Note that, on addressless
          links, this will not be 0.0.0.0 but the
          address of another of the neighbor's interfaces."
  3: ospfNbrAddressLessIndex
     Syntax="INTEGER32"
     Descr="On an interface having an IP address, zero.
          On addressless interfaces, the corresponding
          value of ifIndex in the Internet Standard MIB.
          On row creation, this can be derived from the
          instance."
  4: ospfNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer (represented as a type
          IpAddress) uniquely identifying the neighboring
          router in the Autonomous System."
  5: ospfNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the relationship with this neighbor."
EDESC
#
#
#
EVENT ospfVirtNbrStateChange .1.3.6.1.2.1.14.16.2.3 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtNbrStateChange trap signifies that there $*
SDESC
An ospfVirtNbrStateChange trap signifies that there
has been a change in the state of an OSPF virtual
neighbor.  This trap should be generated
when the neighbor state regresses (e.g., goes
from Attempt or Full to 1-Way or Down) or
progresses to a terminal state (e.g., Full).
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtNbrArea
     Syntax="IPADDR"
     Descr="The Transit Area Identifier."
  3: ospfVirtNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          neighboring router in the Autonomous System."
  4: ospfVirtNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the virtual neighbor relationship."
EDESC
#
#
#
EVENT ospfIfConfigError .1.3.6.1.2.1.14.16.2.4 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfIfConfigError trap signifies that a $*
SDESC
An ospfIfConfigError trap signifies that a
packet has been received on a non-virtual
interface from a router whose configuration
parameters conflict with this router's
configuration parameters.  Note that the event
optionMismatch should cause a trap only if it
prevents an adjacency from forming.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound packet that cannot
        be identified by a neighbor instance.  When
        the last value of a trap using this object is
        needed, but no traps of that type have been sent,
        this value pertaining to this object should
        be returned as 0.0.0.0."
  5: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  6: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfVirtIfConfigError .1.3.6.1.2.1.14.16.2.5 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtIfConfigError trap signifies that a $*
SDESC
An ospfVirtIfConfigError trap signifies that a
packet has been received on a virtual interface
from a router whose configuration parameters
conflict with this router's configuration
parameters.  Note that the event optionMismatch
should cause a trap only if it prevents an
adjacency from forming.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfIfAuthFailure .1.3.6.1.2.1.14.16.2.6 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfIfAuthFailure trap signifies that a $*
SDESC
An ospfIfAuthFailure trap signifies that a
packet has been received on a non-virtual
interface from a router whose authentication key
or authentication type conflicts with this
router's authentication key or authentication
type.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound packet that cannot
        be identified by a neighbor instance.  When
        the last value of a trap using this object is
        needed, but no traps of that type have been sent,
        this value pertaining to this object should
        be returned as 0.0.0.0."
  5: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  6: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfVirtIfAuthFailure .1.3.6.1.2.1.14.16.2.7 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtIfAuthFailure trap signifies that a $*
SDESC
An ospfVirtIfAuthFailure trap signifies that a
packet has been received on a virtual interface
from a router whose authentication key or
authentication type conflicts with this router's
authentication key or authentication type.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfIfRxBadPacket .1.3.6.1.2.1.14.16.2.8 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfIfRxBadPacket trap signifies that an $*
SDESC
An ospfIfRxBadPacket trap signifies that an
OSPF packet has been received on a non-virtual
interface that cannot be parsed.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound packet that cannot
        be identified by a neighbor instance.  When
        the last value of a trap using this object is
        needed, but no traps of that type have been sent,
        this value pertaining to this object should
        be returned as 0.0.0.0."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfVirtIfRxBadPacket .1.3.6.1.2.1.14.16.2.9 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtIfRxBadPacket trap signifies that an OSPF $*
SDESC
An ospfVirtIfRxBadPacket trap signifies that an OSPF
packet has been received on a virtual interface
that cannot be parsed.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfTxRetransmit .1.3.6.1.2.1.14.16.2.10 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfTxRetransmit trap signifies than an $*
SDESC
An ospfTxRetransmit trap signifies than an
OSPF packet has been retransmitted on a
non-virtual interface.  All packets that may be
retransmitted are associated with an LSDB entry.
The LS type, LS ID, and Router ID are used to
identify the LSDB entry.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer (represented as a type
          IpAddress) uniquely identifying the neighboring
          router in the Autonomous System."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
  6: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  7: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  8: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfVirtIfTxRetransmit .1.3.6.1.2.1.14.16.2.11 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtIfTxRetransmit trap signifies than an $*
SDESC
An ospfVirtIfTxRetransmit trap signifies than an
OSPF packet has been retransmitted on a virtual
interface.  All packets that may be retransmitted
are associated with an LSDB entry.  The LS
type, LS ID, and Router ID are used to identify
the LSDB entry.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
  5: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  6: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  7: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfOriginateLsa .1.3.6.1.2.1.14.16.2.12 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfOriginateLsa trap signifies that a new $*
SDESC
An ospfOriginateLsa trap signifies that a new
LSA has been originated by this router.  This
trap should not be invoked for simple refreshes
of LSAs (which happens every 30 minutes), but
instead will only be invoked when an LSA is
(re)originated due to a topology change.
Additionally, this trap does not include LSAs that
are being flushed because they have reached
MaxAge.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfLsdbAreaId
     Syntax="IPADDR"
     Descr="The 32-bit identifier of the area from which
          the LSA was received."
  3: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  4: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  5: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfMaxAgeLsa .1.3.6.1.2.1.14.16.2.13 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfMaxAgeLsa trap signifies that one of $*
SDESC
An ospfMaxAgeLsa trap signifies that one of
the LSAs in the router's link state database has
aged to MaxAge.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfLsdbAreaId
     Syntax="IPADDR"
     Descr="The 32-bit identifier of the area from which
          the LSA was received."
  3: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  4: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  5: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfLsdbOverflow .1.3.6.1.2.1.14.16.2.14 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfLsdbOverflow trap signifies that the $*
SDESC
An ospfLsdbOverflow trap signifies that the
number of LSAs in the router's link state
database has exceeded ospfExtLsdbLimit.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfExtLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
          AS-external LSAs entries that can be stored in the
          link state database.  If the value is -1, then
          there is no limit.

          When the number of non-default AS-external LSAs
          in a router's link state database reaches
          ospfExtLsdbLimit, the router enters
          overflow state.  The router never holds more than
          ospfExtLsdbLimit non-default AS-external LSAs
          in its database.  OspfExtLsdbLimit MUST be set
          identically in all routers attached to the OSPF
          backbone and/or any regular OSPF area (i.e.,
          OSPF stub areas and NSSAs are excluded).

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile
          storage."
EDESC
#
#
#
EVENT ospfLsdbApproachingOverflow .1.3.6.1.2.1.14.16.2.15 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfLsdbApproachingOverflow trap signifies $*
SDESC
An ospfLsdbApproachingOverflow trap signifies
that the number of LSAs in the router's
link state database has exceeded ninety percent of
ospfExtLsdbLimit.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfExtLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
          AS-external LSAs entries that can be stored in the
          link state database.  If the value is -1, then
          there is no limit.

          When the number of non-default AS-external LSAs
          in a router's link state database reaches
          ospfExtLsdbLimit, the router enters
          overflow state.  The router never holds more than
          ospfExtLsdbLimit non-default AS-external LSAs
          in its database.  OspfExtLsdbLimit MUST be set
          identically in all routers attached to the OSPF
          backbone and/or any regular OSPF area (i.e.,
          OSPF stub areas and NSSAs are excluded).

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile
          storage."
EDESC
#
#
#
EVENT ospfIfStateChange .1.3.6.1.2.1.14.16.2.16 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfIfStateChange trap signifies that there $*
SDESC
An ospfIfStateChange trap signifies that there
has been a change in the state of a non-virtual
OSPF interface.  This trap should be generated
when the interface state regresses (e.g., goes
from Dr to Down) or progresses to a terminal
state (i.e., Point-to-Point, DR Other, Dr, or
Backup).
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfIfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
     Descr="The OSPF Interface State."
EDESC
#
#
#
EVENT ospfNssaTranslatorStatusChange .1.3.6.1.2.1.14.16.2.17 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfNssaTranslatorStatusChange trap indicates that $*
SDESC
An ospfNssaTranslatorStatusChange trap indicates that
there has been a change in the router's ability to
translate OSPF type-7 LSAs into OSPF type-5 LSAs.
This trap should be generated when the translator
status transitions from or to any defined status on
a per-area basis.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfAreaId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying an area.
          Area ID 0.0.0.0 is used for the OSPF backbone."
  3: ospfAreaNssaTranslatorState
     Syntax="INTEGER"
       1: enabled
       2: elected
       3: disabled
     Descr="Indicates if and how an NSSA border router is
          performing NSSA translation of type-7 LSAs into type-5
          LSAs.  When this object is set to enabled, the NSSA Border
          router's OspfAreaNssaExtTranslatorRole has been set to
          always.  When this object is set to elected, a candidate
          NSSA Border router is Translating type-7 LSAs into type-5.
          When this object is set to disabled, a candidate NSSA
          border router is NOT translating type-7 LSAs into type-5."
EDESC
#
#
#
EVENT ospfRestartStatusChange .1.3.6.1.2.1.14.16.2.18 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfRestartStatusChange trap signifies that $*
SDESC
An ospfRestartStatusChange trap signifies that
there has been a change in the graceful restart
state for the router.  This trap should be
generated when the router restart status
changes.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfRestartStatus
     Syntax="INTEGER"
       1: notRestarting
       2: plannedRestart
       3: unplannedRestart
     Descr="Current status of OSPF graceful restart."
  3: ospfRestartInterval
     Syntax="INTEGER32"
     Descr="Configured OSPF graceful restart timeout interval.

           This object is persistent and when written
           the entity SHOULD save the change to non-volatile
           storage."
  4: ospfRestartExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at a
          graceful restart.  If the value is 'none', no restart
          has yet been attempted.  If the value is 'inProgress',
          a restart attempt is currently underway."
EDESC
#
#
#
EVENT ospfNbrRestartHelperStatusChange .1.3.6.1.2.1.14.16.2.19 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfNbrRestartHelperStatusChange trap signifies that $*
SDESC
An ospfNbrRestartHelperStatusChange trap signifies that
there has been a change in the graceful restart
helper state for the neighbor.  This trap should be
generated when the neighbor restart helper status
transitions for a neighbor.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfNbrIpAddr
     Syntax="IPADDR"
     Descr="The IP address this neighbor is using in its
          IP source address.  Note that, on addressless
          links, this will not be 0.0.0.0 but the
          address of another of the neighbor's interfaces."
  3: ospfNbrAddressLessIndex
     Syntax="INTEGER32"
     Descr="On an interface having an IP address, zero.
          On addressless interfaces, the corresponding
          value of ifIndex in the Internet Standard MIB.
          On row creation, this can be derived from the
          instance."
  4: ospfNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer (represented as a type
          IpAddress) uniquely identifying the neighboring
          router in the Autonomous System."
  5: ospfNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
          as a graceful restart helper for the neighbor."
  6: ospfNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
          interval, if the router is acting as a restart
          helper for the neighbor."
  7: ospfNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
           as a graceful restart helper for the neighbor."
EDESC
#
#
#
EVENT ospfVirtNbrRestartHelperStatusChange .1.3.6.1.2.1.14.16.2.20 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfVirtNbrRestartHelperStatusChange trap signifies $*
SDESC
An ospfVirtNbrRestartHelperStatusChange trap signifies
that there has been a change in the graceful restart
helper state for the virtual neighbor.  This trap should
be generated when the virtual neighbor restart helper
status transitions for a virtual neighbor.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtNbrArea
     Syntax="IPADDR"
     Descr="The Transit Area Identifier."
  3: ospfVirtNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          neighboring router in the Autonomous System."
  4: ospfVirtNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
          as a graceful restart helper for the neighbor."
  5: ospfVirtNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
          interval, if the router is acting as a restart
          helper for the neighbor."
  6: ospfVirtNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
           as a graceful restart helper for the neighbor."
EDESC
#
#
#
#
MIB: SIP-TC-MIB (file:./rfc4780-sip-tc.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SIP-UA-MIB (file:./rfc4780-sip-ua.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPSEC-SPD-MIB (file:./rfc4807-ipsec-spd.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-MAU-MIB (file:./rfc4836-iana-mau.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MAU-MIB (file:./rfc4836-mau.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT rpMauJabberTrap .1.3.6.1.2.1.26.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent whenever a managed repeater $*
SDESC
This trap is sent whenever a managed repeater
MAU enters the jabber state.
The agent MUST throttle the generation of
consecutive rpMauJabberTraps so that there is at
least a five-second gap between them.
REFERENCE   [IEEE802.3], 30.5.1.3.1, nJabber notification.
Variables:
  1: rpMauJabberState
     Syntax="INTEGER"
       1: other
       2: unknown
       3: noJabber
       4: jabbering
     Descr="The value other(1) is returned if the jabber
                    state is not 2, 3, or 4.  The agent MUST always
                    return other(1) for MAU type dot3MauTypeAUI.

                    The value unknown(2) is returned when the MAU's
                    true state is unknown; for example, when it is
                    being initialized.

                    If the MAU is not jabbering the agent returns
                    noJabber(3).  This is the 'normal' state.

                    If the MAU is in jabber state the agent returns
                    the jabbering(4) value."
EDESC
#
#
#
EVENT ifMauJabberTrap .1.3.6.1.2.1.26.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This trap is sent whenever a managed interface $*
SDESC
This trap is sent whenever a managed interface
MAU enters the jabber state.
The agent MUST throttle the generation of
consecutive ifMauJabberTraps so that there is at
least a five-second gap between them.
REFERENCE   [IEEE802.3], 30.5.1.3.1, nJabber notification.
Variables:
  1: ifMauJabberState
     Syntax="INTEGER"
       1: other
       2: unknown
       3: noJabber
       4: jabbering
     Descr="The value other(1) is returned if the jabber
                    state is not 2, 3, or 4.  The agent MUST always
                    return other(1) for MAU type dot3MauTypeAUI.

                    The value unknown(2) is returned when the MAU's
                    true state is unknown; for example, when it is
                    being initialized.

                    If the MAU is not jabbering the agent returns
                    noJabber(3).  This is the 'normal' state.

                    If the MAU is in jabber state the agent returns
                    the jabbering(4) value."
EDESC
#
#
#
#
MIB: DOT3-OAM-MIB (file:./rfc4878-dot3-oam.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot3OamThresholdEvent .1.3.6.1.2.1.158.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A dot3OamThresholdEvent notification is sent when a local or $*
SDESC
A dot3OamThresholdEvent notification is sent when a local or
remote threshold crossing event is detected.  A local
threshold crossing event is detected by the local entity,
while a remote threshold crossing event is detected by the
reception of an Ethernet OAM Event Notification OAMPDU
that indicates a threshold event.
This notification should not be sent more than once per
second.
The OAM entity can be derived from extracting the ifIndex from
the variable bindings.  The objects in the notification
correspond to the values in a row instance in the
dot3OamEventLogTable.
The management entity should periodically check
dot3OamEventLogTable to detect any missed events.
Variables:
  1: dot3OamEventLogTimestamp
     Syntax="TICKS"
     Descr="The value of sysUpTime at the time of the logged event.  For
        locally generated events, the time of the event can be
        accurately retrieved from sysUpTime.  For remotely generated
        events, the time of the event is indicated by the reception of
        the Event Notification OAMPDU indicating that the event
        occurred on the peer.  A system may attempt to adjust the
        timestamp value to more accurately reflect the time of the
        event at the peer OAM entity by using other information, such
        as that found in the timestamp found of the Event Notification
        TLVs, which provides an indication of the relative time
        between events at the peer entity.  "
  2: dot3OamEventLogOui
     Syntax="OCTETSTR"
     Descr="The OUI of the entity defining the object type.  All IEEE
        802.3 defined events (as appearing in [802.3ah] except for the
        Organizationally Unique Event TLVs) use the IEEE 802.3 OUI of
        0x0180C2.  Organizations defining their own Event Notification
        TLVs include their OUI in the Event Notification TLV that
        gets reflected here.  "
  3: dot3OamEventLogType
     Syntax="UNSIGNED32"
     Descr="The type of event that generated this entry in the event log.
        When the OUI is the IEEE 802.3 OUI of 0x0180C2, the following
        event types are defined:
        erroredSymbolEvent(1),
        erroredFramePeriodEvent(2),
        erroredFrameEvent(3),
        erroredFrameSecondsEvent(4),
        linkFault(256),
        dyingGaspEvent(257),
        criticalLinkEvent(258)
        The first four are considered threshold crossing events, as
        they are generated when a metric exceeds a given value within
        a specified window.  The other three are not threshold
        crossing events.

        When the OUI is not 71874 (0x0180C2 in hex), then some other
        organization has defined the event space.  If event subtyping
        is known to the implementation, it may be reflected here.
        Otherwise, this value should return all F's (2^32 - 1).
        "
  4: dot3OamEventLogLocation
     Syntax="INTEGER"
       1: local
       2: remote
     Descr="Whether this event occurred locally (local(1)), or was
        received from the OAM peer via Ethernet OAM (remote(2)).
        "
  5: dot3OamEventLogWindowHi
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventWindowHi and dot3OamEventWindowLo, form
        an unsigned 64-bit integer yielding the window over which the
        value was measured for the threshold crossing event (for
        example, 5, when 11 occurrences happened in 5 seconds while
        the threshold was 10).  The two objects are combined as:
        dot3OamEventLogWindow = ((2^32) * dot3OamEventLogWindowHi)
        + dot3OamEventLogWindowLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  6: dot3OamEventLogWindowLo
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventWindowHi and dot3OamEventWindowLo form an
        unsigned 64-bit integer yielding the window over which the
        value was measured for the threshold crossing event (for
        example, 5, when 11 occurrences happened in 5 seconds while
        the threshold was 10).  The two objects are combined as:

        dot3OamEventLogWindow = ((2^32) * dot3OamEventLogWindowHi)
        + dot3OamEventLogWindowLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  7: dot3OamEventLogThresholdHi
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventThresholdHi and dot3OamEventThresholdLo
        form an unsigned 64-bit integer yielding the value that was
        crossed for the threshold crossing event (for example, 10,
        when 11 occurrences happened in 5 seconds while the threshold
        was 10).  The two objects are combined as:

        dot3OamEventLogThreshold = ((2^32) * dot3OamEventLogThresholdHi)
        + dot3OamEventLogThresholdLo

        Otherwise, this value is returned as all F's (2^32 -1) and
        adds no useful information.
        "
  8: dot3OamEventLogThresholdLo
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventThresholdHi and dot3OamEventThresholdLo
        form an unsigned 64-bit integer yielding the value that was
        crossed for the threshold crossing event (for example, 10,
        when 11 occurrences happened in 5 seconds while the threshold
        was 10).  The two objects are combined as:

        dot3OamEventLogThreshold = ((2^32) * dot3OamEventLogThresholdHi)
        + dot3OamEventLogThresholdLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  9: dot3OamEventLogValue
     Syntax="COUNTER64"
     Descr="If the event represents a threshold crossing event, this
        value indicates the value of the parameter within the given
        window that generated this event (for example, 11, when 11
        occurrences happened in 5 seconds while the threshold was 10).

        Otherwise, this value is returned as all F's
        (2^64 - 1) and adds no useful information.
        "
 10: dot3OamEventLogRunningTotal
     Syntax="COUNTER64"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        this event has happened since the last reset (for example,
        3253, when 3253 symbol errors have occurred since the last
        reset, which has resulted in 51 symbol error threshold
        crossing events since the last reset).
        "
 11: dot3OamEventLogEventTotal
     Syntax="UNSIGNED32"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        one or more of these occurrences have resulted in an Event
        Notification (for example, 51 when 3253 symbol errors have
        occurred since the last reset, which has resulted in 51 symbol
        error threshold crossing events since the last reset).
        "
EDESC
#
#
#
EVENT dot3OamNonThresholdEvent .1.3.6.1.2.1.158.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A dot3OamNonThresholdEvent notification is sent when a local $*
SDESC
A dot3OamNonThresholdEvent notification is sent when a local
or remote non-threshold crossing event is detected.  A local
event is detected by the local entity, while a remote event is
detected by the reception of an Ethernet OAM Event
Notification OAMPDU that indicates a non-threshold crossing
event.
This notification should not be sent more than once per
second.
The OAM entity can be derived from extracting the ifIndex from
the variable bindings.  The objects in the notification
correspond to the values in a row instance of the
dot3OamEventLogTable.
The management entity should periodically check
dot3OamEventLogTable to detect any missed events.
Variables:
  1: dot3OamEventLogTimestamp
     Syntax="TICKS"
     Descr="The value of sysUpTime at the time of the logged event.  For
        locally generated events, the time of the event can be
        accurately retrieved from sysUpTime.  For remotely generated
        events, the time of the event is indicated by the reception of
        the Event Notification OAMPDU indicating that the event
        occurred on the peer.  A system may attempt to adjust the
        timestamp value to more accurately reflect the time of the
        event at the peer OAM entity by using other information, such
        as that found in the timestamp found of the Event Notification
        TLVs, which provides an indication of the relative time
        between events at the peer entity.  "
  2: dot3OamEventLogOui
     Syntax="OCTETSTR"
     Descr="The OUI of the entity defining the object type.  All IEEE
        802.3 defined events (as appearing in [802.3ah] except for the
        Organizationally Unique Event TLVs) use the IEEE 802.3 OUI of
        0x0180C2.  Organizations defining their own Event Notification
        TLVs include their OUI in the Event Notification TLV that
        gets reflected here.  "
  3: dot3OamEventLogType
     Syntax="UNSIGNED32"
     Descr="The type of event that generated this entry in the event log.
        When the OUI is the IEEE 802.3 OUI of 0x0180C2, the following
        event types are defined:
        erroredSymbolEvent(1),
        erroredFramePeriodEvent(2),
        erroredFrameEvent(3),
        erroredFrameSecondsEvent(4),
        linkFault(256),
        dyingGaspEvent(257),
        criticalLinkEvent(258)
        The first four are considered threshold crossing events, as
        they are generated when a metric exceeds a given value within
        a specified window.  The other three are not threshold
        crossing events.

        When the OUI is not 71874 (0x0180C2 in hex), then some other
        organization has defined the event space.  If event subtyping
        is known to the implementation, it may be reflected here.
        Otherwise, this value should return all F's (2^32 - 1).
        "
  4: dot3OamEventLogLocation
     Syntax="INTEGER"
       1: local
       2: remote
     Descr="Whether this event occurred locally (local(1)), or was
        received from the OAM peer via Ethernet OAM (remote(2)).
        "
  5: dot3OamEventLogEventTotal
     Syntax="UNSIGNED32"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        one or more of these occurrences have resulted in an Event
        Notification (for example, 51 when 3253 symbol errors have
        occurred since the last reset, which has resulted in 51 symbol
        error threshold crossing events since the last reset).
        "
EDESC
#
#
#
#
MIB: T11-FC-FABRIC-CONFIG-SERVER-MIB (file:./rfc4935-t11-fc-fabric-config-server.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11FcsRqRejectNotification .1.3.6.1.2.1.162.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever the Fabric $*
SDESC
This notification is generated whenever the Fabric
Configuration Server on a switch (indicated by the
value of t11FamLocalSwitchWwn) rejects a Fabric
Configuration Server request.
The Fabric Configuration Server should update the
t11FcsRejectReasonCode, t11FcsRejectReasonCodeExp
and t11FcsRejectReasonVendorCode objects with the
corresponding reason code, explanation and vendor
specific code before sending the notification.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FcsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="This object contains the reason code corresponding
        to the latest Fabric Configuration Server request
        rejected by the local system."
  3: t11FcsRejectReasonCodeExp
     Syntax="INTEGER"
       1: noAdditionalExplanation
       10: ieInfoListNotAvailable
       11: portListNotAvailable
       12: portTypeNotAvailable
       13: phyPortNumNotAvailable
       14: attPortNameListNotAvailable
       15: portStateNotAvailable
       16: unableToRegIELogName
       17: platformNameNoExist
       18: platformNameAlreadyExists
       19: platformNodeNameNoExists
       2: invNameIdForIEOrPort
       20: platformNodeNameAlreadyExists
       21: resourceUnavailable
       22: noEntriesInLunMap
       23: invalidDeviceNameLength
       24: multipleAttributes
       25: invalidAttribBlockLength
       26: attributesMissing
       3: ieListNotAvailable
       4: ieTypeNotAvailable
       5: domainIdNotAvailable
       6: mgmtIdNotAvailable
       7: fabNameNotAvailable
       8: ielogNameNotAvailable
       9: mgmtAddrListNotAvailable
     Descr="When the corresponding instance of
        t11FcsRejectReasonCode has the value: 'unable to
        perform command request', this object contains the
        corresponding reason code explanation."
  4: t11FcsRejectReasonVendorCode
     Syntax="OCTETSTR"
     Descr="A registration reject vendor-specific code.  This
        object contains the vendor-specific code of the most
        recently rejected Fabric Configuration Server
        Registration request for the particular port on
        the particular Fabric."
EDESC
#
#
#
EVENT t11FcsDiscoveryCompleteNotify .1.3.6.1.2.1.162.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated by the Fabric $*
SDESC
This notification is generated by the Fabric
Configuration Server on the completion of the
discovery of Fabrics in the range that has
t11FcsFabricDiscoveryRangeLow at its low end.
Variables:
  1: t11FcsFabricDiscoveryRangeLow
     Syntax="UNSIGNED32"
     Descr="The discovery by a particular switch operates
        within all existing Fabrics that have a Fabric
        Index within a specific inclusive range.  This
        object specifies the minimum Fabric Index value
        within that range.  This value just represents
        the lower end of the range and does not necessarily
        represent any existing Fabric."
EDESC
#
#
#
EVENT t11FcsMgmtAddrChangeNotify .1.3.6.1.2.1.162.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated by the Fabric $*
SDESC
This notification is generated by the Fabric
Configuration Server whenever the management
address of an IE changes, i.e., whenever an
entry in the t11FcsMgmtAddrListTable changes.
Variables:
  1: t11FcsMgmtAddrChangeFabricIndex
     Syntax="UNSIGNED32"
     Descr="The index value that identifies the Fabric on which
        a management address change has been detected."
  2: t11FcsMgmtAddrChangeIeName
     Syntax="OCTETSTR"
     Descr="The IE for which a management address change has been
        detected."
EDESC
#
#
#
#
MIB: T11-FC-ZONE-SERVER-MIB (file:./rfc4936-t11-fc-zone-server.mib) converted on Fri Mar 18 23:13:08 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11ZsRequestRejectNotify .1.3.6.1.2.1.160.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever a Zone Server $*
SDESC
This notification is generated whenever a Zone Server
(indicated by the value of t11FamLocalSwitchWwn) rejects
a request.
The value of t11ZsRejectCtCommandString indicates the
rejected request, and the values of t11ZsRejectReasonCode,
t11ZsRejectReasonCodeExp and t11ZsRejectReasonVendorCode
indicate the reason for the rejection.  The value of
t11ZsRequestClient indicates the source of the request.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11ZsRejectRequestSource
     Syntax="OCTETSTR"
     Descr="The WWN that was the source of the CT_IU
           contained in the corresponding instance of
           t11ZsRejectCtCommandString."
  3: t11ZsRejectCtCommandString
     Syntax="OCTETSTR"
     Descr="The binary content of the Zone Server request,
           formatted as an octet string (in network byte order)
           containing the Common Transport Information Unit
           (CT_IU), as described in Table 2 of FC-GS-5 (including
           the preamble), which was most recently rejected by the
           Fabric Configuration Server for this Fabric.

           This object contains the zero-length string
           if and when the CT-IU's content is unavailable.

           When the length of this object is 255 octets, it
           contains the first 255 octets of the CT-IU (in
           network byte order)."
  4: t11ZsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="The reason code corresponding to the most recent
           rejection of a request by the Zone Server for
           this Fabric."
  5: t11ZsRejectReasonCodeExp
     Syntax="INTEGER"
       1: other
       10: deactivateZoneSetFailed
       11: reqNotSupported
       12: capabilityNotSupported
       13: zoneMemberIDTypeNotSupp
       14: invalidZoneSetDefinition
       15: enhancedZoningCmdsNotSupported
       16: zoneSetExists
       17: zoneExists
       18: aliasExists
       19: zoneSetUnknown
       2: noAdditionalExplanation
       20: zoneUnknown
       21: aliasUnknown
       22: zoneAliasTypeUnknown
       23: unableEnhancedMode
       24: basicZoningCmdsNotSupported
       25: zoneAttribObjectExists
       26: zoneAttribObjectUnknown
       27: requestInProcess
       28: cmitInProcess
       29: hardEnforcementFailed
       3: zonesNotSupported
       30: unresolvedReferences
       31: consistencyChecksFailed
       4: zoneSetNameUnknown
       5: noZoneSetActive
       6: zoneNameUnknown
       7: zoneStateUnknown
       8: incorrectPayloadLen
       9: tooLargeZoneSet
     Descr="When the value of t11ZsRejectReasonCode is
           'Unable to perform command request', this
           object contains the corresponding reason code
           explanation."
  6: t11ZsRejectReasonVendorCode
     Syntax="OCTETSTR"
     Descr="When the value of t11ZsRejectReasonCode is
           'Vendor Specific Error', this object contains
           the corresponding vendor-specific reason code."
EDESC
#
#
#
EVENT t11ZsMergeFailureNotify .1.3.6.1.2.1.160.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a Zone merge $*
SDESC
This notification indicates that a Zone merge
failure has occurred on the Fabric indicated by the
value of t11ZsFabricIndex, on the interface
indicated by the value of ifIndex.
If multiple Virtual Fabrics are configured on an
interface, and all have a Zone merge failure
at the same time, then just one notification is
generated and t11ZsFabricIndex has the value 4096.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: t11ZsFabricIndex
     Syntax="UNSIGNED32"
     Descr="This object contains either a value of
           T11FabricIndex to identify the Fabric on which
           some occurrence has caused a notification to be
           generated, or it has the value 4096 to indicate
           all applicable Fabrics."
EDESC
#
#
#
EVENT t11ZsMergeSuccessNotify .1.3.6.1.2.1.160.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that a successful Zone $*
SDESC
This notification indicates that a successful Zone
merge has occurred on the Fabric indicated by the
value of t11ZsFabricIndex, on the interface
indicated by the value of ifIndex.
If multiple Virtual Fabrics are configured on an
interface, and all have a successful Zone Merge
at the same time, then just one notification is
generated and t11ZsFabricIndex has the value 4096.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: t11ZsFabricIndex
     Syntax="UNSIGNED32"
     Descr="This object contains either a value of
           T11FabricIndex to identify the Fabric on which
           some occurrence has caused a notification to be
           generated, or it has the value 4096 to indicate
           all applicable Fabrics."
EDESC
#
#
#
EVENT t11ZsDefZoneChangeNotify .1.3.6.1.2.1.160.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification indicates that the $*
SDESC
This notification indicates that the
value of a Default Zone Setting has changed.
The value of t11ZsServerDefaultZoneSetting
contains the value after the change.
Variables:
  1: t11ZsServerDefaultZoneSetting
     Syntax="INTEGER"
       1: permit
       2: deny
     Descr="This object controls the Enhanced Zoning flag that
           governs the behavior of the Default Zone on this Fabric.

           If this object is set to 'permit', then the members of
           the Default Zone on this Fabric can communicate with
           each other.

           If this object is set to 'deny', then the members of the
           Default Zone on this Fabric cannot communicate with each
           other."
EDESC
#
#
#
EVENT t11ZsActivateNotify .1.3.6.1.2.1.160.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated whenever a switch $*
SDESC
This notification is generated whenever a switch
(indicated by the value of t11FamLocalSwitchWwn)
activates/deactivates a Zone Set on a Fabric.
The t11ZsActivateResult object denotes the outcome
of the activation/deactivation.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11ZsActivateResult
     Syntax="INTEGER"
       1: activateSuccess
       2: activateFailure
       3: deactivateSuccess
       4: deactivateFailure
       5: inProgress
       6: none
     Descr="This object indicates the outcome of the most recent
           activation/deactivation using this entry.

           When the value of this object is 'inProgress', the
           values of the corresponding instances of
           t11ZsActivateRequest and t11ZsActivateDeactivate
           cannot be modified.

           The value 'none' indicates activation/deactivation
           has not been attempted since the last restart of
           the management system."
EDESC
#
#
#
#
MIB: PIM-STD-MIB (file:./rfc5060-pim-std.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pimNeighborLoss .1.3.6.1.2.1.157.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A pimNeighborLoss notification signifies the loss of an $*
SDESC
A pimNeighborLoss notification signifies the loss of an
adjacency with a neighbor.  This notification should be
generated when the neighbor timer expires, and the router
has no other neighbors on the same interface with the same
IP version and a lower IP address than itself.
This notification is generated whenever the counter
pimNeighborLossCount is incremented, subject
to the rate limit specified by
pimNeighborLossNotificationPeriod.
REFERENCE RFC 4601 section 4.3.2
Variables:
  1: pimNeighborUpTime
     Syntax="TICKS"
     Descr="The time since this PIM neighbor (last) became a neighbor
            of the local router."
EDESC
#
#
#
#
MIB: LANGTAG-TC-MIB (file:./rfc5131-langtag-tc.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPMCAST-MIB (file:./rfc5132-ipmcast.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PIM-BSR-MIB (file:./rfc5240-pim-bsr.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pimBsrElectedBSRLostElection .1.3.6.1.2.1.172.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA A pimBsrElectedBSRLostElection notification should be $*
SDESC
A pimBsrElectedBSRLostElection notification should be
generated when current E-BSR lost election to a new
Candidate-BSR.  Only an E-BSR should generate this
notification.
This notification is generated when
pimBsrCandidateBSRElectedBSR becomes FALSE.
REFERENCE RFC 5059, section 3.1
Variables:
  1: pimBsrElectedBSRAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="The address type of the elected BSR."
  2: pimBsrElectedBSRAddress
     Syntax="OCTETSTR"
     Descr="The (unicast) address of the elected BSR.  The
           InetAddressType is given by the
           pimBsrElectedBSRAddressType object."
  3: pimBsrElectedBSRPriority
     Syntax="UNSIGNED32"
     Descr="The priority value for the elected BSR for this address
           type.  Numerically higher values for this object indicate
           higher priorities."
EDESC
#
#
#
EVENT pimBsrCandidateBSRWinElection .1.3.6.1.2.1.172.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA A pimBsrCandidateBSRWinElection notification should be $*
SDESC
A pimBsrCandidateBSRWinElection notification should be
generated when a C-BSR wins BSR Election.  Only an
E-BSR should generate this notification.
This notification is generated when
pimBsrCandidateBSRElectedBSR becomes TRUE.
REFERENCE RFC 5059, section 3.1
Variables:
  1: pimBsrCandidateBSRElectedBSR
     Syntax="INTEGER"
       1: true
       2: false
     Descr="Whether the local router is the elected BSR for this
           zone."
EDESC
#
#
#
#
MIB: SYSLOG-TC-MIB (file:./rfc5427-syslog-tc.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MGMD-STD-MIB (file:./rfc5519-mgmd-std.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-TC-STD-MIB (file:./rfc5542-pw-tc-std.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-PWE3-MIB (file:./rfc5601-iana-pwe3.mib) converted on Fri Mar 18 23:13:09 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-STD-MIB (file:./rfc5601-pw-std.mib) converted on Fri Mar 18 23:13:10 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pwDown .1.3.6.1.2.1.10.246.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the pwOperStatus $*
SDESC
This notification is generated when the pwOperStatus
object for one or more contiguous entries in the pwTable are
about to enter the down(2) or lowerLayerDown(6) state from
any other state, except for transition from the
notPresent(5) state.  For the purpose of deciding when
these notifications occur, the lowerLayerDown(6) state
and the down(2) state are considered to be equivalent;
i.e., there is no notification on transition from
lowerLayerDown(6) into down(2), and there is a trap on
transition from any other state except down(2) (and
notPresent) into lowerLayerDown(6).
The included values of pwOperStatus MUST each be equal to
down(2) or lowerLayerDown(6).  The two instances of
pwOperStatus in this notification indicate the range of
indexes that are affected.  Note that all the indexes of
the two ends of the range can be derived from the
instance identifiers of these two objects.  For cases
where a contiguous range of cross-connects have
transitioned into the down(2) and lowerLayerDown(6) states
at roughly the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in an
effort to minimize the emission of a large number of
notifications.  If a notification has to be issued for
just a single cross-connect entry, then the instance
identifier (and values) of the two pwOperStatus objects
MUST be identical.
Variables:
  1: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
  2: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
EDESC
#
#
#
EVENT pwUp .1.3.6.1.2.1.10.246.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the pwOperStatus $*
SDESC
This notification is generated when the pwOperStatus
object for one or more contiguous entries in the pwTable are
about to enter the up(1) state from some other state
except the notPresent(5) state and given that the pwDown
notification been issued for these entries.  The included
values of pwOperStatus MUST both be set equal to this
new state (i.e., up(1)).  The two instances of pwOperStatus
in this notification indicate the range of indexes that
are affected.  Note that all the indexes of the two ends
of the range can be derived from the instance identifiers
of these two objects.  For cases where a contiguous range
of cross-connects have transitioned into the up(1) state
at roughly the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in an
effort to minimize the emission of a large number of
notifications.  If a notification has to be issued for
just a single cross-connect entry, then the instance
identifier (and values) of the two pwOperStatus objects
MUST be identical.
Variables:
  1: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
  2: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
EDESC
#
#
#
EVENT pwDeleted .1.3.6.1.2.1.10.246.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the PW has been $*
SDESC
This notification is generated when the PW has been
deleted, i.e., when the pwRowStatus has been set to
destroy(6) or the PW has been deleted by a non-MIB
application or due to an auto-discovery process.

Variables:
  1: pwType
     Syntax="INTEGER"
       0: other
       1: frameRelayDlciMartiniMode
       10: atmCellNto1Vpc
       11: ipLayer2Transport
       12: atmCell1to1Vcc
       13: atmCell1to1Vpc
       14: atmAal5PduVcc
       15: frameRelayPortMode
       16: cep
       17: e1Satop
       18: t1Satop
       19: e3Satop
       2: atmAal5SduVcc
       20: t3Satop
       21: basicCesPsn
       22: basicTdmIp
       23: tdmCasCesPsn
       24: tdmCasTdmIp
       25: frDlci
       3: atmTransparent
       32767: wildcard
       4: ethernetTagged
       5: ethernet
       6: hdlc
       7: ppp
       8: cem
       9: atmCellNto1Vcc
     Descr="This value indicates the emulated service to be carried over
         this PW.
        "
  2: pwID
     Syntax="UNSIGNED32"
     Descr="Pseudowire identifier.

         If the pwOwner object is 'pwIdFecSignaling' or
         'l2tpControlProtocol', then this object is signaled in the
         outgoing PW ID field within the 'Virtual Circuit FEC
         Element'.  For other values of pwOwner, this object is not
         signaled and it MAY be set to zero.

         For implementations that support the pwIndexMappingTable,
         a non-zero value is RECOMMENDED, even if this
         identifier is not signaled.  This is so that reverse
         mappings can be provided by pwIndexMappingTable and
         pwPeerMappingTable.  It is therefore RECOMMENDED that the
         value of this pwID be unique (or if pwPeerAddrType is not
         'unknown', at least [pwType, pwID, pwPeerAddrType, pwPeerAddr]
         is unique.)"
  3: pwPeerAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Denotes the address type of the peer node.  It should be
          set to 'unknown' if PE/PW maintenance protocol is not used
          and the address is unknown."
  4: pwPeerAddr
     Syntax="OCTETSTR"
     Descr="This object contains the value of the peer node address
          of the PW/PE maintenance protocol entity.  This object
          SHOULD contain a value of all zeroes if not applicable
          (pwPeerAddrType is 'unknown')."
EDESC
#
#
#
#
MIB: PW-MPLS-STD-MIB (file:./rfc5602-pw-mpls-std.mib) converted on Fri Mar 18 23:13:10 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-ENET-STD-MIB (file:./rfc5603-pw-enet-std.mib) converted on Fri Mar 18 23:13:10 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPFV3-MIB (file:./rfc5643-ospfv3.mib) converted on Fri Mar 18 23:13:10 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ospfv3VirtIfStateChange .1.3.6.1.2.1.191.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtIfStateChange notification signifies that $*
SDESC
An ospfv3VirtIfStateChange notification signifies that
there has been a change in the state of an OSPFv3 virtual
interface.
This notification should be generated when the interface
state regresses (e.g., goes from Point-to-Point to Down)
or progresses to a terminal state (i.e., Point-to-Point).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
EDESC
#
#
#
EVENT ospfv3NbrStateChange .1.3.6.1.2.1.191.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3NbrStateChange notification signifies that $*
SDESC
An ospfv3NbrStateChange notification signifies that
there has been a change in the state of a
non-virtual OSPFv3 neighbor.  This notification should be
generated when the neighbor state regresses
(e.g., goes from Attempt or Full to 1-Way or
Down) or progresses to a terminal state (e.g.,
2-Way or Full).  When a neighbor transitions
from or to Full on non-broadcast multi-access
and broadcast networks, the notification should be
generated by the Designated Router.  A Designated
Router transitioning to Down will be noted by
ospfIfStateChange.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3NbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the relationship with this
        neighbor."
EDESC
#
#
#
EVENT ospfv3VirtNbrStateChange .1.3.6.1.2.1.191.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtNbrStateChange notification signifies $*
SDESC
An ospfv3VirtNbrStateChange notification signifies
that there has been a change in the state of an OSPFv3
virtual neighbor.  This notification should be generated
when the neighbor state regresses (e.g., goes
from Attempt or Full to 1-Way or Down) or
progresses to a terminal state (e.g., Full).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the virtual neighbor relationship."
EDESC
#
#
#
EVENT ospfv3IfConfigError .1.3.6.1.2.1.191.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3IfConfigError notification signifies that a $*
SDESC
An ospfv3IfConfigError notification signifies that a
packet has been received on a non-virtual
interface from a router whose configuration
parameters conflict with this router's
configuration parameters.  Note that the event
optionMismatch should cause a notification only if it
prevents an adjacency from forming.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
  3: ospfv3PacketSrc
     Syntax="OCTETSTR"
     Descr="The IPv6 address of an inbound packet that cannot
    be identified by a neighbor instance.

    Only IPv6 addresses without zone index are expected."
  4: ospfv3ConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: helloIntervalMismatch
       6: deadIntervalMismatch
       7: optionMismatch
       8: mtuMismatch
       9: duplicateRouterId
     Descr="Potential types of configuration conflicts.
    Used by the ospfv3ConfigError and
    ospfv3ConfigVirtError notifications."
  5: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3VirtIfConfigError .1.3.6.1.2.1.191.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtIfConfigError notification signifies that a $*
SDESC
An ospfv3VirtIfConfigError notification signifies that a
packet has been received on a virtual interface
from a router whose configuration parameters
conflict with this router's configuration
parameters.  Note that the event optionMismatch
should cause a notification only if it prevents an
adjacency from forming.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
  3: ospfv3ConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: helloIntervalMismatch
       6: deadIntervalMismatch
       7: optionMismatch
       8: mtuMismatch
       9: duplicateRouterId
     Descr="Potential types of configuration conflicts.
    Used by the ospfv3ConfigError and
    ospfv3ConfigVirtError notifications."
  4: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3IfRxBadPacket .1.3.6.1.2.1.191.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3IfRxBadPacket notification signifies that an $*
SDESC
An ospfv3IfRxBadPacket notification signifies that an
OSPFv3 packet that cannot be parsed has been received on a
non-virtual interface.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
  3: ospfv3PacketSrc
     Syntax="OCTETSTR"
     Descr="The IPv6 address of an inbound packet that cannot
    be identified by a neighbor instance.

    Only IPv6 addresses without zone index are expected."
  4: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3VirtIfRxBadPacket .1.3.6.1.2.1.191.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtIfRxBadPacket notification signifies $*
SDESC
An ospfv3VirtIfRxBadPacket notification signifies
that an OSPFv3 packet that cannot be parsed has been
received on a virtual interface.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
  3: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3LsdbOverflow .1.3.6.1.2.1.191.0.8 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3LsdbOverflow notification signifies that the $*
SDESC
An ospfv3LsdbOverflow notification signifies that the
number of LSAs in the router's link state
database has exceeded ospfv3ExtAreaLsdbLimit.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3ExtAreaLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
        AS-external-LSA entries that can be stored in the
        link state database.  If the value is -1, then
        there is no limit.

        When the number of non-default AS-external-LSAs
        in a router's link state database reaches
        ospfv3ExtAreaLsdbLimit, the router enters Overflow
        state.  The router never holds more than
        ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs
        in its database.  ospfv3ExtAreaLsdbLimit MUST be set
        identically in all routers attached to the OSPFv3
        backbone and/or any regular OSPFv3 area (i.e.,
        OSPFv3 stub areas and not-so-stubby-areas (NSSAs)
        are excluded).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
EDESC
#
#
#
EVENT ospfv3LsdbApproachingOverflow .1.3.6.1.2.1.191.0.9 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3LsdbApproachingOverflow notification signifies $*
SDESC
An ospfv3LsdbApproachingOverflow notification signifies
that the number of LSAs in the router's
link state database has exceeded ninety percent of
ospfv3ExtAreaLsdbLimit.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3ExtAreaLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
        AS-external-LSA entries that can be stored in the
        link state database.  If the value is -1, then
        there is no limit.

        When the number of non-default AS-external-LSAs
        in a router's link state database reaches
        ospfv3ExtAreaLsdbLimit, the router enters Overflow
        state.  The router never holds more than
        ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs
        in its database.  ospfv3ExtAreaLsdbLimit MUST be set
        identically in all routers attached to the OSPFv3
        backbone and/or any regular OSPFv3 area (i.e.,
        OSPFv3 stub areas and not-so-stubby-areas (NSSAs)
        are excluded).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
EDESC
#
#
#
EVENT ospfv3IfStateChange .1.3.6.1.2.1.191.0.10 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3IfStateChange notification signifies that there $*
SDESC
An ospfv3IfStateChange notification signifies that there
has been a change in the state of a non-virtual
OSPFv3 interface.  This notification should be generated
when the interface state regresses (e.g., goes
from DR to Down) or progresses to a terminal
state (i.e., Point-to-Point, DR Other, DR, or
Backup).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
EDESC
#
#
#
EVENT ospfv3NssaTranslatorStatusChange .1.3.6.1.2.1.191.0.11 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3NssaTranslatorStatusChange notification $*
SDESC
An ospfv3NssaTranslatorStatusChange notification
indicates that there has been a change in the router's
ability to translate OSPFv3 NSSA LSAs into OSPFv3 External
LSAs.  This notification should be generated when the
Translator Status transitions from or to any defined
status on a per-area basis.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3AreaNssaTranslatorState
     Syntax="INTEGER"
       1: enabled
       2: elected
       3: disabled
     Descr="Indicates if and how an NSSA border router is
         performing NSSA translation of NSSA-LSAs into
         AS-External-LSAs.  When this object is set to
         'enabled', the NSSA border router's
         ospfv3AreaNssaTranslatorRole has been set to 'always'.
         When this object is set to 'elected', a candidate
         NSSA border router is translating NSSA-LSAs into
         AS-External-LSAs.  When this object is set to
         'disabled', a candidate NSSA Border router is NOT
         translating NSSA-LSAs into AS-External-LSAs."
EDESC
#
#
#
EVENT ospfv3RestartStatusChange .1.3.6.1.2.1.191.0.12 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3RestartStatusChange notification signifies that $*
SDESC
An ospfv3RestartStatusChange notification signifies that
there has been a change in the graceful restart
state for the router.  This notification should be
generated when the router restart status
changes.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3RestartStatus
     Syntax="INTEGER"
       1: notRestarting
       2: plannedRestart
       3: unplannedRestart
     Descr="The current status of OSPF graceful restart capability."
  3: ospfv3RestartInterval
     Syntax="UNSIGNED32"
     Descr="Configured OSPF graceful restart timeout interval.

       This object is persistent, and when written, the
       entity SHOULD save the change to non-volatile
       storage."
  4: ospfv3RestartExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at a
      graceful restart.

      none:        no restart has yet been attempted.
      inProgress:      a restart attempt is currently underway.
      completed:       the last restart completed successfully.
      timedOut:    the last restart timed out.
      topologyChanged: the last restart was aborted due to
               a topology change."
EDESC
#
#
#
EVENT ospfv3NbrRestartHelperStatusChange .1.3.6.1.2.1.191.0.13 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3NbrRestartHelperStatusChange notification $*
SDESC
An ospfv3NbrRestartHelperStatusChange notification
signifies that there has been a change in the
graceful restart helper state for the neighbor.
This notification should be generated when the
neighbor restart helper status transitions for a neighbor.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3NbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
      as a graceful restart helper for the neighbor."
  3: ospfv3NbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
      interval, if the router is acting as a restart
      helper for the neighbor."
  4: ospfv3NbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
      as a graceful restart helper for the neighbor.

      none:        no restart has yet been attempted.
      inProgress:      a restart attempt is currently underway.
      completed:       the last restart completed successfully.
      timedOut:    the last restart timed out.
      topologyChanged: the last restart was aborted due to
               a topology change."
EDESC
#
#
#
EVENT ospfv3VirtNbrRestartHelperStatusChange .1.3.6.1.2.1.191.0.14 "Status Events" Normal
FORMAT ZBXTRAP $aA An ospfv3VirtNbrRestartHelperStatusChange $*
SDESC
An ospfv3VirtNbrRestartHelperStatusChange
notification signifies that there has been a
change in the graceful restart helper state for
the virtual neighbor.  This notification should be
generated when the virtual neighbor restart helper status
transitions for a virtual neighbor.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
       as a graceful restart helper for the neighbor."
  3: ospfv3VirtNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in the current OSPF graceful restart
       interval, if the router is acting as a restart
       helper for the neighbor."
  4: ospfv3VirtNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
       as a graceful restart helper for the neighbor.

       none:        no restart has yet been attempted.
       inProgress:      a restart attempt is currently underway.
       completed:       the last restart completed successfully.
       timedOut:    the last restart timed out.
       topologyChanged: the last restart was aborted due to
                a topology change."
EDESC
#
#
#
#
MIB: SYSLOG-MSG-MIB (file:./rfc5676-syslog-msg.mib) converted on Fri Mar 18 23:13:10 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT syslogMsgNotification .1.3.6.1.2.1.192.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The syslogMsgNotification is generated when a new SYSLOG $*
SDESC
The syslogMsgNotification is generated when a new SYSLOG
message is received and the value of
syslogMsgGenerateNotifications is true.
Implementations may add syslogMsgSDParamValue objects as long
as the resulting notification fits into the size constraints
imposed by the implementation environment and the notification
message size constraints imposed by maxMessageSize [RFC3412]
and SNMP transport mappings.
Variables:
  1: syslogMsgFacility
     Syntax="INTEGER"
       0: kern
       1: user
       10: authpriv
       11: ftp
       12: ntp
       13: audit
       14: console
       15: cron2
       16: local0
       17: local1
       18: local2
       19: local3
       2: mail
       20: local4
       21: local5
       22: local6
       23: local7
       3: daemon
       4: auth
       5: syslog
       6: lpr
       7: news
       8: uucp
       9: cron
     Descr="The facility of the SYSLOG message."
  2: syslogMsgSeverity
     Syntax="INTEGER"
       0: emerg
       1: alert
       2: crit
       3: err
       4: warning
       5: notice
       6: info
       7: debug
     Descr="The severity of the SYSLOG message"
  3: syslogMsgVersion
     Syntax="UNSIGNED32"
     Descr="The version of the SYSLOG message.  A value of 0 indicates
        that the version is unknown."
  4: syslogMsgTimeStamp
     Syntax="OCTETSTR"
     Descr="The timestamp of the SYSLOG message.  A zero-length
        string is returned if the timestamp is unknown."
  5: syslogMsgHostName
     Syntax="OCTETSTR"
     Descr="The hostname and the (optional) domain name of the SYSLOG
        message.  A zero-length string indicates an unknown hostname.
        The SYSLOG protocol specification constrains this string to
        printable US-ASCII code points."
  6: syslogMsgAppName
     Syntax="OCTETSTR"
     Descr="The app-name of the SYSLOG message.  A zero-length string
        indicates an unknown app-name.  The SYSLOG protocol
        specification constrains this string to printable US-ASCII
        code points."
  7: syslogMsgProcID
     Syntax="OCTETSTR"
     Descr="The procid of the SYSLOG message.  A zero-length string
        indicates an unknown procid.  The SYSLOG protocol
        specification constrains this string to printable
        US-ASCII code points."
  8: syslogMsgMsgID
     Syntax="OCTETSTR"
     Descr="The msgid of the SYSLOG message.  A zero-length string
        indicates an unknown msgid.  The SYSLOG protocol specification
        constrains this string to printable US-ASCII code points."
  9: syslogMsgSDParams
     Syntax="UNSIGNED32"
     Descr="The total number of structured data element parameters
        carried in the SYSLOG message.  This number effectively
        indicates the number of entries in the syslogMsgSDTable.
        It can be used, for example, by a notification receiver
        to determine whether a notification carried all
        structured data element parameters of a SYSLOG message."
 10: syslogMsgMsg
     Syntax="OCTETSTR"
     Descr="The message part of the SYSLOG message.  The syntax does not
        impose a size restriction.  Implementations of this MIB module
        may truncate the message part of the SYSLOG message such that
        it fits into the size constraints imposed by the implementation
        environment.  Such truncations can also happen elsewhere in the
        SYSLOG forwarding chain.

        If the first octets contain the value 'EFBBBF'h, then the rest
        of the message is a UTF-8 string.  Since SYSLOG messages may be
        truncated at arbitrary octet boundaries during forwarding, the
        message may contain invalid UTF-8 encodings at the end."
EDESC
#
#
#
#
MIB: CAPWAP-BASE-MIB (file:./rfc5833-capwap-base.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT capwapBaseChannelUp .1.3.6.1.2.1.196.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent by the AC when a CAPWAP channel $*
SDESC
This notification is sent by the AC when a CAPWAP channel
is established.
The notification is separated for data or control channel.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfAuthenMethod
     Syntax="INTEGER"
       1: other
       2: clear
       3: x509
       4: psk
     Descr="Represents the authentication method for the CAPWAP Channel."
EDESC
#
#
#
EVENT capwapBaseChannelDown .1.3.6.1.2.1.196.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is sent by the AC when a CAPWAP channel $*
SDESC
This notification is sent by the AC when a CAPWAP channel
is down.
The notification is separated for data or control channel.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfChannelDownReason
     Syntax="INTEGER"
       1: timeout
       2: rekeyFailure
       3: acRebootWtp
       4: dtlsError
       5: maxRetransmit
     Descr="Represents the reason the channel is down.
         The following enumerated values are supported:
           timeout(1)       - The keepalive timed out
           rekeyFailure(2)  - Rekey process failed; channel will be
                              broken
           acRebootWtp(3)   - The AC rebooted the WTP
           dtlsError(4)     - DTLS notifications: DTLSAborted,
                              DTLSReassemblyFailure, DTLSPeerDisconnect,
                              or frequent DTLSDecapFailure
           maxRetransmit(5) - The underlying reliable transport's
                              RetransmitCount counter has reached the
                              MaxRetransmit variable"
EDESC
#
#
#
EVENT capwapBaseDecryptErrorReport .1.3.6.1.2.1.196.0.3 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP has had a $*
SDESC
This notification is generated when a WTP has had a
decryption error since the last report.
REFERENCE
Section 4.6.17 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfRadioId
     Syntax="UNSIGNED32"
     Descr="Represents the identifier of a PHY radio on a WTP, which is
         only required to be unique on a WTP.
         For example, WTP A and WTP B can use the same value of
         capwapBaseNtfRadioId for their first radio."
  3: capwapBaseNtfStationIdList
     Syntax="OCTETSTR"
     Descr="Represents a list of station MAC addresses separated by
         semicolons."
EDESC
#
#
#
EVENT capwapBaseJoinFailure .1.3.6.1.2.1.196.0.4 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP fails to join. $*
SDESC
This notification is generated when a WTP fails to join.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfJoinFailureReason
     Syntax="INTEGER"
       1: unspecified
       2: resDepletion
       3: unknownSource
       4: incorrectData
       5: sessionIdInUse
       6: unsupportedHw
       7: unsupportedBinding
     Descr="Represents the reason of join failure.
         The following enumerated values are supported:
           unspecified(1)        - Unspecified failure
           resDepletion(2)       - Resource depletion
           unknownSource(3)      - Unknown source
           incorrectData(4)      - Incorrect data
           sessionIdInUse(5)     - Session ID already in use
           unsupportedHw(6)      - WTP hardware not supported
           unsupportedBinding(7) - Binding not supported"
EDESC
#
#
#
EVENT capwapBaseImageUpgradeFailure .1.3.6.1.2.1.196.0.5 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP fails to update $*
SDESC
This notification is generated when a WTP fails to update
the firmware image.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfImageFailureReason
     Syntax="INTEGER"
       1: invalidChecksum
       2: invalidLength
       3: other
       4: inStorage
     Descr="Represents the reason of image failure.
         The following enumerated values are supported:
           invalidChecksum(1) - Invalid checksum
           invalidLength(2)   - Invalid data length
           other(3)           - Other error
           inStorage(4)       - Image already present"
EDESC
#
#
#
EVENT capwapBaseConfigMsgError .1.3.6.1.2.1.196.0.6 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a WTP receives message $*
SDESC
This notification is generated when a WTP receives message
elements in the configuration management messages that it
is unable to apply locally.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfConfigMsgErrorType
     Syntax="INTEGER"
       1: unknownElement
       2: unsupportedElement
       3: unknownValue
       4: unsupportedValue
     Descr="Represents the type of configuration message error.
         The following enumerated values are supported:
           unknownElement(1)     - Unknown message element
           unsupportedElement(2) - Unsupported message element
           unknownValue(3)       - Unknown message element value
           unsupportedValue(4)   - Unsupported message element value"
  3: capwapBaseNtfMsgErrorElements
     Syntax="OCTETSTR"
     Descr="Represents the message elements sent by the AC in the
         Configuration Status Response message that caused the error."
EDESC
#
#
#
EVENT capwapBaseRadioOperableStatus .1.3.6.1.2.1.196.0.7 "Status Events" Normal
FORMAT ZBXTRAP $aA The notification is generated when a radio's operational state $*
SDESC
The notification is generated when a radio's operational state
has changed.
REFERENCE
Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfRadioId
     Syntax="UNSIGNED32"
     Descr="Represents the identifier of a PHY radio on a WTP, which is
         only required to be unique on a WTP.
         For example, WTP A and WTP B can use the same value of
         capwapBaseNtfRadioId for their first radio."
  3: capwapBaseNtfRadioOperStatusFlag
     Syntax="INTEGER"
       0: operable
       1: inoperable
     Descr="Represents the operation status of a radio.
         The following enumerated values are supported:
           operable(0)   - The radio is operable
           inoperable(1) - The radio is inoperable, and the
                           capwapBaseNtfRadioStatusCause object
                           gives the reason in detail
         Note that the CAPWAP field [RFC5415] modeled by this
         object takes zero as starting value; this MIB object
         follows that rule."
  4: capwapBaseNtfRadioStatusCause
     Syntax="INTEGER"
       0: normal
       1: hwError
       2: swError
       3: adminSet
     Descr="Represents the reason why the radio is out of service.
         The following enumerated values are supported:
           normal(0)   - Normal status
           hwError(1)  - Radio failure
           swError(2)  - Software failure
           adminSet(3) - Administratively set
         Note that the CAPWAP field [RFC5415] modeled by this
         object takes zero as starting value; this MIB object
         follows that rule."
EDESC
#
#
#
EVENT capwapBaseAuthenFailure .1.3.6.1.2.1.196.0.8 "Status Events" Normal
FORMAT ZBXTRAP $aA This is notification of an authentication failure event $*
SDESC
This is notification of an authentication failure event
and provides the reason for it.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfAuthenMethod
     Syntax="INTEGER"
       1: other
       2: clear
       3: x509
       4: psk
     Descr="Represents the authentication method for the CAPWAP Channel."
  4: capwapBaseNtfAuthenFailureReason
     Syntax="INTEGER"
       1: keyMismatch
       2: invalidCert
       3: reassemblyFailure
       4: decapFailure
       5: encapFailure
       6: timeout
       8: unknown
     Descr="Represents the reason for WTP authorization failure.
         The following enumerated values are supported:
           keyMismatch(1)       - WTP's and AC's keys did not match
           invalidCert(2)       - Certification is not valid
           reassemblyFailure(3) - Fragment reassembly failure
           decapFailure(4)      - Decapsulation error
           encapFailure(5)      - Encapsulation error
           timeout(6)           - WaitDTLS timer timeout
           unknown(8)           - Unknown reason"
EDESC
#
#
#
#
MIB: CAPWAP-DOT11-MIB (file:./rfc5834-capwap-dot11.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-FRR-FACILITY-STD-MIB (file:./rfc6445-mpls-frr-facility-std.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsFrrFacilityInitialBackupTunnelInvoked .1.3.6.1.2.1.204.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when a tunnel running over an $*
SDESC
This notification is generated when a tunnel running over an
interface as specified in the mplsFrrConstraintsTable is
initially protected by the backup tunnel also specified in the
mplsFrrConstraintsTable.  In some implementations, there may
be a difference between when the control plane triggers
this notification and when the hardware is programmed to
utilize the protection path.  Due to the urgency of this
operation, it is acceptable for the control plane to
issue this notification either before or after it programs
the hardware.  In cases where it is the latter approach,
the notification MUST be sent immediately after the
data plane has been altered.
This notification should not be generated for each subsequent
tunnel that is backed up by the FRR feature on this LSR, as
this may result in potential scaling issues with regard to
LSR performance and network load.  Note also that
notifications MUST be generated in accordance with the
mplsFrrNotificationsMaxRate.
Variables:
  1: mplsFrrFacilityDBNumProtectingTunnelOnIf
     Syntax="GAUGE"
     Descr="The number of backup tunnels protecting the
       interface specified by mplsFrrFacilityProtectedIfIndex."
  2: mplsFrrFacilityDBNumProtectedLspOnIf
     Syntax="GAUGE"
     Descr="The number of LSPs currently being protected on
       the interface specified by
       mplsFrrFacilityProtectedIfIndex."
  3: mplsFrrFacilityDBNumProtectedTunnels
     Syntax="GAUGE"
     Descr="The number of tunnels protected on the interface
       specified by mplsFrrFacilityProtectedIfIndex."
  4: mplsFrrFacilityDBProtectingTunnelStatus
     Syntax="INTEGER"
       1: active
       2: ready
       3: partial
     Descr="Specifies the state of the protecting tunnel as
       specified by mplsFrrFacilityProtectingTunnelIndex.

       active  - This tunnel's label has been placed in the
                 LFIB and is ready to be applied to incoming
                 packets.
       ready   - This tunnel's label entry has been created but
                 is not yet in the LFIB.
       partial - This tunnel's label entry has not been fully
                 created."
  5: mplsFrrFacilityDBProtectingTunnelResvBw
     Syntax="UNSIGNED32"
     Descr="Specifies the amount of bandwidth in units
       of '1,000 bits per second', actually reserved by
       the protecting tunnel for facility backup purposes.
       This value is repeated here from the MPLS-TE-STD-MIB
       module because the tunnel entry will reveal the
       bandwidth reserved by the signaling protocol, which is
       typically 0 for backup tunnels so as to not over-book
       bandwidth.  However, internal reservations are
       typically made on the PLR; thus, this value should be
       revealed here, as it is often different from
       mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB
       module."
EDESC
#
#
#
EVENT mplsFrrFacilityFinalTunnelRestored .1.3.6.1.2.1.204.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA This notification is generated when the final tunnel that is $*
SDESC
This notification is generated when the final tunnel that is
being protected by a backup tunnel as specified in the
mplsFrrConstraintsTable is restored to normal operation.  This
notification should not be generated for each restored tunnel,
as this may result in potential scaling issues with regard to
LSR performance and network load.  Note also that
notifications MUST be generated in accordance with the
mplsFrrNotificationsMaxRate.
Variables:
  1: mplsFrrFacilityDBNumProtectingTunnelOnIf
     Syntax="GAUGE"
     Descr="The number of backup tunnels protecting the
       interface specified by mplsFrrFacilityProtectedIfIndex."
  2: mplsFrrFacilityDBNumProtectedLspOnIf
     Syntax="GAUGE"
     Descr="The number of LSPs currently being protected on
       the interface specified by
       mplsFrrFacilityProtectedIfIndex."
  3: mplsFrrFacilityDBNumProtectedTunnels
     Syntax="GAUGE"
     Descr="The number of tunnels protected on the interface
       specified by mplsFrrFacilityProtectedIfIndex."
  4: mplsFrrFacilityDBProtectingTunnelStatus
     Syntax="INTEGER"
       1: active
       2: ready
       3: partial
     Descr="Specifies the state of the protecting tunnel as
       specified by mplsFrrFacilityProtectingTunnelIndex.

       active  - This tunnel's label has been placed in the
                 LFIB and is ready to be applied to incoming
                 packets.
       ready   - This tunnel's label entry has been created but
                 is not yet in the LFIB.
       partial - This tunnel's label entry has not been fully
                 created."
  5: mplsFrrFacilityDBProtectingTunnelResvBw
     Syntax="UNSIGNED32"
     Descr="Specifies the amount of bandwidth in units
       of '1,000 bits per second', actually reserved by
       the protecting tunnel for facility backup purposes.
       This value is repeated here from the MPLS-TE-STD-MIB
       module because the tunnel entry will reveal the
       bandwidth reserved by the signaling protocol, which is
       typically 0 for backup tunnels so as to not over-book
       bandwidth.  However, internal reservations are
       typically made on the PLR; thus, this value should be
       revealed here, as it is often different from
       mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB
       module."
EDESC
#
#
#
#
MIB: MPLS-FRR-GENERAL-STD-MIB (file:./rfc6445-mpls-frr-general-std.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RBRIDGE-MIB (file:./rfc6850-rbridge.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT rbridgeBaseNewDrb .1.3.6.1.2.1.214.0.1 "Status Events" Normal
FORMAT ZBXTRAP $aA The rbridgeBaseNewDrb notification indicates that the $*
SDESC
The rbridgeBaseNewDrb notification indicates that the
sending agent has become the new Designated RBridge; the
notification is sent by an RBridge soon after its election
as the new DRB root, e.g., upon expiration of the Topology
Change Timer, immediately subsequent to its election.
EDESC
#
#
#
EVENT rbridgeBaseTopologyChange .1.3.6.1.2.1.214.0.2 "Status Events" Normal
FORMAT ZBXTRAP $aA The rbridgeBaseTopologyChange notification is sent by an $*
SDESC
The rbridgeBaseTopologyChange notification is sent by an
RBridge when any of its configured ports transition to/from
the VLAN-x designated forwarder.  The notification is not
sent if an rbridgeBaseNewDrb notification is sent for the
same transition.
EDESC
#
#
#
#
MIB: SNMP-USM-HMAC-SHA2-MIB (file:./rfc7860-snmp-usm-hmac-sha2.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SAVI-MIB (file:./savi.mib) converted on Fri Mar 18 23:13:11 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SFLOW-MIB (file:./sflow.mib) converted on Fri Mar 18 23:13:12 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: StationSW-MIB (file:./station-sw.mib) converted on Fri Mar 18 23:13:12 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ucMacChangeTrap .1.3.6.1.4.1.49763.1.2.1 "Status Events" Normal
FORMAT ZBXTRAP $aA Traps of unicaset mac address change. $*
SDESC
Traps of unicaset mac address change.
Variables:
  1: ucMacChange
     Syntax="OCTETSTR"
     Descr="Describe unicaset mac address change.
        The format is as follows:
        port_id<space>macAddress1&macAddress2&...<space>vlan_id1
        <space>macAddress3&macAddress4&...<space>vlan_id2..."
EDESC
#
#
#
EVENT userTrap .1.3.6.1.4.1.49763.1.2.2 "Status Events" Normal
FORMAT ZBXTRAP $aA Traps of user operation. $*
SDESC
Traps of user operation.
Variables:
  1: userIndex
     Syntax="INTEGER32"
     Descr="Index of userTable."
  2: userName
     Syntax="OCTETSTR"
     Descr="Device user name."
  3: userType
     Syntax="INTEGER"
       1: http
       2: https
       3: snmp
       4: telnet
       5: ssh
       6: cli
       7: iec61850
       8: console
     Descr="Device user type."
  4: userStatus
     Syntax="INTEGER"
       1: logIn
       2: logOut
       3: changePassword
       4: loginFail
     Descr="Device user type."
  5: userModified
     Syntax="OCTETSTR"
     Descr="changePassword: Username who's password was modified.
        other operation: None."
  6: userIP
     Syntax="OCTETSTR"
     Descr="Device user IP. If no IP, use 0.0.0.0."
EDESC
#
#
#
EVENT userOperTrap .1.3.6.1.4.1.49763.1.2.3 "Status Events" Normal
FORMAT ZBXTRAP $aA Traps of user operate command. $*
SDESC
Traps of user operate command.
Variables:
  1: userOperIndex
     Syntax="INTEGER32"
     Descr="Index of userOperTable."
  2: userOperName
     Syntax="OCTETSTR"
     Descr="Device user name."
  3: userOperIP
     Syntax="OCTETSTR"
     Descr="Device user IP. If no IP, use 0.0.0.0."
  4: userOperCommand
     Syntax="OCTETSTR"
     Descr="Device user Command."
EDESC
#
#
#
#
MIB: SNMP-USER-BASED-SM-3DES-MIB (file:./draft-reeder-snmpv3-usm-3desede.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: GB15629dot11-WAPI-MIB (file:./gb15629dot11-wapi.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-ADDRESS-FAMILY-NUMBERS-MIB (file:./iana-ana-address-family-numbers.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-RTPROTO-MIB (file:./ianaiprouteprotocol.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE-802DOT17-RPR-MIB (file:./ieee80217-rpr.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-BRIDGE-MIB (file:./ieee8021-bridge.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CFM-MIB (file:./ieee8021-cfm.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot1agCfmFaultAlarm .1.3.111.2.802.1.1.8.0.1 "Status Events" Normal
FORMAT A MEP has a persistent defect condition. A notification $*
SDESC
A MEP has a persistent defect condition. A notification
(fault alarm) is sent to the management entity with the OID
of the MEP that has detected the fault.
Whenever a MEP has a persistent defect,
it may or may not generate a Fault Alarm to warn the system
administrator of the problem, as controlled by the MEP
Fault Notification Generator State Machine and associated
Managed Objects. Only the highest-priority defect, as shown
in Table 20-1, is reported in the Fault Alarm.
If a defect with a higher priority is raised after a Fault
Alarm has been issued, another Fault Alarm is issued.
The management entity receiving the notification can identify
the system from the network source address of the
notification, and can identify the MEP reporting the defect
by the indices in the OID of the dot1agCfmMepHighestPrDefect
variable in the notification:
dot1agCfmMdIndex - Also the index of the MEP's
Maintenance Domain table entry
(dot1agCfmMdTable).
dot1agCfmMaIndex - Also an index (with the MD table index)
of the MEP's Maintenance Association
network table entry
(dot1agCfmMaNetTable), and (with the MD
table index and component ID) of the
MEP's MA component table entry
(dot1agCfmMaCompTable).
dot1agCfmMepIdentifier - MEP Identifier and final index
into the MEP table (dot1agCfmMepTable).

REFERENCE
12.14.7.7
Variables:
  1: dot1agCfmMepHighestPrDefect
     Syntax="INTEGER"
       0: none
       1: defRDICCM
       2: defMACstatus
       3: defRemoteCCM
       4: defErrorCCM
       5: defXconCCM
     Descr="The highest priority defect that has been present since the
        MEPs Fault Notification Generator State Machine was last in
        the FNG_RESET state.
       "
EDESC
#
#
#
#
MIB: IEEE8021-CFM-V2-MIB (file:./ieee8021-cfm-v2.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-CN-MIB (file:./ieee8021-cn.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-EVB-MIB (file:./ieee8021-evb.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-SECY-MIB (file:./ieee8021-secy.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-SPB-MIB (file:./ieee8021-spb.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-TC-MIB (file:./ieee8021-tc.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021-PAE-MIB (file:./ieee8021x.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8021X-PAE-MIB (file:./ieee8021x-pae.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE8023-LAG-MIB (file:./ieee8023-lag.mib) converted on Sat Apr  2 10:27:27 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IEEE802dot11-MIB (file:./ieee802dot11.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot11Disassociate .1.2.840.10036.1.6.0.1 "Status Events" Normal
FORMAT The disassociate notification shall be sent when the STA $*
SDESC
The disassociate notification shall be sent when the STA
sends a Disassociation frame. The value of the notification
shall include the MAC address of the MAC to which the Disassociation
frame was sent and the reason for the disassociation.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax=""
  2: dot11DisassociateReason
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Reason Code in a
        Disassociation frame.  If no Disassociation frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11DisassociateStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the Address 1 field of the most
        recently transmitted Disassociation frame.  If no Disassociation frame has
        been transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
EVENT dot11Deauthenticate .1.2.840.10036.1.6.0.2 "Status Events" Normal
FORMAT The deauthenticate notification shall be sent when the STA sends a $*
SDESC
The deauthenticate notification shall be sent when the STA sends a
Deauthentication frame. The value of the notification shall include
the MAC address of the MAC to which the Deauthentication frame was
sent and the reason for the deauthentication.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax=""
  2: dot11DeauthenticateReason
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Reason Code in a
        Deauthentication frame.  If no Deauthentication frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11DeauthenticateStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the Address 1 field of the most
        recently transmitted Deauthentication frame.  If no Deauthentication
        frame has been transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
EVENT dot11AuthenticateFail .1.2.840.10036.1.6.0.3 "Status Events" Normal
FORMAT The authenticate failure notification shall be sent when the STA $*
SDESC
The authenticate failure notification shall be sent when the STA
sends an Authentication frame with a status code other than
'successful'. The value of the notification
shall include the MAC address of the MAC to which the Authentication
frame was sent and the reason for the authentication failure.
ifIndex - Each IEEE 802.11 interface is represented by an ifEntry.
Interface tables in this MIB module are indexed by ifIndex.
Variables:
  1: ifIndex
     Syntax=""
  2: dot11AuthenticateFailStatus
     Syntax="INTEGER"
     Descr="This attribute holds the most recently transmitted Status Code in a failed
        Authentication frame.  If no failed Authentication frame has been transmitted,
        the value of this attribute shall be 0."
  3: dot11AuthenticateFailStation
     Syntax="OCTETSTR"
     Descr="This attribute holds the MAC address from the
        Address 1 field of the most recently transmitted
        failed Authentication frame.  If no failed Authentication frame has been
        transmitted, the value of this attribute shall be 0."
EDESC
#
#
#
#
MIB: IPSEC-IKEACTION-MIB (file:./ipsec-ikeaction.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPSEC-IPSECACTION-MIB (file:./ipsec-ipsecaction.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-EVB-EXTENSIONS-MIB (file:./lldp-ext-dot1-evb-extensions.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-MIB (file:./lldp-ext-dot1.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT1-V2-MIB (file:./lldp-ext-dot1-v2.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT3-MIB (file:./lldp-ext-dot3.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-DOT3-V2-MIB (file:./lldp-ext-dot3-v2.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: LLDP-EXT-MED-MIB (file:./lldp-ext-med.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpXMedTopologyChangeDetected .1.0.8802.1.1.2.1.5.4795.0.1 "Status Events" Normal
FORMAT A notification generated by the local device sensing $*
SDESC
A notification generated by the local device sensing
a change in the topology that indicates that a new remote
device attached to a local port, or a remote device disconnected
or moved from one port to another.
Variables:
  1: lldpRemChassisIdSubtype
     Syntax="INTEGER"
       1: chassisComponent
       2: interfaceAlias
       3: portComponent
       4: macAddress
       5: networkAddress
       6: interfaceName
       7: local
     Descr="The type of encoding used to identify the chassis associated
            with the remote system."
  2: lldpRemChassisId
     Syntax="OCTETSTR"
     Descr="The string value used to identify the chassis component
            associated with the remote system."
  3: lldpXMedRemDeviceClass
     Syntax="INTEGER"
       0: notDefined
       1: endpointClass1
       2: endpointClass2
       3: endpointClass3
       4: networkConnectivity
     Descr="Device Class as advertised by the device remotely connected to the
             port."
EDESC
#
#
#
#
MIB: LLDP-MIB (file:./lldp.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpRemTablesChange .1.0.8802.1.1.2.0.0.1 "Status Events" Normal
FORMAT A lldpRemTablesChange notification is sent when the value $*
SDESC
A lldpRemTablesChange notification is sent when the value
of lldpStatsRemTableLastChangeTime changes.  It can be
utilized by an NMS to trigger LLDP remote systems table
maintenance polls.
Note that transmission of lldpRemTablesChange
notifications are throttled by the agent, as specified by the
'lldpNotificationInterval' object.
Variables:
  1: lldpStatsRemTablesInserts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been inserted into tables
            contained in lldpRemoteSystemsData and lldpExtensions objects.

            The complete set of information received from a particular
            MSAP should be inserted into related tables.  If partial
            information cannot be inserted for a reason such as lack
            of resources, all of the complete set of information should
            be removed.

            This counter should be incremented only once after the
            complete set of information is successfully recorded
            in all related tables.  Any failures during inserting
            information set which result in deletion of previously
            inserted information should not trigger any changes in
            lldpStatsRemTablesInserts since the insert is not completed
            yet or or in lldpStatsRemTablesDeletes, since the deletion
            would only be a partial deletion. If the failure was the
            result of lack of resources, the lldpStatsRemTablesDrops
            counter should be incremented once."
  2: lldpStatsRemTablesDeletes
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from
            tables contained in lldpRemoteSystemsData and lldpExtensions
            objects.

            This counter should be incremented only once when the
            complete set of information is completely deleted from all
            related tables.  Partial deletions, such as deletion of
            rows associated with a particular MSAP from some tables,
            but not from all tables are not allowed, thus should not
            change the value of this counter."
  3: lldpStatsRemTablesDrops
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP could not be entered into
            tables contained in lldpRemoteSystemsData and lldpExtensions
            objects because of insufficient resources."
  4: lldpStatsRemTablesAgeouts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from tables
            contained in lldpRemoteSystemsData and lldpExtensions objects
            because the information timeliness interval has expired.

            This counter should be incremented only once when the complete
            set of information is completely invalidated (aged out)
            from all related tables.  Partial aging, similar to deletion
            case, is not allowed, and thus, should not change the value
            of this counter."
EDESC
#
#
#
#
MIB: LLDP-V2-MIB (file:./lldp-v2.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT lldpV2RemTablesChange .1.3.111.2.802.1.1.13.0.0.1 "Status Events" Normal
FORMAT A lldpV2RemTablesChange notification is sent when the value $*
SDESC
A lldpV2RemTablesChange notification is sent when the value
of lldpV2StatsRemTablesLastChangeTime changes. It can be
utilized by an NMS to trigger LLDP remote systems table
maintenance polls.
Note that transmission of lldpV2RemTablesChange
notifications are throttled by the agent, as specified by the
'lldpV2NotificationInterval' object.
Variables:
  1: lldpV2StatsRemTablesInserts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been inserted into tables
            contained in lldpV2RemoteSystemsData and lldpV2Extensions objects.

            The complete set of information received from a particular
            MSAP should be inserted into related tables. If partial
            information cannot be inserted for a reason such as lack
            of resources, all of the complete set of information should
            be removed.

            This counter should be incremented only once after the
            complete set of information is successfully recorded
            in all related tables. Any failures during inserting
            information set which result in deletion of previously
            inserted information should not trigger any changes in
            lldpV2StatsRemTablesInserts since the insert is not completed
            yet or in lldpStatsRemTablesDeletes, since the deletion
            would only be a partial deletion. If the failure was the
            result of lack of resources, the lldpStatsRemTablesDrops
            counter should be incremented once."
  2: lldpV2StatsRemTablesDeletes
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from
            tables contained in lldpV2RemoteSystemsData and lldpV2Extensions
            objects.

            This counter should be incremented only once when the
            complete set of information is completely deleted from all
            related tables. Partial deletions, such as deletion of
            rows associated with a particular MSAP from some tables,
            but not from all tables are not allowed, thus should not
            change the value of this counter."
  3: lldpV2StatsRemTablesDrops
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP could not be entered into
            tables contained in lldpV2RemoteSystemsData and lldpV2Extensions
            objects because of insufficient resources."
  4: lldpV2StatsRemTablesAgeouts
     Syntax="GAUGE"
     Descr="The number of times the complete set of information
            advertised by a particular MSAP has been deleted from tables
            contained in lldpV2RemoteSystemsData and lldpV2Extensions objects
            because the information timeliness interval has expired.

            This counter should be incremented only once when the complete
            set of information is completely invalidated (aged out)
            from all related tables. Partial ageing, similar to deletion
            case, is not allowed, and thus, should not change the value
            of this counter."
EDESC
#
#
#
#
MIB: LLDP-V2-TC-MIB (file:./lldp-v2-tc.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1213-MIB (file:./rfc1213.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1229-MIB (file:./rfc1229.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1271-MIB (file:./rfc1271.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1315-MIB (file:./rfc1315-fr.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1381-MIB (file:./rfc1381-lapb.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RFC1382-MIB (file:./rfc1382-x25.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PPP-LCP-MIB (file:./rfc1471-ppp-lcp.mib) converted on Sat Apr  2 10:27:28 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PPP-IP-NCP-MIB (file:./rfc1473-ppp-ip.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: BRIDGE-MIB (file:./rfc1493-bridge.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TOKEN-RING-RMON-MIB (file:./rfc1513-token-ring-rmon.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANAifType-MIB (file:./rfc1573a-IANAifType.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RIPv2-MIB (file:./rfc1724-rip.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNA-SDLC-MIB (file:./rfc1747-sna-sdlc.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DLSW-MIB (file:./rfc2024-dlsw.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dlswTrapTConnPartnerReject .1.3.6.1.2.1.46.1.0.1 "Status Events" Normal
FORMAT This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
is rejected by a partner DLSw during Capabilities
Exchanges.  The emission of this trap is controlled
by dlswTrapCntlTConnPartnerReject.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnProtViolation .1.3.6.1.2.1.46.1.0.2 "Status Events" Normal
FORMAT This trap is sent each time a protocol violation is $*
SDESC
This trap is sent each time a protocol violation is
detected for a transport connection.  The emission of this
trap is controlled by dlswTrapCntlTConnProtViolation.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnUp .1.3.6.1.2.1.46.1.0.3 "Status Events" Normal
FORMAT This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
enters 'connected' state.  The emission of this trap
is controlled by dlswTrapCntlTConn.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapTConnDown .1.3.6.1.2.1.46.1.0.4 "Status Events" Normal
FORMAT This trap is sent each time a transport connection $*
SDESC
This trap is sent each time a transport connection
enters 'disconnected' state.  The emission of this trap
is controlled by dlswTrapCntlTConn.
Variables:
  1: dlswTConnOperTDomain
     Syntax="OBJECTID"
     Descr="The object identifier indicates the transport domain
        of this transport connection."
  2: dlswTConnOperRemoteTAddr
     Syntax="OCTETSTR"
     Descr="The remote transport address of this transport connection."
EDESC
#
#
#
EVENT dlswTrapCircuitUp .1.3.6.1.2.1.46.1.0.5 "Status Events" Normal
FORMAT This trap is sent each time a circuit enters 'connected' $*
SDESC
This trap is sent each time a circuit enters 'connected'
state.  The emission of this trap is controlled by
dlswTrapCntlCircuit.
Variables:
  1: dlswCircuitS1Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 1 (S1) used for this circuit."
  2: dlswCircuitS1Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 1 (S1) used for this circuit."
  3: dlswCircuitS2Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 2 (S2) used for this circuit."
  4: dlswCircuitS2Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 2 (S2) used for this circuit."
EDESC
#
#
#
EVENT dlswTrapCircuitDown .1.3.6.1.2.1.46.1.0.6 "Status Events" Normal
FORMAT This trap is sent each time a circuit enters 'disconnected' $*
SDESC
This trap is sent each time a circuit enters 'disconnected'
state.  The emission of this trap is controlled by
dlswTrapCntlCircuit.
Variables:
  1: dlswCircuitS1Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 1 (S1) used for this circuit."
  2: dlswCircuitS1Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 1 (S1) used for this circuit."
  3: dlswCircuitS2Mac
     Syntax="OCTETSTR"
     Descr="The MAC Address of End Station 2 (S2) used for this circuit."
  4: dlswCircuitS2Sap
     Syntax="OCTETSTR"
     Descr="The SAP at End Station 2 (S2) used for this circuit."
EDESC
#
#
#
#
MIB: FRAME-RELAY-DTE-MIB (file:./rfc2115-frame-relay-dte.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT frDLCIStatusChange .1.3.6.1.2.1.10.32.0.1 "Status Events" Normal
FORMAT This trap indicates that the indicated Virtual Circuit $*
SDESC
This trap indicates that the indicated Virtual Circuit
has changed state.  It has either been created or
invalidated, or has toggled between the active and
inactive states.  If, however, the reason for the state
change is due to the DLCMI going down, per-DLCI traps
should not be generated.
Variables:
  1: frCircuitState
     Syntax="INTEGER"
       1: invalid
       2: active
       3: inactive
     Descr="Indicates whether the particular virtual circuit is
       operational.  In the absence of a Data Link Connection
       Management Interface, virtual circuit entries (rows)
       may be created by setting virtual circuit state to
       'active', or deleted by changing Circuit state to
       'invalid'.
       Whether or not the row actually disappears is left to
       the implementation, so this object may actually read as
       'invalid' for some arbitrary length of time.  It is
       also legal to set the state of a virtual circuit to
       'inactive' to temporarily disable a given circuit.
       The use of 'invalid' is deprecated in this SNMP Version
       2 MIB, in favor of frCircuitRowStatus."
EDESC
#
#
#
#
MIB: ISDN-MIB (file:./rfc2127-isdn.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT isdnMibCallInformation .1.3.6.1.2.1.10.20.2.0.1 "Status Events" Normal
FORMAT This trap/inform is sent to the manager under the $*
SDESC
This trap/inform is sent to the manager under the
following condidions:
- on incoming calls for each call which is rejected for
policy reasons (e.g. unknown neighbor or access
violation)
- on outgoing calls whenever a call attempt is determined
to have ultimately failed. In the event that call retry
is active, then this will be after all retry attempts
have failed.
- whenever a call connects. In this case, the object
isdnBearerCallConnectTime should be included in the
trap.
Only one such trap is sent in between successful or
unsuccessful call attempts from or to a single neighbor;
subsequent call attempts result in no trap.
If the Dial Control MIB objects dialCtlNbrCfgId and
dialCtlNbrCfgIndex are known by the entity generating
this trap, both objects should be included in the trap
as well. The receipt of this trap with no dial neighbor
information indicates that the manager must poll the
callHistoryTable of the Dial Control MIB to see what
changed.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: isdnBearerOperStatus
     Syntax="INTEGER"
       1: idle
       2: connecting
       3: connected
       4: active
     Descr="The current call control state for this port.
             idle(1):       The B channel is idle.
                            No call or call attempt is going on.
             connecting(2): A connection attempt (outgoing call)
                            is being made on this interface.
             connected(3):  An incoming call is in the process
                            of validation.
             active(4):     A call is active on this interface."
  3: isdnBearerPeerAddress
     Syntax="OCTETSTR"
     Descr="The ISDN address the current or last call is or was
             connected to.

             In some cases, the format of this information can not
             be predicted, since it largely depends on the type
             of switch or PBX the device is connected to. Therefore,
             the detailed format of this information is not
             specified and is implementation dependent.

             If possible, the agent should supply this information
             using the E.164 format. In this case, the number must
             start with '+'. Otherwise, IA5 number digits must be used.

             If the peer ISDN address is not available,
             this object has a length of zero."
  4: isdnBearerPeerSubAddress
     Syntax="OCTETSTR"
     Descr="The ISDN subaddress the current or last call is or was
             connected to.

             The subaddress is an user supplied string of up to 20
             IA5 characters and is transmitted transparently through
             the network.

             If the peer subaddress is not available, this object
             has a length of zero."
  5: isdnBearerCallSetupTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the ISDN setup message for
             the current or last call was sent or received. If since
             system startup there has been no call on this interface,
             this object has a value of zero."
  6: isdnBearerInfoType
     Syntax="INTEGER"
       1: unknown
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The Information Transfer Capability for the current
             or last call.

             speech(2) refers to a non-data connection, whereas
             audio31(6) and audio7(7) refer to data mode connections.

             Note that Q.931, chapter 4.5.5, originally defined
             audio7(7) as '7 kHz audio' and now defines it as
             'Unrestricted digital information with tones/
             announcements'.

             If since system startup there has been no call on this
             interface, this object has a value of unknown(1)."
  7: isdnBearerCallOrigin
     Syntax="INTEGER"
       1: unknown
       2: originate
       3: answer
       4: callback
     Descr="The call origin for the current or last call. If since
             system startup there was no call on this interface,
             this object has a value of unknown(1)."
EDESC
#
#
#
#
MIB: DIAL-CONTROL-MIB (file:./rfc2128-dial-control.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dialCtlPeerCallInformation .1.3.6.1.2.1.10.21.2.0.1 "Status Events" Normal
FORMAT This trap/inform is sent to the manager whenever $*
SDESC
This trap/inform is sent to the manager whenever
a successful call clears, or a failed call attempt
is determined to have ultimately failed. In the
event that call retry is active, then this is after
all retry attempts have failed. However, only one such
trap is sent in between successful call attempts;
subsequent call attempts result in no trap.
ifOperStatus will return the operational status of the
virtual interface associated with the peer to whom
this call was made to.
Variables:
  1: callHistoryPeerId
     Syntax="INTEGER"
     Descr="This is the Id value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist, the value of this object
         will be zero."
  2: callHistoryPeerIfIndex
     Syntax="INTEGER"
     Descr="This is the ifIndex value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist, the value of this object
         will be zero."
  3: callHistoryLogicalIfIndex
     Syntax="INTEGER32"
     Descr="This is the ifIndex value of the logical interface through
         which this call was made. For ISDN media, this would be
         the ifIndex of the B channel which was used for this call."
  4: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
  5: callHistoryPeerAddress
     Syntax="OCTETSTR"
     Descr="The number this call was connected to. If the number is
         not available, then it will have a length of zero."
  6: callHistoryPeerSubAddress
     Syntax="OCTETSTR"
     Descr="The subaddress this call was connected to. If the subaddress
         is undefined or not available, this will be a zero length
         string."
  7: callHistoryDisconnectCause
     Syntax="OCTETSTR"
     Descr="The encoded network cause value associated with this call.

         The value of this object will depend on the interface type
         as well as on the protocol and protocol version being
         used on this interface. Some references for possible cause
         values are given below."
  8: callHistoryConnectTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the call was connected."
  9: callHistoryDisconnectTime
     Syntax="TICKS"
     Descr="The value of sysUpTime when the call was disconnected."
 10: callHistoryInfoType
     Syntax="INTEGER"
       1: other
       10: fax
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The information type for this call."
 11: callHistoryCallOrigin
     Syntax="INTEGER"
       1: originate
       2: answer
       3: callback
     Descr="The call origin."
EDESC
#
#
#
EVENT dialCtlPeerCallSetup .1.3.6.1.2.1.10.21.2.0.2 "Status Events" Normal
FORMAT This trap/inform is sent to the manager whenever $*
SDESC
This trap/inform is sent to the manager whenever
a call setup message is received or sent.
ifOperStatus will return the operational status of the
virtual interface associated with the peer to whom
this call was made to.
Variables:
  1: callActivePeerId
     Syntax="INTEGER"
     Descr="This is the Id value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist or is unknown, the value
         of this object will be zero."
  2: callActivePeerIfIndex
     Syntax="INTEGER"
     Descr="This is the ifIndex value of the peer table entry
         to which this call was made. If a peer table entry
         for this call does not exist or is unknown, the value
         of this object will be zero."
  3: callActiveLogicalIfIndex
     Syntax="INTEGER32"
     Descr="This is the ifIndex value of the logical interface through
         which this call was made. For ISDN media, this would be
         the ifIndex of the B channel which was used for this call.
         If the ifIndex value is unknown, the value of this object
         will be zero."
  4: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
  5: callActivePeerAddress
     Syntax="OCTETSTR"
     Descr="The number this call is connected to. If the number is
         not available, then it will have a length of zero."
  6: callActivePeerSubAddress
     Syntax="OCTETSTR"
     Descr="The subaddress this call is connected to. If the subaddress
         is undefined or not available, this will be a zero length
         string."
  7: callActiveInfoType
     Syntax="INTEGER"
       1: other
       10: fax
       2: speech
       3: unrestrictedDigital
       4: unrestrictedDigital56
       5: restrictedDigital
       6: audio31
       7: audio7
       8: video
       9: packetSwitched
     Descr="The information type for this call."
  8: callActiveCallOrigin
     Syntax="INTEGER"
       1: originate
       2: answer
       3: callback
     Descr="The call origin."
EDESC
#
#
#
#
MIB: INTEGRATED-SERVICES-MIB (file:./rfc2213-integrated-services.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SYSAPPL-MIB (file:./rfc2287-sysappl.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-TCP-MIB (file:./rfc2452-ipv6-tcp.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-UDP-MIB (file:./rfc2454-ipv6-udp.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-MIB (file:./rfc2465-ipv6.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ipv6IfStateChange .1.3.6.1.2.1.55.2.0.1 "Status Events" Normal
FORMAT An ipv6IfStateChange notification signifies $*
SDESC
An ipv6IfStateChange notification signifies
that there has been a change in the state of
an ipv6 interface.  This notification should
be generated when the interface's operational
status transitions to or from the up(1) state.
Variables:
  1: ipv6IfDescr
     Syntax="OCTETSTR"
     Descr="A textual string containing information about the
               interface.  This string may be set by the network
               management system."
  2: ipv6IfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: noIfIdentifier
       4: unknown
       5: notPresent
     Descr="The current operational state of the interface.
              The noIfIdentifier(3) state indicates that no valid
              Interface Identifier is assigned to the interface.
              This state usually indicates that the link-local
              interface address failed Duplicate Address Detection.
              If ipv6IfAdminStatus is down(2) then ipv6IfOperStatus
              should be down(2).  If ipv6IfAdminStatus is changed
              to up(1) then ipv6IfOperStatus should change to up(1)
              if the interface is ready to transmit and receive
              network traffic; it should remain in the down(2) or
              noIfIdentifier(3) state if and only if there is a
              fault that prevents it from going to the up(1) state;
              it should remain in the notPresent(5) state if
              the interface has missing (typically, lower layer)
              components."
EDESC
#
#
#
#
MIB: IPV6-TC (file:./rfc2465-ipv6-tc.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-ICMP-MIB (file:./rfc2466-ipv6-icmp.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ATM-TC-MIB (file:./rfc2514-atm-tc.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ATM-MIB (file:./rfc2515-atm.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-FRAMEWORK-MIB (file:./rfc2571-snmp-framework.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-MPD-MIB (file:./rfc2572-snmp-mpd.mib) converted on Sat Apr  2 10:27:29 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-TARGET-MIB (file:./rfc2573-snmp-target.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SMON-MIB (file:./rfc2613-smon.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RADIUS-AUTH-CLIENT-MIB (file:./rfc2618-radius-auth-client.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RADIUS-ACC-CLIENT-MIB (file:./rfc2620-radius-acc-client.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ADSL-LINE-MIB (file:./rfc2662-adsl-line.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT adslAtucPerfLofsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.1 "Status Events" Normal
FORMAT Loss of Framing 15-minute interval threshold reached. $*
SDESC
Loss of Framing 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLofs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Framing."
  2: adslAtucThresh15MinLofs
     Syntax="INTEGER"
     Descr="The number of Loss of Frame Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLofsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfLossThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.2 "Status Events" Normal
FORMAT Loss of Signal 15-minute interval threshold reached. $*
SDESC
Loss of Signal 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLoss
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Signal."
  2: adslAtucThresh15MinLoss
     Syntax="INTEGER"
     Descr="The number of Loss of Signal Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLossThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfLprsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.3 "Status Events" Normal
FORMAT Loss of Power 15-minute interval threshold reached. $*
SDESC
Loss of Power 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLprs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Power."
  2: adslAtucThresh15MinLprs
     Syntax="INTEGER"
     Descr="The number of Loss of Power Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLprsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucPerfESsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.4 "Status Events" Normal
FORMAT Errored Second 15-minute interval threshold reached. $*
SDESC
Errored Second 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinESs
     Syntax="GAUGE"
     Descr="Count of Errored Seconds in the current 15 minute
                 interval.  The errored second parameter is a count of
                 one-second intervals containing one or more crc
                 anomalies, or one or more los or sef defects."
  2: adslAtucThresh15MinESs
     Syntax="INTEGER"
     Descr="The number of Errored Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfESsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucRateChangeTrap .1.3.6.1.2.1.10.94.1.2.1.0.5 "Status Events" Normal
FORMAT The ATUCs transmit rate has changed (RADSL mode only) $*
SDESC
The ATUCs transmit rate has changed (RADSL mode only)
Variables:
  1: adslAtucChanCurrTxRate
     Syntax="GAUGE"
     Descr="Actual transmit rate on this channel."
  2: adslAtucChanPrevTxRate
     Syntax="GAUGE"
     Descr="The rate at the time of the last
                 adslAtucRateChangeTrap event. It is also set at
                 initialization to prevent a trap being sent.

                 Rate changes less than adslAtucThresh(*)RateDown
                 or less than adslAtucThresh(*)RateUp will not
                 cause a trap or cause this object to change.
                 (*) == Fast or Interleave.
                 See AdslLineAlarmConfProfileEntry."
EDESC
#
#
#
EVENT adslAtucPerfLolsThreshTrap .1.3.6.1.2.1.10.94.1.2.1.0.6 "Status Events" Normal
FORMAT Loss of Link 15-minute interval threshold reached. $*
SDESC
Loss of Link 15-minute interval threshold reached.
Variables:
  1: adslAtucPerfCurr15MinLols
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Link."
  2: adslAtucThresh15MinLols
     Syntax="INTEGER"
     Descr="The number of Loss of Link Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAtucPerfLolsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAtucInitFailureTrap .1.3.6.1.2.1.10.94.1.2.1.0.7 "Status Events" Normal
FORMAT ATUC initialization failed. See adslAtucCurrStatus $*
SDESC
ATUC initialization failed. See adslAtucCurrStatus
for potential reasons.
Variables:
  1: adslAtucCurrStatus
     Syntax="BITS"
     Descr="Indicates current state of the ATUC line.  This is a
                 bit-map of possible conditions.  The various bit
                 positions are:

          0      noDefect             There no defects on the line

          1      lossOfFraming        ATUC failure due to not
                                      receiving valid frame.

          2      lossOfSignal         ATUC failure due to not
                                      receiving signal.

          3      lossOfPower          ATUC failure due to loss of
                                      power.
                                      Note: the Agent may still
                                      function.

          4      lossOfSignalQuality  Loss of Signal Quality is
                                      declared when the Noise Margin
                                      falls below the Minimum Noise
                                      Margin, or the bit-error-rate
                                      exceeds 10^-7.

          5      lossOfLink           ATUC failure due to inability
                                      to link with ATUR.

          6      dataInitFailure      ATUC failure during
                                      initialization due to bit
                                      errors corrupting startup
                                      exchange data.

          7      configInitFailure    ATUC failure during
                                      initialization due to peer
                                      ATU not able to support
                                      requested configuration

          8      protocolInitFailure  ATUC failure during
                                      initialization due to
                                      incompatible protocol used by
                                      the peer ATU.

          9      noPeerAtuPresent     ATUC failure during
                                      initialization due to no
                                      activation sequence detected
                                      from peer ATU.

                 This is intended to supplement ifOperStatus."
EDESC
#
#
#
EVENT adslAturPerfLofsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.1 "Status Events" Normal
FORMAT Loss of Framing 15-minute interval threshold reached. $*
SDESC
Loss of Framing 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLofs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Framing."
  2: adslAturThresh15MinLofs
     Syntax="INTEGER"
     Descr="The number of Loss of Frame Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLofsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfLossThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.2 "Status Events" Normal
FORMAT Loss of Signal 15-minute interval threshold reached. $*
SDESC
Loss of Signal 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLoss
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Signal."
  2: adslAturThresh15MinLoss
     Syntax="INTEGER"
     Descr="The number of Loss of Signal Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLossThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfLprsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.3 "Status Events" Normal
FORMAT Loss of Power 15-minute interval threshold reached. $*
SDESC
Loss of Power 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinLprs
     Syntax="GAUGE"
     Descr="Count of seconds in the current 15 minute interval
                 when there was Loss of Power."
  2: adslAturThresh15MinLprs
     Syntax="INTEGER"
     Descr="The number of Loss of Power Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfLprsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturPerfESsThreshTrap .1.3.6.1.2.1.10.94.1.2.2.0.4 "Status Events" Normal
FORMAT Errored Second 15-minute interval threshold reached. $*
SDESC
Errored Second 15-minute interval threshold reached.
Variables:
  1: adslAturPerfCurr15MinESs
     Syntax="GAUGE"
     Descr="Count of Errored Seconds in the current 15 minute
                interval.  The errored second parameter is a count of
                one-second intervals containing one or more crc
                anomalies, or one or more los or sef defects."
  2: adslAturThresh15MinESs
     Syntax="INTEGER"
     Descr="The number of Errored Seconds
                 encountered by an ADSL interface within any given 15
                 minutes performance data collection period, which
                 causes the SNMP agent to send an
                 adslAturPerfESsThreshTrap.
                 One trap will be sent per interval per interface.
                 A value of `0' will disable the trap."
EDESC
#
#
#
EVENT adslAturRateChangeTrap .1.3.6.1.2.1.10.94.1.2.2.0.5 "Status Events" Normal
FORMAT The ATURs transmit rate has changed (RADSL mode only) $*
SDESC
The ATURs transmit rate has changed (RADSL mode only)
Variables:
  1: adslAturChanCurrTxRate
     Syntax="GAUGE"
     Descr="Actual transmit rate on this channel."
  2: adslAturChanPrevTxRate
     Syntax="GAUGE"
     Descr="The rate at the time of the last
                 adslAturRateChangeTrap event. It is also set at
                 initialization to prevent a trap being sent.
                 Rate changes less than adslAturThresh(*)RateDown
                 or less than adslAturThresh(*)RateUp will not
                 cause a trap or cause this object to change.
                 (*) == Fast or Interleave.
                 See AdslLineAlarmConfProfileEntry."
EDESC
#
#
#
#
MIB: ADSL-TC-MIB (file:./rfc2662-adsl-tc.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: VRRP-MIB (file:./rfc2787-vrrp.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT vrrpTrapNewMaster .1.3.6.1.2.1.68.0.1 "Status Events" Normal
FORMAT The newMaster trap indicates that the sending agent $*
SDESC
The newMaster trap indicates that the sending agent
has transitioned to 'Master' state.
Variables:
  1: vrrpOperMasterIpAddr
     Syntax="IPADDR"
     Descr="The master router's real (primary) IP address. This is
         the IP address listed as the source in VRRP advertisement
         last received by this virtual router."
EDESC
#
#
#
EVENT vrrpTrapAuthFailure .1.3.6.1.2.1.68.0.2 "Status Events" Normal
FORMAT A vrrpAuthFailure trap signifies that a packet has $*
SDESC
A vrrpAuthFailure trap signifies that a packet has
been received from a router whose authentication key
or authentication type conflicts with this router's
authentication key or authentication type. Implementation
of this trap is optional.
Variables:
  1: vrrpTrapPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound VRRP packet. Used by
          vrrpTrapAuthFailure trap."
  2: vrrpTrapAuthErrorType
     Syntax="INTEGER"
       1: invalidAuthType
       2: authTypeMismatch
       3: authFailure
     Descr="Potential types of configuration conflicts.
         Used by vrrpAuthFailure trap."
EDESC
#
#
#
#
MIB: NETWORK-SERVICES-MIB (file:./rfc2788.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HOST-RESOURCES-MIB (file:./rfc2790-host-resources.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RMON-MIB (file:./rfc2819-rmon.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT risingAlarm .1.3.6.1.2.1.16.0.1 "Status Events" Normal
FORMAT The SNMP trap that is generated when an alarm $*
SDESC
The SNMP trap that is generated when an alarm
entry crosses its rising threshold and generates
an event that is configured for sending SNMP
traps.
Variables:
  1: alarmIndex
     Syntax="INTEGER32"
     Descr="An index that uniquely identifies an entry in the
         alarm table.  Each such entry defines a
         diagnostic sample at a particular interval
         for an object on the device."
  2: alarmVariable
     Syntax="OBJECTID"
     Descr="The object identifier of the particular variable to be
         sampled.  Only variables that resolve to an ASN.1 primitive
         type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
         Gauge, or TimeTicks) may be sampled.

         Because SNMP access control is articulated entirely
         in terms of the contents of MIB views, no access
         control mechanism exists that can restrict the value of
         this object to identify only those objects that exist
         in a particular MIB view.  Because there is thus no
         acceptable means of restricting the read access that
         could be obtained through the alarm mechanism, the
         probe must only grant write access to this object in
         those views that have read access to all objects on
         the probe.

         During a set operation, if the supplied variable name is
         not available in the selected MIB view, a badValue error
         must be returned.  If at any time the variable name of
         an established alarmEntry is no longer available in the
         selected MIB view, the probe must change the status of
         this alarmEntry to invalid(4).

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  3: alarmSampleType
     Syntax="INTEGER"
       1: absoluteValue
       2: deltaValue
     Descr="The method of sampling the selected variable and
         calculating the value to be compared against the
         thresholds.  If the value of this object is
         absoluteValue(1), the value of the selected variable
         will be compared directly with the thresholds at the
         end of the sampling interval.  If the value of this
         object is deltaValue(2), the value of the selected
         variable at the last sample will be subtracted from
         the current value, and the difference compared with
         the thresholds.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  4: alarmValue
     Syntax="INTEGER32"
     Descr="The value of the statistic during the last sampling
         period.  For example, if the sample type is deltaValue,
         this value will be the difference between the samples
         at the beginning and end of the period.  If the sample
         type is absoluteValue, this value will be the sampled
         value at the end of the period.

         This is the value that is compared with the rising and
         falling thresholds.

         The value during the current sampling period is not
         made available until the period is completed and will
         remain available until the next period completes."
  5: alarmRisingThreshold
     Syntax="INTEGER32"
     Descr="A threshold for the sampled statistic.  When the current
         sampled value is greater than or equal to this threshold,
         and the value at the last sampling interval was less than
         this threshold, a single event will be generated.
         A single event will also be generated if the first
         sample after this entry becomes valid is greater than or
         equal to this threshold and the associated
         alarmStartupAlarm is equal to risingAlarm(1) or
         risingOrFallingAlarm(3).

         After a rising event is generated, another such event
         will not be generated until the sampled value
         falls below this threshold and reaches the
         alarmFallingThreshold.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
EDESC
#
#
#
EVENT fallingAlarm .1.3.6.1.2.1.16.0.2 "Status Events" Normal
FORMAT The SNMP trap that is generated when an alarm $*
SDESC
The SNMP trap that is generated when an alarm
entry crosses its falling threshold and generates
an event that is configured for sending SNMP
traps.
Variables:
  1: alarmIndex
     Syntax="INTEGER32"
     Descr="An index that uniquely identifies an entry in the
         alarm table.  Each such entry defines a
         diagnostic sample at a particular interval
         for an object on the device."
  2: alarmVariable
     Syntax="OBJECTID"
     Descr="The object identifier of the particular variable to be
         sampled.  Only variables that resolve to an ASN.1 primitive
         type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
         Gauge, or TimeTicks) may be sampled.

         Because SNMP access control is articulated entirely
         in terms of the contents of MIB views, no access
         control mechanism exists that can restrict the value of
         this object to identify only those objects that exist
         in a particular MIB view.  Because there is thus no
         acceptable means of restricting the read access that
         could be obtained through the alarm mechanism, the
         probe must only grant write access to this object in
         those views that have read access to all objects on
         the probe.

         During a set operation, if the supplied variable name is
         not available in the selected MIB view, a badValue error
         must be returned.  If at any time the variable name of
         an established alarmEntry is no longer available in the
         selected MIB view, the probe must change the status of
         this alarmEntry to invalid(4).

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  3: alarmSampleType
     Syntax="INTEGER"
       1: absoluteValue
       2: deltaValue
     Descr="The method of sampling the selected variable and
         calculating the value to be compared against the
         thresholds.  If the value of this object is
         absoluteValue(1), the value of the selected variable
         will be compared directly with the thresholds at the
         end of the sampling interval.  If the value of this
         object is deltaValue(2), the value of the selected
         variable at the last sample will be subtracted from
         the current value, and the difference compared with
         the thresholds.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
  4: alarmValue
     Syntax="INTEGER32"
     Descr="The value of the statistic during the last sampling
         period.  For example, if the sample type is deltaValue,
         this value will be the difference between the samples
         at the beginning and end of the period.  If the sample
         type is absoluteValue, this value will be the sampled
         value at the end of the period.

         This is the value that is compared with the rising and
         falling thresholds.

         The value during the current sampling period is not
         made available until the period is completed and will
         remain available until the next period completes."
  5: alarmFallingThreshold
     Syntax="INTEGER32"
     Descr="A threshold for the sampled statistic.  When the current
         sampled value is less than or equal to this threshold,
         and the value at the last sampling interval was greater than
         this threshold, a single event will be generated.
         A single event will also be generated if the first
         sample after this entry becomes valid is less than or
         equal to this threshold and the associated
         alarmStartupAlarm is equal to fallingAlarm(2) or
         risingOrFallingAlarm(3).

         After a falling event is generated, another such event
         will not be generated until the sampled value
         rises above this threshold and reaches the
         alarmRisingThreshold.

         This object may not be modified if the associated
         alarmStatus object is equal to valid(1)."
EDESC
#
#
#
#
MIB: HCNUM-TC (file:./rfc2856-hcnum-tc.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IF-MIB (file:./rfc2863-if.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT linkDown .1.3.6.1.6.3.1.1.5.3 "Status Events" Normal
FORMAT A linkDown trap signifies that the SNMP entity, acting in $*
SDESC
A linkDown trap signifies that the SNMP entity, acting in
an agent role, has detected that the ifOperStatus object for
one of its communication links is about to enter the down
state from some other state (but not from the notPresent
state).  This other state is indicated by the included value
of ifOperStatus.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The testing(3) state
            indicates that no operational packets can be passed.  When a
            managed system initializes, all interfaces start with
            ifAdminStatus in the down(2) state.  As a result of either
            explicit management action or per configuration information
            retained by the managed system, ifAdminStatus is then
            changed to either the up(1) or testing(3) states (or remains
            in the down(2) state)."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
EDESC
#
#
#
EVENT linkUp .1.3.6.1.6.3.1.1.5.4 "Status Events" Normal
FORMAT A linkUp trap signifies that the SNMP entity, acting in an $*
SDESC
A linkUp trap signifies that the SNMP entity, acting in an
agent role, has detected that the ifOperStatus object for
one of its communication links left the down state and
transitioned into some other state (but not into the
notPresent state).  This other state is indicated by the
included value of ifOperStatus.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: ifAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="The desired state of the interface.  The testing(3) state
            indicates that no operational packets can be passed.  When a
            managed system initializes, all interfaces start with
            ifAdminStatus in the down(2) state.  As a result of either
            explicit management action or per configuration information
            retained by the managed system, ifAdminStatus is then
            changed to either the up(1) or testing(3) states (or remains
            in the down(2) state)."
  3: ifOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The current operational state of the interface.  The
            testing(3) state indicates that no operational packets can
            be passed.  If ifAdminStatus is down(2) then ifOperStatus
            should be down(2).  If ifAdminStatus is changed to up(1)
            then ifOperStatus should change to up(1) if the interface is
            ready to transmit and receive network traffic; it should
            change to dormant(5) if the interface is waiting for
            external actions (such as a serial line waiting for an
            incoming connection); it should remain in the down(2) state
            if and only if there is a fault that prevents it from going
            to the up(1) state; it should remain in the notPresent(6)
            state if the interface has missing (typically, hardware)
            components."
EDESC
#
#
#
#
MIB: DISMAN-PING-MIB (file:./rfc2925-disman-ping.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pingProbeFailed .1.3.6.1.2.1.80.0.1 "Status Events" Normal
FORMAT Generated when a probe failure is detected when the $*
SDESC
Generated when a probe failure is detected when the
corresponding pingCtlTrapGeneration object is set to
probeFailure(0) subject to the value of
pingCtlTrapProbeFailureFilter.  The object
pingCtlTrapProbeFailureFilter can be used to specify the
number of successive probe failures that are required
before this notification can be generated.
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
EVENT pingTestFailed .1.3.6.1.2.1.80.0.2 "Status Events" Normal
FORMAT Generated when a ping test is determined to have failed $*
SDESC
Generated when a ping test is determined to have failed
when the corresponding pingCtlTrapGeneration object is
set to testFailure(1).  In this instance
pingCtlTrapTestFailureFilter should specify the number of
probes in a test required to have failed in order to
consider the test as failed.
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
EVENT pingTestCompleted .1.3.6.1.2.1.80.0.3 "Status Events" Normal
FORMAT Generated at the completion of a ping test when the $*
SDESC
Generated at the completion of a ping test when the
corresponding pingCtlTrapGeneration object is set to
testCompletion(4).
Variables:
  1: pingCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="Specifies the type of host address to be used at a remote
        host for performing a ping operation."
  2: pingCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address to be used at a remote host for
        performing a ping operation.  The host address type is
        determined by the object value of corresponding
        pingCtlTargetAddressType.
        A value for this object MUST be set prior to transitioning
        its corresponding pingCtlEntry to active(1) via
        pingCtlRowStatus."
  3: pingResultsOperStatus
     Syntax="INTEGER"
       1: enabled
       2: disabled
     Descr="Reflects the operational state of a pingCtlEntry:
           enabled(1)   - Test is active.
           disabled(2)  - Test has stopped."
  4: pingResultsIpTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
     Descr="This objects indicates the type of address stored
        in the corresponding pingResultsIpTargetAddress
        object."
  5: pingResultsIpTargetAddress
     Syntax="OCTETSTR"
     Descr="This objects reports the IP address associated
        with a pingCtlTargetAddress value when the destination
        address is specified as a DNS name.  The value of
        this object should be a zero length octet string
        when a DNS name is not specified or when a
        specified DNS name fails to resolve."
  6: pingResultsMinRtt
     Syntax="UNSIGNED32"
     Descr="The minimum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  7: pingResultsMaxRtt
     Syntax="UNSIGNED32"
     Descr="The maximum ping round-trip-time (RTT) received.  A value
        of 0 for this object implies that no RTT has been received."
  8: pingResultsAverageRtt
     Syntax="UNSIGNED32"
     Descr="The current average ping round-trip-time (RTT)."
  9: pingResultsProbeResponses
     Syntax="UNSIGNED32"
     Descr="Number of responses received for the corresponding
        pingCtlEntry and pingResultsEntry.  The value of this object
        MUST be reported as 0 when no probe responses have been
        received."
 10: pingResultsSentProbes
     Syntax="UNSIGNED32"
     Descr="The value of this object reflects the number of probes sent
        for the corresponding pingCtlEntry and pingResultsEntry.
        The value of this object MUST be reported as 0 when no probes
        have been sent."
 11: pingResultsRttSumOfSquares
     Syntax="UNSIGNED32"
     Descr="This object contains the sum of the squares for all ping
        responses received.  Its purpose is to enable standard
        deviation calculation.  The value of this object MUST
        be reported as 0 when no ping responses have been
        received."
 12: pingResultsLastGoodProbe
     Syntax="OCTETSTR"
     Descr="Date and time when the last response was received for
        a probe."
EDESC
#
#
#
#
MIB: IGMP-STD-MIB (file:./rfc2933-igmp-std.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DISMAN-EVENT-MIB (file:./rfc2981-disman-event.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mteTriggerFired .1.3.6.1.2.1.88.2.0.1 "Status Events" Normal
FORMAT Notification that the trigger indicated by the object $*
SDESC
Notification that the trigger indicated by the object
instances has fired, for triggers with mteTriggerType
'boolean' or 'existence'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerRising .1.3.6.1.2.1.88.2.0.2 "Status Events" Normal
FORMAT Notification that the rising threshold was met for triggers $*
SDESC
Notification that the rising threshold was met for triggers
with mteTriggerType 'threshold'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerFalling .1.3.6.1.2.1.88.2.0.3 "Status Events" Normal
FORMAT Notification that the falling threshold was met for triggers $*
SDESC
Notification that the falling threshold was met for triggers
with mteTriggerType 'threshold'.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteHotValue
     Syntax="INTEGER32"
     Descr="The value of the object at mteTriggerValueID when a
        trigger fired."
EDESC
#
#
#
EVENT mteTriggerFailure .1.3.6.1.2.1.88.2.0.4 "Status Events" Normal
FORMAT Notification that an attempt to check a trigger has failed. $*
SDESC
Notification that an attempt to check a trigger has failed.
The network manager must enable this notification only with
a certain fear and trembling, as it can easily crowd out more
important information.  It should be used only to help diagnose
a problem that has appeared in the error counters and can not
be found otherwise.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteFailedReason
     Syntax="INTEGER"
       -1: localResourceLack
       -2: badDestination
       -3: destinationUnreachable
       -4: noResponse
       -5: badType
       -6: sampleOverrun
       0: noError
       1: tooBig
       10: wrongValue
       11: noCreation
       12: inconsistentValue
       13: resourceUnavailable
       14: commitFailed
       15: undoFailed
       16: authorizationError
       17: notWritable
       18: inconsistentName
       2: noSuchName
       3: badValue
       4: readOnly
       5: genErr
       6: noAccess
       7: wrongType
       8: wrongLength
       9: wrongEncoding
     Descr="The reason for the failure of an attempt to check for a
        trigger condition or set an object in response to an event."
EDESC
#
#
#
EVENT mteEventSetFailure .1.3.6.1.2.1.88.2.0.5 "Status Events" Normal
FORMAT Notification that an attempt to do a set in response to an $*
SDESC
Notification that an attempt to do a set in response to an
event has failed.
The network manager must enable this notification only with
a certain fear and trembling, as it can easily crowd out more
important information.  It should be used only to help diagnose
a problem that has appeared in the error counters and can not
be found otherwise.
Variables:
  1: mteHotTrigger
     Syntax="OCTETSTR"
     Descr="The name of the trigger causing the notification."
  2: mteHotTargetName
     Syntax="OCTETSTR"
     Descr="The SNMP Target MIB's snmpTargetAddrName related to the
        notification."
  3: mteHotContextName
     Syntax="OCTETSTR"
     Descr="The context name related to the notification.  This MUST be as
        fully-qualified as possible, including filling in wildcard
        information determined in processing."
  4: mteHotOID
     Syntax="OBJECTID"
     Descr="The object identifier of the destination object related to the
        notification.  This MUST be as fully-qualified as possible,
        including filling in wildcard information determined in
        processing.

        For a trigger-related notification this is from
        mteTriggerValueID.

        For a set failure this is from mteEventSetObject."
  5: mteFailedReason
     Syntax="INTEGER"
       -1: localResourceLack
       -2: badDestination
       -3: destinationUnreachable
       -4: noResponse
       -5: badType
       -6: sampleOverrun
       0: noError
       1: tooBig
       10: wrongValue
       11: noCreation
       12: inconsistentValue
       13: resourceUnavailable
       14: commitFailed
       15: undoFailed
       16: authorizationError
       17: notWritable
       18: inconsistentName
       2: noSuchName
       3: badValue
       4: readOnly
       5: genErr
       6: noAccess
       7: wrongType
       8: wrongLength
       9: wrongEncoding
     Descr="The reason for the failure of an attempt to check for a
        trigger condition or set an object in response to an event."
EDESC
#
#
#
#
MIB: IPV6-MLD-MIB (file:./rfc3019-ipv6-mld.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HC-RMON-MIB (file:./rfc3273-hc-rmon.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DIFFSERV-DSCP-TC (file:./rfc3289-diffserv-dscp-tc.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DIFFSERV-MIB (file:./rfc3289-diffserv.mib) converted on Sat Apr  2 10:27:30 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-NOTIFICATION-MIB (file:./rfc3413-snmp-notification.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-USER-BASED-SM-MIB (file:./rfc3414-snmp-usm.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMP-VIEW-BASED-ACM-MIB (file:./rfc3415-snmp-vacm.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMPv2-TM (file:./rfc3417-snmpv2-tm.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SNMPv2-MIB (file:./rfc3418-snmpv2.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT coldStart .1.3.6.1.6.3.1.1.5.1 "Status Events" Normal
FORMAT A coldStart trap signifies that the SNMP entity, $*
SDESC
A coldStart trap signifies that the SNMP entity,
supporting a notification originator application, is
reinitializing itself and that its configuration may
have been altered.
EDESC
#
#
#
EVENT warmStart .1.3.6.1.6.3.1.1.5.2 "Status Events" Normal
FORMAT A warmStart trap signifies that the SNMP entity, $*
SDESC
A warmStart trap signifies that the SNMP entity,
supporting a notification originator application,
is reinitializing itself such that its configuration
is unaltered.
EDESC
#
#
#
EVENT authenticationFailure .1.3.6.1.6.3.1.1.5.5 "Status Events" Normal
FORMAT An authenticationFailure trap signifies that the SNMP $*
SDESC
An authenticationFailure trap signifies that the SNMP
entity has received a protocol message that is not
properly authenticated.  While all implementations
of SNMP entities MAY be capable of generating this
trap, the snmpEnableAuthenTraps object indicates
whether this trap will be generated.
EDESC
#
#
#
#
MIB: TRANSPORT-ADDRESS-MIB (file:./rfc3419-transport-address.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PerfHist-TC-MIB (file:./rfc3593-perfhist-tc.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPV6-FLOW-LABEL-MIB (file:./rfc3595-ipv6-flow-label.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: POWER-ETHERNET-MIB (file:./rfc3621-power-ethernet.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pethPsePortOnOffNotification .1.3.6.1.2.1.105.0.1 "Status Events" Normal
FORMAT  This Notification indicates if Pse Port is delivering or $*
SDESC
 This Notification indicates if Pse Port is delivering or
not power to the PD.  This Notification SHOULD be sent on
every status change except in the searching mode.
At least 500 msec must elapse between notifications
being emitted by the same object instance.
Variables:
  1: pethPsePortDetectionStatus
     Syntax="INTEGER"
       1: disabled
       2: searching
       3: deliveringPower
       4: fault
       5: test
       6: otherFault
     Descr="Describes the operational status of the port PD detection.
         A value of disabled(1)- indicates that the PSE State diagram
         is in the state DISABLED.
         A value of deliveringPower(3) - indicates that the PSE State
         diagram is in the state POWER_ON for a duration greater than
         tlim max (see IEEE Std 802.3af Table 33-5 tlim).
         A value of fault(4) - indicates that the PSE State diagram is
         in the state TEST_ERROR.
         A value of test(5) - indicates that the PSE State diagram is
         in the state TEST_MODE.
         A value of otherFault(6) - indicates that the PSE State
         diagram is in the state IDLE due to the variable
         error_conditions.
         A value of searching(2)- indicates the PSE State diagram is
         in a state other than those listed above."
EDESC
#
#
#
EVENT pethMainPowerUsageOnNotification .1.3.6.1.2.1.105.0.2 "Status Events" Normal
FORMAT  This Notification indicate PSE Threshold usage $*
SDESC
 This Notification indicate PSE Threshold usage
indication is on, the usage power is above the
threshold.  At least 500 msec must elapse between
notifications being emitted by the same object
instance.
Variables:
  1: pethMainPseConsumptionPower
     Syntax="GAUGE"
     Descr="Measured usage power expressed in Watts."
EDESC
#
#
#
EVENT pethMainPowerUsageOffNotification .1.3.6.1.2.1.105.0.3 "Status Events" Normal
FORMAT  This Notification indicates PSE Threshold usage indication $*
SDESC
 This Notification indicates PSE Threshold usage indication
off, the usage power is below the threshold.
At least 500 msec must elapse between notifications being
emitted by the same object instance.
Variables:
  1: pethMainPseConsumptionPower
     Syntax="GAUGE"
     Descr="Measured usage power expressed in Watts."
EDESC
#
#
#
#
MIB: EtherLike-MIB (file:./rfc3635-EtherLike.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: HC-PerfHist-TC-MIB (file:./rfc3705-hc-perfhist-tc.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-TC-STD-MIB (file:./rfc3811-mpls-tc-std.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-TE-STD-MIB (file:./rfc3812-mpls-te-std.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsTunnelUp .1.3.6.1.2.1.10.166.3.0.1 "Status Events" Normal
FORMAT This notification is generated when a $*
SDESC
This notification is generated when a
mplsTunnelOperStatus object for one of the
configured tunnels is about to leave the down state
and transition into some other state (but not into
the notPresent state).  This other state is
indicated by the included value of
mplsTunnelOperStatus.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
EVENT mplsTunnelDown .1.3.6.1.2.1.10.166.3.0.2 "Status Events" Normal
FORMAT This notification is generated when a $*
SDESC
This notification is generated when a
mplsTunnelOperStatus object for one of the
configured tunnels is about to enter the down state
from some other state (but not from the notPresent
state).  This other state is indicated by the
included value of mplsTunnelOperStatus.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
EVENT mplsTunnelRerouted .1.3.6.1.2.1.10.166.3.0.3 "Status Events" Normal
FORMAT This notification is generated when a tunnel is $*
SDESC
This notification is generated when a tunnel is
rerouted. If the mplsTunnelARHopTable is used, then
this tunnel instance's entry in the
mplsTunnelARHopTable MAY contain the new path for
this tunnel some time after this trap is issued by
the agent.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
EVENT mplsTunnelReoptimized .1.3.6.1.2.1.10.166.3.0.4 "Status Events" Normal
FORMAT This notification is generated when a tunnel is $*
SDESC
This notification is generated when a tunnel is
reoptimized. If the mplsTunnelARHopTable is used,
then this tunnel instance's entry in the
mplsTunnelARHopTable MAY contain the new path for
this tunnel some time after this trap is issued by
the agent.
Variables:
  1: mplsTunnelAdminStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
     Descr="Indicates the desired operational status of this
             tunnel."
  2: mplsTunnelOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="Indicates the actual operational status of this
             tunnel, which is typically but not limited to, a
             function of the state of individual segments of
             this tunnel."
EDESC
#
#
#
#
MIB: MPLS-LSR-STD-MIB (file:./rfc3813-mpls-lsr-std.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsXCUp .1.3.6.1.2.1.10.166.2.0.1 "Status Events" Normal
FORMAT This notification is generated when the $*
SDESC
This notification is generated when the
mplsXCOperStatus object for one or more contiguous
entries in mplsXCTable are about to enter the up(1)
state from some other state. The included values of
mplsXCOperStatus MUST both be set equal to this
new state (i.e: up(1)).  The two instances of
mplsXCOperStatus in this notification indicate the range
of indexes that are affected.  Note that all the indexes
of the two ends of the range can be derived from the
instance identifiers of these two objects.  For
cases where a contiguous range of cross-connects
have transitioned into the up(1) state at roughly
the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in
an effort to minimize the emission of a large number
of notifications.  If a notification has to be
issued for just a single cross-connect entry, then
the instance identifier (and values) of the two
mplsXCOperStatus objects MUST be the identical.
Variables:
  1: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
  2: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
EDESC
#
#
#
EVENT mplsXCDown .1.3.6.1.2.1.10.166.2.0.2 "Status Events" Normal
FORMAT This notification is generated when the $*
SDESC
This notification is generated when the
mplsXCOperStatus object for one or more contiguous
entries in mplsXCTable are about to enter the
down(2) state from some other state. The included values
of mplsXCOperStatus MUST both be set equal to this
down(2) state.  The two instances of mplsXCOperStatus
in this notification indicate the range of indexes
that are affected.  Note that all the indexes of the
two ends of the range can be derived from the
instance identifiers of these two objects.  For
cases where a contiguous range of cross-connects
have transitioned into the down(2) state at roughly
the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in
an effort to minimize the emission of a large number
of notifications.  If a notification has to be
issued for just a single cross-connect entry, then
the instance identifier (and values) of the two
mplsXCOperStatus objects MUST be identical.
Variables:
  1: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
  2: mplsXCOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: unknown
       5: dormant
       6: notPresent
       7: lowerLayerDown
     Descr="The actual operational status of this cross-
        connect."
EDESC
#
#
#
#
MIB: MPLS-FTN-STD-MIB (file:./rfc3814-mpls-ftn-std.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-LDP-STD-MIB (file:./rfc3815-mpls-ldp-std.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsLdpInitSessionThresholdExceeded .1.3.6.1.2.1.10.166.4.0.1 "Status Events" Normal
FORMAT This notification is generated when the value of $*
SDESC
This notification is generated when the value of
the 'mplsLdpEntityInitSessionThreshold' object
is not zero, and the number of Session
Initialization messages exceeds the value
of the 'mplsLdpEntityInitSessionThreshold' object.
Variables:
  1: mplsLdpEntityInitSessionThreshold
     Syntax="INTEGER32"
     Descr="When attempting to establish a session with
             a given Peer, the given LDP Entity should
             send out the SNMP notification,
             'mplsLdpInitSessionThresholdExceeded', when
             the number of Session Initialization messages
             sent exceeds this threshold.

             The notification is used to notify an
             operator when this Entity and its Peer are
             possibly engaged in an endless sequence
             of messages as each NAKs the other's

             Initialization messages with Error Notification
             messages.  Setting this threshold which triggers
             the notification is one way to notify the
             operator.  The notification should be generated
             each time this threshold is exceeded and
             for every subsequent Initialization message
             which is NAK'd with an Error Notification
             message after this threshold is exceeded.

             A value of 0 (zero) for this object
             indicates that the threshold is infinity, thus
             the SNMP notification will never be generated."
EDESC
#
#
#
EVENT mplsLdpPathVectorLimitMismatch .1.3.6.1.2.1.10.166.4.0.2 "Status Events" Normal
FORMAT This notification is sent when the $*
SDESC
This notification is sent when the
'mplsLdpEntityPathVectorLimit' does NOT match
the value of the 'mplsLdpPeerPathVectorLimit' for
a specific Entity.
REFERENCE
RFC3036, LDP Specification, Section 3.5.3.
Variables:
  1: mplsLdpEntityPathVectorLimit
     Syntax="INTEGER32"
     Descr="If the value of this object is 0 (zero) then
             Loop Detection for Path Vectors is disabled.

             Otherwise, if this object has a value greater than
             zero, then Loop Dection for Path Vectors is enabled,
             and the Path Vector Limit is this value.
             Also, the value of the object,
             'mplsLdpLsrLoopDetectionCapable', must be set to
             either 'pathVector(4)' or 'hopCountAndPathVector(5)',
             if this object has a value greater than 0 (zero),
             otherwise it is ignored."
  2: mplsLdpPeerPathVectorLimit
     Syntax="INTEGER32"
     Descr="If the value of this object is 0 (zero) then
             Loop Dection for Path Vectors for this Peer
             is disabled.

             Otherwise, if this object has a value greater than
             zero, then Loop Dection for Path  Vectors for this
             Peer is enabled and the Path Vector Limit is this value."
EDESC
#
#
#
EVENT mplsLdpSessionUp .1.3.6.1.2.1.10.166.4.0.3 "Status Events" Normal
FORMAT If this notification is sent when the $*
SDESC
If this notification is sent when the
value of 'mplsLdpSessionState' enters
the 'operational(5)' state.
Variables:
  1: mplsLdpSessionState
     Syntax="INTEGER"
       1: nonexistent
       2: initialized
       3: openrec
       4: opensent
       5: operational
     Descr="The current state of the session, all of the
             states 1 to 5 are based on the state machine
             for session negotiation behavior."
  2: mplsLdpSessionDiscontinuityTime
     Syntax="TICKS"
     Descr="The value of sysUpTime on the most recent occasion
             at which any one or more of this session's counters
             suffered a discontinuity.  The relevant counters are
             the specific instances associated with this session
             of any Counter32 object contained in the
             mplsLdpSessionStatsTable.

             The initial value of this object is the value of
             sysUpTime when the entry was created in this table.

             Also, a command generator can distinguish when a session
             between a given Entity and Peer goes away and a new
             session is established.  This value would change and
             thus indicate to the command generator that this is a
             different session."
  3: mplsLdpSessionStatsUnknownMesTypeErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown Message Type
             Errors detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
  4: mplsLdpSessionStatsUnknownTlvErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown TLV Errors
             detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
EDESC
#
#
#
EVENT mplsLdpSessionDown .1.3.6.1.2.1.10.166.4.0.4 "Status Events" Normal
FORMAT This notification is sent when the $*
SDESC
This notification is sent when the
value of 'mplsLdpSessionState' leaves
the 'operational(5)' state.
Variables:
  1: mplsLdpSessionState
     Syntax="INTEGER"
       1: nonexistent
       2: initialized
       3: openrec
       4: opensent
       5: operational
     Descr="The current state of the session, all of the
             states 1 to 5 are based on the state machine
             for session negotiation behavior."
  2: mplsLdpSessionDiscontinuityTime
     Syntax="TICKS"
     Descr="The value of sysUpTime on the most recent occasion
             at which any one or more of this session's counters
             suffered a discontinuity.  The relevant counters are
             the specific instances associated with this session
             of any Counter32 object contained in the
             mplsLdpSessionStatsTable.

             The initial value of this object is the value of
             sysUpTime when the entry was created in this table.

             Also, a command generator can distinguish when a session
             between a given Entity and Peer goes away and a new
             session is established.  This value would change and
             thus indicate to the command generator that this is a
             different session."
  3: mplsLdpSessionStatsUnknownMesTypeErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown Message Type
             Errors detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
  4: mplsLdpSessionStatsUnknownTlvErrors
     Syntax="COUNTER"
     Descr="This object counts the number of Unknown TLV Errors
             detected by this LSR/LER during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSessionDiscontinuityTime."
EDESC
#
#
#
#
MIB: SNMP-USM-AES-MIB (file:./rfc3826-snmp-usm-aes.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TE-MIB (file:./rfc3970-te.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT teTunnelUp .1.3.6.1.2.1.122.0.1 "Status Events" Normal
FORMAT A teTunnelUp notification is generated when the $*
SDESC
A teTunnelUp notification is generated when the
Tunnel indexed by teTunnelName transitions to the
'up' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose
transition to up made the tunnel go up.
This notification MUST be limited to at most one
every minute, in case the tunnel flaps up and down.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelDown .1.3.6.1.2.1.122.0.2 "Status Events" Normal
FORMAT A teTunnelDown notification is generated when the $*
SDESC
A teTunnelDown notification is generated when the
Tunnel indexed by teTunnelName transitions to the
'down' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose
transition to down made the tunnel go down.
This notification MUST be limited to at most one
every minute, in case the tunnel flaps up and down.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelChanged .1.3.6.1.2.1.122.0.3 "Status Events" Normal
FORMAT A teTunnelChanged notification is generated when an $*
SDESC
A teTunnelChanged notification is generated when an
active path on the Tunnel indexed by teTunnelName
changes or a new path becomes active.  The value
of tePathName is the new active path.
This notification MUST be limited to at most one
every minute, in case the tunnel changes quickly.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
EVENT teTunnelRerouted .1.3.6.1.2.1.122.0.4 "Status Events" Normal
FORMAT A teTunnelRerouted notification is generated when $*
SDESC
A teTunnelRerouted notification is generated when
an active path for the Tunnel indexed by
teTunnelName stays the same, but its route changes.
This notification MUST be limited to at most one
every minute, in case the tunnel reroutes quickly.

Variables:
  1: teTunnelName
     Syntax="OCTETSTR"
     Descr="Name of the Traffic Tunnel.

                 Note that the name of a Tunnel MUST be unique.
                 When a SET request contains a name that is already
                 in use for another entry, then the implementation
                 must return an inconsistentValue error.

                 The value of this object cannot be changed if the
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
  2: tePathName
     Syntax="OCTETSTR"
     Descr="The name of this path.

                 A pathName must be unique within the set of paths
                 over a single tunnel.  If a SET request is received
                 with a duplicate name, then the implementation MUST
                 return an inconsistentValue error.

                 The value of this object cannot be changed
                 if the value of the corresponding teTunnelRowStatus
                 object is 'active'.
                "
EDESC
#
#
#
#
MIB: INET-ADDRESS-MIB (file:./rfc4001-inet-address.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TCP-MIB (file:./rfc4022-tcp.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: FC-MGMT-MIB (file:./rfc4044-fc-mgmt.mib) converted on Sat Apr  2 10:27:31 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: TUNNEL-MIB (file:./rfc4087-tunnel.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: UDP-MIB (file:./rfc4113-udp.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ENTITY-MIB (file:./rfc4133-entity.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT entConfigChange .1.3.6.1.2.1.47.2.0.1 "Status Events" Normal
FORMAT An entConfigChange notification is generated when the value $*
SDESC
An entConfigChange notification is generated when the value
of entLastChangeTime changes.  It can be utilized by an NMS
to trigger logical/physical entity table maintenance polls.
An agent should not generate more than one entConfigChange
'notification-event' in a given time interval (five seconds
is the suggested default).  A 'notification-event' is the
transmission of a single trap or inform PDU to a list of
notification destinations.
If additional configuration changes occur within the
throttling period, then notification-events for these
changes should be suppressed by the agent until the current
throttling period expires.  At the end of a throttling
period, one notification-event should be generated if any
configuration changes occurred since the start of the
throttling period.  In such a case, another throttling
period is started right away.
An NMS should periodically check the value of
entLastChangeTime to detect any missed entConfigChange
notification-events, e.g., due to throttling or transmission
loss.
EDESC
#
#
#
#
MIB: VPN-TC-STD-MIB (file:./rfc4265-vpn-tc-std.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: BGP4-MIB (file:./rfc4273-bgp4.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT bgpEstablishedNotification .1.3.6.1.2.1.15.0.1 "Status Events" Normal
FORMAT The bgpEstablishedNotification event is generated $*
SDESC
The bgpEstablishedNotification event is generated
when the BGP FSM enters the established state.
This Notification replaces the bgpEstablished
Notification.
Variables:
  1: bgpPeerRemoteAddr
     Syntax="IPADDR"
     Descr="The remote IP address of this entry's BGP
                     peer."
  2: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  3: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpBackwardTransNotification .1.3.6.1.2.1.15.0.2 "Status Events" Normal
FORMAT The bgpBackwardTransNotification event is $*
SDESC
The bgpBackwardTransNotification event is
generated when the BGP FSM moves from a higher
numbered state to a lower numbered state.
This Notification replaces the
bgpBackwardsTransition Notification.
Variables:
  1: bgpPeerRemoteAddr
     Syntax="IPADDR"
     Descr="The remote IP address of this entry's BGP
                     peer."
  2: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  3: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpEstablished .1.3.6.1.2.1.15.7.1 "Status Events" Normal
FORMAT The BGP Established event is generated when $*
SDESC
The BGP Established event is generated when
the BGP FSM enters the ESTABLISHED state.
Variables:
  1: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  2: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
EVENT bgpBackwardTransition .1.3.6.1.2.1.15.7.2 "Status Events" Normal
FORMAT The BGPBackwardTransition Event is generated $*
SDESC
The BGPBackwardTransition Event is generated
when the BGP FSM moves from a higher numbered
state to a lower numbered state.
Variables:
  1: bgpPeerLastError
     Syntax="OCTETSTR"
     Descr="The last error code and subcode seen by this
                     peer on this connection.  If no error has
                     occurred, this field is zero.  Otherwise, the
                     first byte of this two byte OCTET STRING
                     contains the error code, and the second byte
                     contains the subcode."
  2: bgpPeerState
     Syntax="INTEGER"
       1: idle
       2: connect
       3: active
       4: opensent
       5: openconfirm
       6: established
     Descr="The BGP peer connection state."
EDESC
#
#
#
#
MIB: IP-FORWARD-MIB (file:./rfc4292-ip-forward.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IP-MIB (file:./rfc4293-ip.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: P-BRIDGE-MIB (file:./rfc4363-pbridge.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: Q-BRIDGE-MIB (file:./rfc4363-qbridge.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-L3VPN-STD-MIB (file:./rfc4382-mpls-l3vpn-std.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsL3VpnVrfUp .1.3.6.1.2.1.10.166.11.0.1 "Status Events" Normal
FORMAT This notification is generated when: $*
SDESC
This notification is generated when:
a. No interface is associated with this VRF, and the first
(and only first) interface associated with it has its
ifOperStatus change to up(1).
b. One interface is associated with this VRF, and
the ifOperStatus of this interface changes to up(1).
c. Multiple interfaces are associated with this VRF, and the
ifOperStatus of all interfaces is down(2), and the first
of those interfaces has its ifOperStatus change to up(1).
Variables:
  1: mplsL3VpnIfConfRowStatus
     Syntax="INTEGER"
       1: active
       2: notInService
       3: notReady
       4: createAndGo
       5: createAndWait
       6: destroy
     Descr="This variable is used to create, modify, and/or
        delete a row in this table.  Rows in this
        table signify that the specified interface is
        associated with this VRF.  If the row creation
        operation succeeds, the interface will have been
        associated with the specified VRF, otherwise the
        agent MUST not allow the association.  If the agent
        only allows read-only operations on this table, it
        MUST create entries in this table as they are created
        on the device.  When a row in this table is in
        active(1) state, no objects in that row can be
        modified except mplsL3VpnIfConfStorageType and
        mplsL3VpnIfConfRowStatus."
  2: mplsL3VpnVrfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
     Descr="Denotes whether or not a VRF is operational.  A VRF is
        up(1) when there is at least one interface associated
        with the VRF whose ifOperStatus is up(1).  A VRF is
        down(2) when:
        a. There does not exist at least one interface whose
           ifOperStatus is up(1).
        b. There are no interfaces associated with the VRF."
EDESC
#
#
#
EVENT mplsL3VpnVrfDown .1.3.6.1.2.1.10.166.11.0.2 "Status Events" Normal
FORMAT This notification is generated when: $*
SDESC
This notification is generated when:
a. One interface is associated with this VRF, and
the ifOperStatus of this interface changes from up(1)
to down(2).
b. Multiple interfaces are associated with this VRF, and
the ifOperStatus of all except one of these interfaces is
equal to up(1), and the ifOperStatus of that interface
changes from up(1) to down(2).
c. The last interface with ifOperStatus equal to up(1)
is disassociated from a VRF.
Variables:
  1: mplsL3VpnIfConfRowStatus
     Syntax="INTEGER"
       1: active
       2: notInService
       3: notReady
       4: createAndGo
       5: createAndWait
       6: destroy
     Descr="This variable is used to create, modify, and/or
        delete a row in this table.  Rows in this
        table signify that the specified interface is
        associated with this VRF.  If the row creation
        operation succeeds, the interface will have been
        associated with the specified VRF, otherwise the
        agent MUST not allow the association.  If the agent
        only allows read-only operations on this table, it
        MUST create entries in this table as they are created
        on the device.  When a row in this table is in
        active(1) state, no objects in that row can be
        modified except mplsL3VpnIfConfStorageType and
        mplsL3VpnIfConfRowStatus."
  2: mplsL3VpnVrfOperStatus
     Syntax="INTEGER"
       1: up
       2: down
     Descr="Denotes whether or not a VRF is operational.  A VRF is
        up(1) when there is at least one interface associated
        with the VRF whose ifOperStatus is up(1).  A VRF is
        down(2) when:
        a. There does not exist at least one interface whose
           ifOperStatus is up(1).
        b. There are no interfaces associated with the VRF."
EDESC
#
#
#
EVENT mplsL3VpnVrfRouteMidThreshExceeded .1.3.6.1.2.1.10.166.11.0.3 "Status Events" Normal
FORMAT This notification is generated when the number of routes $*
SDESC
This notification is generated when the number of routes
contained by the specified VRF exceeds the value indicated by
mplsL3VpnVrfMidRouteThreshold.  A single notification MUST be
generated when this threshold is exceeded, and no other
notifications of this type should be issued until the value
of mplsL3VpnVrfPerfCurrNumRoutes has fallen below that of
mplsL3VpnVrfConfMidRteThresh.
Variables:
  1: mplsL3VpnVrfPerfCurrNumRoutes
     Syntax="GAUGE"
     Descr="Indicates the number of routes currently used by this
        VRF."
  2: mplsL3VpnVrfConfMidRteThresh
     Syntax="UNSIGNED32"
     Descr="Denotes mid-level water marker for the number
      of routes that this VRF may hold."
EDESC
#
#
#
EVENT mplsL3VpnVrfNumVrfRouteMaxThreshExceeded .1.3.6.1.2.1.10.166.11.0.4 "Status Events" Normal
FORMAT This notification is generated when the number of routes $*
SDESC
This notification is generated when the number of routes
contained by the specified VRF exceeds or attempts to exceed
the maximum allowed value as indicated by
mplsL3VpnVrfMaxRouteThreshold.  In cases where
mplsL3VpnVrfConfHighRteThresh is set to the same value
as mplsL3VpnVrfConfMaxRoutes, mplsL3VpnVrfConfHighRteThresh
need not be exceeded; rather, just reached for this notification
to be issued.
Note that mplsL3VpnVrfConfRteMxThrshTime denotes the interval
at which the this notification will be reissued after the
maximum value has been exceeded (or reached if
mplsL3VpnVrfConfMaxRoutes and mplsL3VpnVrfConfHighRteThresh are
equal) and the initial notification has been issued.  This value
is intended to prevent continuous generation of notifications by
an agent in the event that routes are continually added to a VRF
after it has reached its maximum value.  The default value is 0
minutes.  If this value is set to 0, the agent should only issue
a single notification at the time that the maximum threshold has
been reached, and should not issue any more notifications until
the value of routes has fallen below the configured threshold
value.
Variables:
  1: mplsL3VpnVrfPerfCurrNumRoutes
     Syntax="GAUGE"
     Descr="Indicates the number of routes currently used by this
        VRF."
  2: mplsL3VpnVrfConfHighRteThresh
     Syntax="UNSIGNED32"
     Descr="Denotes high-level water marker for the number of
      routes that this VRF may hold."
EDESC
#
#
#
EVENT mplsL3VpnNumVrfSecIllglLblThrshExcd .1.3.6.1.2.1.10.166.11.0.5 "Status Events" Normal
FORMAT This notification is generated when the number of illegal $*
SDESC
This notification is generated when the number of illegal
label violations on a VRF as indicated by
mplsL3VpnVrfSecIllegalLblVltns has exceeded
mplsL3VpnIllLblRcvThrsh.  The threshold is not
included in the varbind here because the value of
mplsL3VpnVrfSecIllegalLblVltns should be one greater than
the threshold at the time this notification is issued.
Variables:
  1: mplsL3VpnVrfSecIllegalLblVltns
     Syntax="COUNTER"
     Descr="Indicates the number of illegally received
        labels on this VPN/VRF.

        Discontinuities in the value of this counter can occur
        at re-initialization of the management system, and at
        other times as indicated by the value of
        mplsL3VpnVrfSecDiscontinuityTime."
EDESC
#
#
#
EVENT mplsL3VpnNumVrfRouteMaxThreshCleared .1.3.6.1.2.1.10.166.11.0.6 "Status Events" Normal
FORMAT This notification is generated only after the number of routes $*
SDESC
This notification is generated only after the number of routes
contained by the specified VRF exceeds or attempts to exceed
the maximum allowed value as indicated by
mplsVrfMaxRouteThreshold, and then falls below this value.  The
emission of this notification informs the operator that the
error condition has been cleared without the operator having to
query the device.
Note that mplsL3VpnVrfConfRteMxThrshTime denotes the interval at
which the mplsNumVrfRouteMaxThreshExceeded notification will
be reissued after the maximum value has been exceeded (or
reached if mplsL3VpnVrfConfMaxRoutes and
mplsL3VpnVrfConfHighRteThresh are equal) and the initial
notification has been issued.  Therefore,
the generation of this notification should also be emitted with
this same frequency (assuming that the error condition is
cleared).  Specifically, if the error condition is reached and
cleared several times during the period of time specified in
mplsL3VpnVrfConfRteMxThrshTime, only a single notification will
be issued to indicate the first instance of the error condition
as well as the first time the error condition is cleared.
This behavior is intended to prevent continuous generation of
notifications by an agent in the event that routes are
continually added and removed to/from a VRF after it has
reached its maximum value.  The default value is 0.  If this
value is set to 0, the agent should issue a notification
whenever the maximum threshold has been cleared.
Variables:
  1: mplsL3VpnVrfPerfCurrNumRoutes
     Syntax="GAUGE"
     Descr="Indicates the number of routes currently used by this
        VRF."
  2: mplsL3VpnVrfConfHighRteThresh
     Syntax="UNSIGNED32"
     Descr="Denotes high-level water marker for the number of
      routes that this VRF may hold."
EDESC
#
#
#
#
MIB: T11-FC-NAME-SERVER-MIB (file:./rfc4438-t11-fc-name-server.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11NsRejectRegNotify .1.3.6.1.2.1.135.0.1 "Status Events" Normal
FORMAT This notification is generated whenever a request to $*
SDESC
This notification is generated whenever a request to
register information in a Name Server Information
Subset (for which the corresponding instance of
t11NsInfoSubsetRejReqNotfyEnable is 'true') is
rejected on a particular Fabric for a particular Nx_Port.
The value of t11FamLocalSwitchWwn indicates the
WWN of the switch that received the request.
(If the WWN is unavailable, the value is set to
the zero-length string.)
The value of t11NsRejectCtCommandString indicates
the rejected request, and the values of
t11NsRejectReasonCode, t11NsRejReasonCodeExp, and
t11NsRejReasonVendorCode indicate the reason for
the rejection.
The value of t11NsRegPortName represents the Port Name
if it is able to be extracted out of the Registration
Request, or otherwise the value as currently registered
on the port.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11NsRegPortName
     Syntax="OCTETSTR"
     Descr="The Port_Name (WWN) of this Nx_Port.
           If this object has not been registered, then its value
           is the zero-length string."
  3: t11NsRejectCtCommandString
     Syntax="OCTETSTR"
     Descr="The binary content of the Registration Request,
           formatted as an octet string (in network byte
           order) containing the CT_IU, as described in
           Table 2 of [FC-GS-4] (including the preamble),
           which was most recently rejected for the particular
           Name Server Information Subset on the particular port
           on the particular Fabric.

           This object contains the zero-length string
           if and when the CT-IU's content is unavailable.

           When the length of this object is 255 octets, it
           contains the first 255 octets of the CT-IU (in
           network-byte order)."
  4: t11NsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="A registration reject reason code.  This object
           contains the reason code of the most recent Name
           Server Registration Request failure for the
           particular port on the particular Fabric."
  5: t11NsRejReasonCodeExp
     Syntax="INTEGER"
       1: noAdditionalExplanation
       10: symbolicNodeNameNotRegistered
       11: portTypeNotRegistered
       12: portIpAddressNotRegistered
       13: fabricPortNameNotRegistered
       14: hardAddressNotRegistered
       15: fc4DescriptorNotRegistered
       16: fc4FeaturesNotRegistered
       17: accessDenied
       18: unacceptablePortIdentifier
       19: databaseEmpty
       2: portIdentifierNotRegistered
       20: noObjectRegInSpecifiedScope
       21: domainIdNotPresent
       22: portIdNotPresent
       23: noDeviceAttached
       24: authorizationException
       25: authenticationException
       26: databaseFull
       3: portNameNotRegistered
       4: nodeNameNotRegistered
       5: classOfServiceNotRegistered
       6: nodeIpAddressNotRegistered
       7: ipaNotRegistered
       8: fc4TypeNotRegistered
       9: symbolicPortNameNotRegistered
     Descr="A registration reject reason code explanation.  This
           object contains the reason code explanation of the most
           recent Name Server Registration Request failure for the
           particular port on the particular Fabric."
  6: t11NsRejReasonVendorCode
     Syntax="OCTETSTR"
     Descr="A registration reject vendor-specific code.  This
           object contains the vendor-specific code of the most
           recent Name Server Registration Request failure for the
           particular port on the particular Fabric."
EDESC
#
#
#
#
MIB: T11-FC-FABRIC-ADDR-MGR-MIB (file:./rfc4439-t11-fc-fabric-addr-mgr.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11FamDomainIdNotAssignedNotify .1.3.6.1.2.1.137.0.1 "Status Events" Normal
FORMAT This notification indicates that a Domain_ID has not $*
SDESC
This notification indicates that a Domain_ID has not
been configured or assigned for a particular Fabric,
identified by t11FamNotifyFabricIndex, on a particular
switch identified by t11FamLocalSwitchWwn.  This could
happen under the following conditions, and results in the
switch isolating E_Ports on the Fabric:
- if the switch's request for a configured static
Domain_ID is rejected or no other Domain_ID is
assigned, then the E_Ports are isolated.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax="UNSIGNED32"
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
EVENT t11FamNewPrincipalSwitchNotify .1.3.6.1.2.1.137.0.2 "Status Events" Normal
FORMAT This notification indicates that a particular switch, $*
SDESC
This notification indicates that a particular switch,
identified by t11FamLocalSwitchWwn, has become the new
Principal Switch on the Fabric identified by
t11FamNotifyFabricIndex.
This notification is sent soon after its election as
the new Principal Switch, i.e., upon expiration of a
Principal Switch selection timer that is equal to
twice the Fabric Stability Timeout value (F_S_TOV).
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax="UNSIGNED32"
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
EVENT t11FamFabricChangeNotify .1.3.6.1.2.1.137.0.3 "Status Events" Normal
FORMAT This notification is sent whenever a particular switch, $*
SDESC
This notification is sent whenever a particular switch,
identified by t11FamLocalSwitchWwn, sends or
receives a Build Fabric (BF) or a ReConfigure Fabric
(RCF) message on the Fabric identified by
t11FamNotifyFabricIndex.
This notification is not sent if a
't11FamNewPrincipalSwitchNotify' notification is sent
for the same event.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FamNotifyFabricIndex
     Syntax="UNSIGNED32"
     Descr="A unique index value that identifies a particular
           Fabric for which a particular notification is generated.

           In a Fabric conformant to SW-3, only a single Fabric
           can operate within a physical infrastructure, and thus,
           the value of this Fabric Index will always be 1.

           However, the current standard, FC-SW-4, defines
           how multiple Fabrics, each with its own management
           instrumentation, could operate within one (or more)
           physical infrastructures.  In order to accommodate this
           scenario, this index value is used to uniquely identify a
           particular Fabric within a physical infrastructure."
EDESC
#
#
#
#
MIB: T11-TC-MIB (file:./rfc4439-t11-tc.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: ISIS-MIB (file:./rfc4444-isis.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT isisDatabaseOverload .1.3.6.1.2.1.138.0.1 "Status Events" Normal
FORMAT This notification is generated when the system $*
SDESC
This notification is generated when the system
enters or leaves the Overload state.  The number
of times this has been generated and cleared is kept
track of by isisSysStatLSPDbaseOloads.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisSysLevelState
     Syntax="INTEGER"
       1: off
       2: on
       3: waiting
       4: overloaded
     Descr="The state of the database at this level.
             The value 'off' indicates that IS-IS is not active at
             this level.
             The value 'on' indicates that IS-IS is active at this
             level and is not overloaded.
             The value 'waiting' indicates a database that is low on
             an essential resource, such as memory.
             The administrator may force the state to 'overloaded'
             by setting the object isisSysLevelSetOverload.
             If the state is 'waiting' or 'overloaded', we
             originate LSPs with the overload bit set."
EDESC
#
#
#
EVENT isisManualAddressDrops .1.3.6.1.2.1.138.0.2 "Status Events" Normal
FORMAT This notification is generated when one of the $*
SDESC
This notification is generated when one of the
manual areaAddresses assigned to this system is
ignored when computing routes.  The object
isisNotificationAreaAddress describes the area that
has been dropped.
The number of times this event has been generated
is counted by isisSysStatManAddrDropFromAreas.
The agent must throttle the generation of
consecutive isisManualAddressDrops notifications
so that there is at least a 5-second gap between
notifications of this type.  When notifications
are throttled, they are dropped, not queued for
sending at a future time.
Variables:
  1: isisNotificationAreaAddress
     Syntax="OCTETSTR"
     Descr="An Area Address."
EDESC
#
#
#
EVENT isisCorruptedLSPDetected .1.3.6.1.2.1.138.0.3 "Status Events" Normal
FORMAT This notification is generated when we find that $*
SDESC
This notification is generated when we find that
an LSP that was stored in memory has become
corrupted.  The number of times this has been
generated is counted by isisSysCorrLSPs.
We forward an LSP ID.  We may have independent
knowledge of the ID, but in some implementations
there is a chance that the ID itself will be
corrupted.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisAttemptToExceedMaxSequence .1.3.6.1.2.1.138.0.4 "Status Events" Normal
FORMAT When the sequence number on an LSP we generate $*
SDESC
When the sequence number on an LSP we generate
wraps the 32-bit sequence counter, we purge and
wait to re-announce this information.  This
notification describes that event.  Since these
should not be generated rapidly, we generate
an event each time this happens.
While the first 6 bytes of the LSPID are ours,
the other two contain useful information.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisIDLenMismatch .1.3.6.1.2.1.138.0.5 "Status Events" Normal
FORMAT A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with a different value for the System ID Length.
This notification includes an index to identify
the circuit where we saw the PDU and the header of
the PDU, which may help a network manager identify
the source of the confusion.
The agent must throttle the generation of
consecutive isisIDLenMismatch notifications
so that there is at least a 5-second gap between
notifications of this type.  When notifications
are throttled, they are dropped, not queued for
sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduFieldLen
     Syntax="UNSIGNED32"
     Descr="Holds the System ID length reported in PDU we received."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisMaxAreaAddressesMismatch .1.3.6.1.2.1.138.0.6 "Status Events" Normal
FORMAT A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with a different value for the Maximum Area
Addresses.  This notification includes the
header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisMaxAreaAddressesMismatch
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduMaxAreaAddress
     Syntax="UNSIGNED32"
     Descr="Holds the Max Area Addresses reported in a PDU
             we received."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisOwnLSPPurge .1.3.6.1.2.1.138.0.7 "Status Events" Normal
FORMAT A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with our systemID and zero age.  This
notification includes the circuit Index
and router ID from the LSP, if available,
which may help a network manager
identify the source of the confusion.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisSequenceNumberSkip .1.3.6.1.2.1.138.0.8 "Status Events" Normal
FORMAT When we receive an LSP with our System ID $*
SDESC
When we receive an LSP with our System ID
and different contents, we may need to reissue
the LSP with a higher sequence number.
We send this notification if we need to increase
the sequence number by more than one.  If two
Intermediate Systems are configured with the same
System ID, this notification will fire.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisAuthenticationTypeFailure .1.3.6.1.2.1.138.0.9 "Status Events" Normal
FORMAT A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with the wrong authentication type field.
This notification includes the header of the
packet, which may help a network manager
identify the source of the confusion.
The agent must throttle the generation of
consecutive isisAuthenticationTypeFailure
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAuthenticationFailure .1.3.6.1.2.1.138.0.10 "Status Events" Normal
FORMAT A notification sent when we receive a PDU $*
SDESC
A notification sent when we receive a PDU
with an incorrect authentication information
field.  This notification includes the header
of the packet, which may help a network manager
identify the source of the confusion.
The agent must throttle the generation of
consecutive isisAuthenticationFailure
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisVersionSkew .1.3.6.1.2.1.138.0.11 "Status Events" Normal
FORMAT A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS running a different version
of the protocol.  This notification includes
the header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisVersionSkew notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduProtocolVersion
     Syntax="UNSIGNED32"
     Descr="Holds the Protocol version reported in PDU we received."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAreaMismatch .1.3.6.1.2.1.138.0.12 "Status Events" Normal
FORMAT A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS that does not share any
area address.  This notification includes
the header of the packet, which may help a
network manager identify the source of the
confusion.
The agent must throttle the generation of
consecutive isisAreaMismatch notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  2: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisRejectedAdjacency .1.3.6.1.2.1.138.0.13 "Status Events" Normal
FORMAT A notification sent when we receive a Hello $*
SDESC
A notification sent when we receive a Hello
PDU from an IS but do not establish an
adjacency for some reason.
The agent must throttle the generation of
consecutive isisRejectedAdjacency notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisLSPTooLargeToPropagate .1.3.6.1.2.1.138.0.14 "Status Events" Normal
FORMAT A notification sent when we attempt to propagate $*
SDESC
A notification sent when we attempt to propagate
an LSP that is larger than the dataLinkBlockSize
for the circuit.
The agent must throttle the generation of
consecutive isisLSPTooLargeToPropagate notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of LSP we received that is too
             big to forward."
  4: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
EDESC
#
#
#
EVENT isisOrigLSPBuffSizeMismatch .1.3.6.1.2.1.138.0.15 "Status Events" Normal
FORMAT A notification sent when a Level 1 LSP or Level $*
SDESC
A notification sent when a Level 1 LSP or Level
2 LSP is received that is larger than the local
value for isisSysLevelOrigLSPBuffSize, or when an
LSP is received that contains the supported Buffer Size
option and the value in the PDU option field does
not match the local value for isisSysLevelOrigLSPBuffSize.
We pass up the size from the option field and the
size of the LSP when one of them exceeds our configuration.
The agent must throttle the generation of
consecutive isisOrigLSPBuffSizeMismatch notifications
so that there is at least a 5-second gap
between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  4: isisPduOriginatingBufferSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of isisSysLevelOrigLSPBuffSize advertised
             by the peer in the originatingLSPBufferSize TLV.
             If the peer does not advertise this TLV, this
             value is set to 0."
  5: isisPduBufferSize
     Syntax="UNSIGNED32"
     Descr="Holds the size of LSP received from peer."
EDESC
#
#
#
EVENT isisProtocolsSupportedMismatch .1.3.6.1.2.1.138.0.16 "Status Events" Normal
FORMAT A notification sent when a non-pseudonode $*
SDESC
A notification sent when a non-pseudonode
segment 0 LSP is received that has no matching
protocols supported.  This may be because the system
does not generate the field, or because there are no
common elements.  The list of protocols supported
should be included in the notification: it may be
empty if the TLV is not supported, or if the
TLV is empty.
The agent must throttle the generation of
consecutive isisProtocolsSupportedMismatch
notifications so that there is at least a 5-second
gap between notifications of this type.  When
notifications are throttled, they are dropped, not
queued for sending at a future time.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduProtocolsSupported
     Syntax="OCTETSTR"
     Descr="The list of protocols supported by an
             adjacent system.  This may be empty."
  4: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  5: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
EDESC
#
#
#
EVENT isisAdjacencyChange .1.3.6.1.2.1.138.0.17 "Status Events" Normal
FORMAT A notification sent when an adjacency changes $*
SDESC
A notification sent when an adjacency changes
state, entering or leaving state up.
The first 6 bytes of the isisPduLspId are the
SystemID of the adjacent IS.
The isisAdjState is the new state of the adjacency.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  3: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  4: isisAdjState
     Syntax="INTEGER"
       1: down
       2: initializing
       3: up
       4: failed
     Descr="The current state of an adjacency."
EDESC
#
#
#
EVENT isisLSPErrorDetected .1.3.6.1.2.1.138.0.18 "Status Events" Normal
FORMAT This notification is generated when we receive $*
SDESC
This notification is generated when we receive
an LSP with a parse error.  The isisCircIfIndex
holds an index of the circuit on which the PDU
arrived.  The isisPduFragment holds the start of the
LSP, and the isisErrorOffset points to the problem.
If the problem is a malformed TLV, isisErrorOffset
points to the start of the TLV, and isisErrorTLVType
holds the value of the type.
If the problem is with the LSP header, isisErrorOffset
points to the suspicious byte.
The number of such LSPs is accumulated in
isisSysStatLSPErrors.
Variables:
  1: isisNotificationSysLevelIndex
     Syntax="INTEGER"
       1: level1
       2: level2
       3: level1and2
     Descr="The system level for this notification."
  2: isisPduLspId
     Syntax="OCTETSTR"
     Descr="An Octet String that uniquely identifies
             a Link State PDU."
  3: isisNotificationCircIfIndex
     Syntax="UNSIGNED32"
     Descr="The identifier of this circuit relevant to
             this notification."
  4: isisPduFragment
     Syntax="OCTETSTR"
     Descr="Holds up to 64 initial bytes of a PDU that
             triggered the notification."
  5: isisErrorOffset
     Syntax="UNSIGNED32"
     Descr="An offset to a problem in a PDU.  If the problem
             is a malformed TLV, this points to the beginning
             of the TLV.  If the problem is in the header, this
             points to the byte that is suspicious."
  6: isisErrorTLVType
     Syntax="UNSIGNED32"
     Descr="The type for a malformed TLV."
EDESC
#
#
#
#
MIB: RMON2-MIB (file:./rfc4502-rmon2.mib) converted on Sat Apr  2 10:27:32 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: DISMAN-TRACEROUTE-MIB (file:./rfc4560-disman-traceroute.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT traceRoutePathChange .1.3.6.1.2.1.81.0.1 "Status Events" Normal
FORMAT The path to a target has changed. $*
SDESC
The path to a target has changed.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
EVENT traceRouteTestFailed .1.3.6.1.2.1.81.0.2 "Status Events" Normal
FORMAT Could not determine the path to a target. $*
SDESC
Could not determine the path to a target.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
EVENT traceRouteTestCompleted .1.3.6.1.2.1.81.0.3 "Status Events" Normal
FORMAT The path to a target has just been determined. $*
SDESC
The path to a target has just been determined.
Variables:
  1: traceRouteCtlTargetAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Specifies the type of host address to be used on the
        traceroute request at the remote host."
  2: traceRouteCtlTargetAddress
     Syntax="OCTETSTR"
     Descr="Specifies the host address used on the
        traceroute request at the remote host.  The
        host address type can be determined by
        examining the value of the corresponding
        traceRouteCtlTargetAddressType.

        A value for this object MUST be set prior to
        transitioning its corresponding traceRouteCtlEntry to
        active(1) via traceRouteCtlRowStatus."
  3: traceRouteResultsIpTgtAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="This object indicates the type of address stored
        in the corresponding traceRouteResultsIpTgtAddr
        object."
  4: traceRouteResultsIpTgtAddr
     Syntax="OCTETSTR"
     Descr="This object reports the IP address associated
        with a traceRouteCtlTargetAddress value when the
        destination address is specified as a DNS name.
        The value of this object should be a zero-length
        octet string when a DNS name is not specified or
        when a specified DNS name fails to resolve."
EDESC
#
#
#
#
MIB: T11-FC-ROUTE-MIB (file:./rfc4625-t11-fc-route.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: T11-FC-VIRTUAL-FABRIC-MIB (file:./rfc4747-t11-fc-virtual-fabric.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPF-MIB (file:./rfc4750-ospf.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPF-TRAP-MIB (file:./rfc4750-ospf-trap.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ospfVirtIfStateChange .1.3.6.1.2.1.14.16.2.1 "Status Events" Normal
FORMAT An ospfVirtIfStateChange trap signifies that there $*
SDESC
An ospfVirtIfStateChange trap signifies that there
has been a change in the state of an OSPF virtual
interface.
This trap should be generated when the interface
state regresses (e.g., goes from Point-to-Point to Down)
or progresses to a terminal state
(i.e., Point-to-Point).
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfVirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states."
EDESC
#
#
#
EVENT ospfNbrStateChange .1.3.6.1.2.1.14.16.2.2 "Status Events" Normal
FORMAT An ospfNbrStateChange trap signifies that $*
SDESC
An ospfNbrStateChange trap signifies that
there has been a change in the state of a
non-virtual OSPF neighbor.  This trap should be
generated when the neighbor state regresses
(e.g., goes from Attempt or Full to 1-Way or
Down) or progresses to a terminal state (e.g.,
2-Way or Full).  When an neighbor transitions
from or to Full on non-broadcast multi-access
and broadcast networks, the trap should be
generated by the designated router.  A designated
router transitioning to Down will be noted by
ospfIfStateChange.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfNbrIpAddr
     Syntax="IPADDR"
     Descr="The IP address this neighbor is using in its
          IP source address.  Note that, on addressless
          links, this will not be 0.0.0.0 but the
          address of another of the neighbor's interfaces."
  3: ospfNbrAddressLessIndex
     Syntax="INTEGER32"
     Descr="On an interface having an IP address, zero.
          On addressless interfaces, the corresponding
          value of ifIndex in the Internet Standard MIB.
          On row creation, this can be derived from the
          instance."
  4: ospfNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer (represented as a type
          IpAddress) uniquely identifying the neighboring
          router in the Autonomous System."
  5: ospfNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the relationship with this neighbor."
EDESC
#
#
#
EVENT ospfVirtNbrStateChange .1.3.6.1.2.1.14.16.2.3 "Status Events" Normal
FORMAT An ospfVirtNbrStateChange trap signifies that there $*
SDESC
An ospfVirtNbrStateChange trap signifies that there
has been a change in the state of an OSPF virtual
neighbor.  This trap should be generated
when the neighbor state regresses (e.g., goes
from Attempt or Full to 1-Way or Down) or
progresses to a terminal state (e.g., Full).
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtNbrArea
     Syntax="IPADDR"
     Descr="The Transit Area Identifier."
  3: ospfVirtNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          neighboring router in the Autonomous System."
  4: ospfVirtNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the virtual neighbor relationship."
EDESC
#
#
#
EVENT ospfIfConfigError .1.3.6.1.2.1.14.16.2.4 "Status Events" Normal
FORMAT An ospfIfConfigError trap signifies that a $*
SDESC
An ospfIfConfigError trap signifies that a
packet has been received on a non-virtual
interface from a router whose configuration
parameters conflict with this router's
configuration parameters.  Note that the event
optionMismatch should cause a trap only if it
prevents an adjacency from forming.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound packet that cannot
        be identified by a neighbor instance.  When
        the last value of a trap using this object is
        needed, but no traps of that type have been sent,
        this value pertaining to this object should
        be returned as 0.0.0.0."
  5: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  6: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfVirtIfConfigError .1.3.6.1.2.1.14.16.2.5 "Status Events" Normal
FORMAT An ospfVirtIfConfigError trap signifies that a $*
SDESC
An ospfVirtIfConfigError trap signifies that a
packet has been received on a virtual interface
from a router whose configuration parameters
conflict with this router's configuration
parameters.  Note that the event optionMismatch
should cause a trap only if it prevents an
adjacency from forming.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfIfAuthFailure .1.3.6.1.2.1.14.16.2.6 "Status Events" Normal
FORMAT An ospfIfAuthFailure trap signifies that a $*
SDESC
An ospfIfAuthFailure trap signifies that a
packet has been received on a non-virtual
interface from a router whose authentication key
or authentication type conflicts with this
router's authentication key or authentication
type.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound packet that cannot
        be identified by a neighbor instance.  When
        the last value of a trap using this object is
        needed, but no traps of that type have been sent,
        this value pertaining to this object should
        be returned as 0.0.0.0."
  5: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  6: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfVirtIfAuthFailure .1.3.6.1.2.1.14.16.2.7 "Status Events" Normal
FORMAT An ospfVirtIfAuthFailure trap signifies that a $*
SDESC
An ospfVirtIfAuthFailure trap signifies that a
packet has been received on a virtual interface
from a router whose authentication key or
authentication type conflicts with this router's
authentication key or authentication type.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: optionMismatch
       11: mtuMismatch
       12: duplicateRouterId
       13: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: authTypeMismatch
       6: authFailure
       7: netMaskMismatch
       8: helloIntervalMismatch
       9: deadIntervalMismatch
     Descr="Potential types of configuration conflicts.
        Used by the ospfConfigError and
        ospfConfigVirtError traps.  When the last value
        of a trap using this object is needed, but no
        traps of that type have been sent, this value
        pertaining to this object should be returned as
        noError."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfIfRxBadPacket .1.3.6.1.2.1.14.16.2.8 "Status Events" Normal
FORMAT An ospfIfRxBadPacket trap signifies that an $*
SDESC
An ospfIfRxBadPacket trap signifies that an
OSPF packet has been received on a non-virtual
interface that cannot be parsed.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfPacketSrc
     Syntax="IPADDR"
     Descr="The IP address of an inbound packet that cannot
        be identified by a neighbor instance.  When
        the last value of a trap using this object is
        needed, but no traps of that type have been sent,
        this value pertaining to this object should
        be returned as 0.0.0.0."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfVirtIfRxBadPacket .1.3.6.1.2.1.14.16.2.9 "Status Events" Normal
FORMAT An ospfVirtIfRxBadPacket trap signifies that an OSPF $*
SDESC
An ospfVirtIfRxBadPacket trap signifies that an OSPF
packet has been received on a virtual interface
that cannot be parsed.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
EDESC
#
#
#
EVENT ospfTxRetransmit .1.3.6.1.2.1.14.16.2.10 "Status Events" Normal
FORMAT An ospfTxRetransmit trap signifies than an $*
SDESC
An ospfTxRetransmit trap signifies than an
OSPF packet has been retransmitted on a
non-virtual interface.  All packets that may be
retransmitted are associated with an LSDB entry.
The LS type, LS ID, and Router ID are used to
identify the LSDB entry.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer (represented as a type
          IpAddress) uniquely identifying the neighboring
          router in the Autonomous System."
  5: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
  6: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  7: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  8: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfVirtIfTxRetransmit .1.3.6.1.2.1.14.16.2.11 "Status Events" Normal
FORMAT An ospfVirtIfTxRetransmit trap signifies than an $*
SDESC
An ospfVirtIfTxRetransmit trap signifies than an
OSPF packet has been retransmitted on a virtual
interface.  All packets that may be retransmitted
are associated with an LSDB entry.  The LS
type, LS ID, and Router ID are used to identify
the LSDB entry.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtIfAreaId
     Syntax="IPADDR"
     Descr="The transit area that the virtual link
          traverses.  By definition, this is not 0.0.0.0."
  3: ospfVirtIfNeighbor
     Syntax="IPADDR"
     Descr="The Router ID of the virtual neighbor."
  4: ospfPacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPF packet types.  When the last value of a trap
        using this object is needed, but no traps of
        that type have been sent, this value pertaining
        to this object should be returned as nullPacket."
  5: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  6: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  7: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfOriginateLsa .1.3.6.1.2.1.14.16.2.12 "Status Events" Normal
FORMAT An ospfOriginateLsa trap signifies that a new $*
SDESC
An ospfOriginateLsa trap signifies that a new
LSA has been originated by this router.  This
trap should not be invoked for simple refreshes
of LSAs (which happens every 30 minutes), but
instead will only be invoked when an LSA is
(re)originated due to a topology change.
Additionally, this trap does not include LSAs that
are being flushed because they have reached
MaxAge.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfLsdbAreaId
     Syntax="IPADDR"
     Descr="The 32-bit identifier of the area from which
          the LSA was received."
  3: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  4: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  5: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfMaxAgeLsa .1.3.6.1.2.1.14.16.2.13 "Status Events" Normal
FORMAT An ospfMaxAgeLsa trap signifies that one of $*
SDESC
An ospfMaxAgeLsa trap signifies that one of
the LSAs in the router's link state database has
aged to MaxAge.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfLsdbAreaId
     Syntax="IPADDR"
     Descr="The 32-bit identifier of the area from which
          the LSA was received."
  3: ospfLsdbType
     Syntax="INTEGER"
       1: routerLink
       10: areaOpaqueLink
       2: networkLink
       3: summaryLink
       4: asSummaryLink
       5: asExternalLink
       6: multicastLink
       7: nssaExternalLink
     Descr="The type of the link state advertisement.
          Each link state type has a separate advertisement
          format.

          Note: External link state advertisements are permitted
          for backward compatibility, but should be displayed
          in the ospfAsLsdbTable rather than here."
  4: ospfLsdbLsid
     Syntax="IPADDR"
     Descr="The Link State ID is an LS Type Specific field
          containing either a Router ID or an IP address;
          it identifies the piece of the routing domain
          that is being described by the advertisement."
  5: ospfLsdbRouterId
     Syntax="IPADDR"
     Descr="The 32-bit number that uniquely identifies the
          originating router in the Autonomous System."
EDESC
#
#
#
EVENT ospfLsdbOverflow .1.3.6.1.2.1.14.16.2.14 "Status Events" Normal
FORMAT An ospfLsdbOverflow trap signifies that the $*
SDESC
An ospfLsdbOverflow trap signifies that the
number of LSAs in the router's link state
database has exceeded ospfExtLsdbLimit.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfExtLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
          AS-external LSAs entries that can be stored in the
          link state database.  If the value is -1, then
          there is no limit.

          When the number of non-default AS-external LSAs
          in a router's link state database reaches
          ospfExtLsdbLimit, the router enters
          overflow state.  The router never holds more than
          ospfExtLsdbLimit non-default AS-external LSAs
          in its database.  OspfExtLsdbLimit MUST be set
          identically in all routers attached to the OSPF
          backbone and/or any regular OSPF area (i.e.,
          OSPF stub areas and NSSAs are excluded).

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile
          storage."
EDESC
#
#
#
EVENT ospfLsdbApproachingOverflow .1.3.6.1.2.1.14.16.2.15 "Status Events" Normal
FORMAT An ospfLsdbApproachingOverflow trap signifies $*
SDESC
An ospfLsdbApproachingOverflow trap signifies
that the number of LSAs in the router's
link state database has exceeded ninety percent of
ospfExtLsdbLimit.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfExtLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
          AS-external LSAs entries that can be stored in the
          link state database.  If the value is -1, then
          there is no limit.

          When the number of non-default AS-external LSAs
          in a router's link state database reaches
          ospfExtLsdbLimit, the router enters
          overflow state.  The router never holds more than
          ospfExtLsdbLimit non-default AS-external LSAs
          in its database.  OspfExtLsdbLimit MUST be set
          identically in all routers attached to the OSPF
          backbone and/or any regular OSPF area (i.e.,
          OSPF stub areas and NSSAs are excluded).

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile
          storage."
EDESC
#
#
#
EVENT ospfIfStateChange .1.3.6.1.2.1.14.16.2.16 "Status Events" Normal
FORMAT An ospfIfStateChange trap signifies that there $*
SDESC
An ospfIfStateChange trap signifies that there
has been a change in the state of a non-virtual
OSPF interface.  This trap should be generated
when the interface state regresses (e.g., goes
from Dr to Down) or progresses to a terminal
state (i.e., Point-to-Point, DR Other, Dr, or
Backup).
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfIfIpAddress
     Syntax="IPADDR"
     Descr="The IP address of this OSPF interface."
  3: ospfAddressLessIf
     Syntax="INTEGER32"
     Descr="For the purpose of easing the instancing of
          addressed and addressless interfaces; this
          variable takes the value 0 on interfaces with
          IP addresses and the corresponding value of
          ifIndex for interfaces having no IP address."
  4: ospfIfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
     Descr="The OSPF Interface State."
EDESC
#
#
#
EVENT ospfNssaTranslatorStatusChange .1.3.6.1.2.1.14.16.2.17 "Status Events" Normal
FORMAT An ospfNssaTranslatorStatusChange trap indicates that $*
SDESC
An ospfNssaTranslatorStatusChange trap indicates that
there has been a change in the router's ability to
translate OSPF type-7 LSAs into OSPF type-5 LSAs.
This trap should be generated when the translator
status transitions from or to any defined status on
a per-area basis.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfAreaId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying an area.
          Area ID 0.0.0.0 is used for the OSPF backbone."
  3: ospfAreaNssaTranslatorState
     Syntax="INTEGER"
       1: enabled
       2: elected
       3: disabled
     Descr="Indicates if and how an NSSA border router is
          performing NSSA translation of type-7 LSAs into type-5
          LSAs.  When this object is set to enabled, the NSSA Border
          router's OspfAreaNssaExtTranslatorRole has been set to
          always.  When this object is set to elected, a candidate
          NSSA Border router is Translating type-7 LSAs into type-5.
          When this object is set to disabled, a candidate NSSA
          border router is NOT translating type-7 LSAs into type-5."
EDESC
#
#
#
EVENT ospfRestartStatusChange .1.3.6.1.2.1.14.16.2.18 "Status Events" Normal
FORMAT An ospfRestartStatusChange trap signifies that $*
SDESC
An ospfRestartStatusChange trap signifies that
there has been a change in the graceful restart
state for the router.  This trap should be
generated when the router restart status
changes.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfRestartStatus
     Syntax="INTEGER"
       1: notRestarting
       2: plannedRestart
       3: unplannedRestart
     Descr="Current status of OSPF graceful restart."
  3: ospfRestartInterval
     Syntax="INTEGER32"
     Descr="Configured OSPF graceful restart timeout interval.

           This object is persistent and when written
           the entity SHOULD save the change to non-volatile
           storage."
  4: ospfRestartExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at a
          graceful restart.  If the value is 'none', no restart
          has yet been attempted.  If the value is 'inProgress',
          a restart attempt is currently underway."
EDESC
#
#
#
EVENT ospfNbrRestartHelperStatusChange .1.3.6.1.2.1.14.16.2.19 "Status Events" Normal
FORMAT An ospfNbrRestartHelperStatusChange trap signifies that $*
SDESC
An ospfNbrRestartHelperStatusChange trap signifies that
there has been a change in the graceful restart
helper state for the neighbor.  This trap should be
generated when the neighbor restart helper status
transitions for a neighbor.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfNbrIpAddr
     Syntax="IPADDR"
     Descr="The IP address this neighbor is using in its
          IP source address.  Note that, on addressless
          links, this will not be 0.0.0.0 but the
          address of another of the neighbor's interfaces."
  3: ospfNbrAddressLessIndex
     Syntax="INTEGER32"
     Descr="On an interface having an IP address, zero.
          On addressless interfaces, the corresponding
          value of ifIndex in the Internet Standard MIB.
          On row creation, this can be derived from the
          instance."
  4: ospfNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer (represented as a type
          IpAddress) uniquely identifying the neighboring
          router in the Autonomous System."
  5: ospfNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
          as a graceful restart helper for the neighbor."
  6: ospfNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
          interval, if the router is acting as a restart
          helper for the neighbor."
  7: ospfNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
           as a graceful restart helper for the neighbor."
EDESC
#
#
#
EVENT ospfVirtNbrRestartHelperStatusChange .1.3.6.1.2.1.14.16.2.20 "Status Events" Normal
FORMAT An ospfVirtNbrRestartHelperStatusChange trap signifies $*
SDESC
An ospfVirtNbrRestartHelperStatusChange trap signifies
that there has been a change in the graceful restart
helper state for the virtual neighbor.  This trap should
be generated when the virtual neighbor restart helper
status transitions for a virtual neighbor.
Variables:
  1: ospfRouterId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          router in the Autonomous System.
          By convention, to ensure uniqueness, this
          should default to the value of one of the
          router's IP interface addresses.

          This object is persistent and when written
          the entity SHOULD save the change to non-volatile storage."
  2: ospfVirtNbrArea
     Syntax="IPADDR"
     Descr="The Transit Area Identifier."
  3: ospfVirtNbrRtrId
     Syntax="IPADDR"
     Descr="A 32-bit integer uniquely identifying the
          neighboring router in the Autonomous System."
  4: ospfVirtNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
          as a graceful restart helper for the neighbor."
  5: ospfVirtNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
          interval, if the router is acting as a restart
          helper for the neighbor."
  6: ospfVirtNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
           as a graceful restart helper for the neighbor."
EDESC
#
#
#
#
MIB: SIP-TC-MIB (file:./rfc4780-sip-tc.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SIP-UA-MIB (file:./rfc4780-sip-ua.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPSEC-SPD-MIB (file:./rfc4807-ipsec-spd.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-MAU-MIB (file:./rfc4836-iana-mau.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MAU-MIB (file:./rfc4836-mau.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT rpMauJabberTrap .1.3.6.1.2.1.26.0.1 "Status Events" Normal
FORMAT This trap is sent whenever a managed repeater $*
SDESC
This trap is sent whenever a managed repeater
MAU enters the jabber state.
The agent MUST throttle the generation of
consecutive rpMauJabberTraps so that there is at
least a five-second gap between them.
REFERENCE   [IEEE802.3], 30.5.1.3.1, nJabber notification.
Variables:
  1: rpMauJabberState
     Syntax="INTEGER"
       1: other
       2: unknown
       3: noJabber
       4: jabbering
     Descr="The value other(1) is returned if the jabber
                    state is not 2, 3, or 4.  The agent MUST always
                    return other(1) for MAU type dot3MauTypeAUI.

                    The value unknown(2) is returned when the MAU's
                    true state is unknown; for example, when it is
                    being initialized.

                    If the MAU is not jabbering the agent returns
                    noJabber(3).  This is the 'normal' state.

                    If the MAU is in jabber state the agent returns
                    the jabbering(4) value."
EDESC
#
#
#
EVENT ifMauJabberTrap .1.3.6.1.2.1.26.0.2 "Status Events" Normal
FORMAT This trap is sent whenever a managed interface $*
SDESC
This trap is sent whenever a managed interface
MAU enters the jabber state.
The agent MUST throttle the generation of
consecutive ifMauJabberTraps so that there is at
least a five-second gap between them.
REFERENCE   [IEEE802.3], 30.5.1.3.1, nJabber notification.
Variables:
  1: ifMauJabberState
     Syntax="INTEGER"
       1: other
       2: unknown
       3: noJabber
       4: jabbering
     Descr="The value other(1) is returned if the jabber
                    state is not 2, 3, or 4.  The agent MUST always
                    return other(1) for MAU type dot3MauTypeAUI.

                    The value unknown(2) is returned when the MAU's
                    true state is unknown; for example, when it is
                    being initialized.

                    If the MAU is not jabbering the agent returns
                    noJabber(3).  This is the 'normal' state.

                    If the MAU is in jabber state the agent returns
                    the jabbering(4) value."
EDESC
#
#
#
#
MIB: DOT3-OAM-MIB (file:./rfc4878-dot3-oam.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT dot3OamThresholdEvent .1.3.6.1.2.1.158.0.1 "Status Events" Normal
FORMAT A dot3OamThresholdEvent notification is sent when a local or $*
SDESC
A dot3OamThresholdEvent notification is sent when a local or
remote threshold crossing event is detected.  A local
threshold crossing event is detected by the local entity,
while a remote threshold crossing event is detected by the
reception of an Ethernet OAM Event Notification OAMPDU
that indicates a threshold event.
This notification should not be sent more than once per
second.
The OAM entity can be derived from extracting the ifIndex from
the variable bindings.  The objects in the notification
correspond to the values in a row instance in the
dot3OamEventLogTable.
The management entity should periodically check
dot3OamEventLogTable to detect any missed events.
Variables:
  1: dot3OamEventLogTimestamp
     Syntax="TICKS"
     Descr="The value of sysUpTime at the time of the logged event.  For
        locally generated events, the time of the event can be
        accurately retrieved from sysUpTime.  For remotely generated
        events, the time of the event is indicated by the reception of
        the Event Notification OAMPDU indicating that the event
        occurred on the peer.  A system may attempt to adjust the
        timestamp value to more accurately reflect the time of the
        event at the peer OAM entity by using other information, such
        as that found in the timestamp found of the Event Notification
        TLVs, which provides an indication of the relative time
        between events at the peer entity.  "
  2: dot3OamEventLogOui
     Syntax="OCTETSTR"
     Descr="The OUI of the entity defining the object type.  All IEEE
        802.3 defined events (as appearing in [802.3ah] except for the
        Organizationally Unique Event TLVs) use the IEEE 802.3 OUI of
        0x0180C2.  Organizations defining their own Event Notification
        TLVs include their OUI in the Event Notification TLV that
        gets reflected here.  "
  3: dot3OamEventLogType
     Syntax="UNSIGNED32"
     Descr="The type of event that generated this entry in the event log.
        When the OUI is the IEEE 802.3 OUI of 0x0180C2, the following
        event types are defined:
        erroredSymbolEvent(1),
        erroredFramePeriodEvent(2),
        erroredFrameEvent(3),
        erroredFrameSecondsEvent(4),
        linkFault(256),
        dyingGaspEvent(257),
        criticalLinkEvent(258)
        The first four are considered threshold crossing events, as
        they are generated when a metric exceeds a given value within
        a specified window.  The other three are not threshold
        crossing events.

        When the OUI is not 71874 (0x0180C2 in hex), then some other
        organization has defined the event space.  If event subtyping
        is known to the implementation, it may be reflected here.
        Otherwise, this value should return all F's (2^32 - 1).
        "
  4: dot3OamEventLogLocation
     Syntax="INTEGER"
       1: local
       2: remote
     Descr="Whether this event occurred locally (local(1)), or was
        received from the OAM peer via Ethernet OAM (remote(2)).
        "
  5: dot3OamEventLogWindowHi
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventWindowHi and dot3OamEventWindowLo, form
        an unsigned 64-bit integer yielding the window over which the
        value was measured for the threshold crossing event (for
        example, 5, when 11 occurrences happened in 5 seconds while
        the threshold was 10).  The two objects are combined as:
        dot3OamEventLogWindow = ((2^32) * dot3OamEventLogWindowHi)
        + dot3OamEventLogWindowLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  6: dot3OamEventLogWindowLo
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventWindowHi and dot3OamEventWindowLo form an
        unsigned 64-bit integer yielding the window over which the
        value was measured for the threshold crossing event (for
        example, 5, when 11 occurrences happened in 5 seconds while
        the threshold was 10).  The two objects are combined as:

        dot3OamEventLogWindow = ((2^32) * dot3OamEventLogWindowHi)
        + dot3OamEventLogWindowLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  7: dot3OamEventLogThresholdHi
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventThresholdHi and dot3OamEventThresholdLo
        form an unsigned 64-bit integer yielding the value that was
        crossed for the threshold crossing event (for example, 10,
        when 11 occurrences happened in 5 seconds while the threshold
        was 10).  The two objects are combined as:

        dot3OamEventLogThreshold = ((2^32) * dot3OamEventLogThresholdHi)
        + dot3OamEventLogThresholdLo

        Otherwise, this value is returned as all F's (2^32 -1) and
        adds no useful information.
        "
  8: dot3OamEventLogThresholdLo
     Syntax="UNSIGNED32"
     Descr="If the event represents a threshold crossing event, the two
        objects dot3OamEventThresholdHi and dot3OamEventThresholdLo
        form an unsigned 64-bit integer yielding the value that was
        crossed for the threshold crossing event (for example, 10,
        when 11 occurrences happened in 5 seconds while the threshold
        was 10).  The two objects are combined as:

        dot3OamEventLogThreshold = ((2^32) * dot3OamEventLogThresholdHi)
        + dot3OamEventLogThresholdLo

        Otherwise, this value is returned as all F's (2^32 - 1) and
        adds no useful information.
        "
  9: dot3OamEventLogValue
     Syntax="COUNTER64"
     Descr="If the event represents a threshold crossing event, this
        value indicates the value of the parameter within the given
        window that generated this event (for example, 11, when 11
        occurrences happened in 5 seconds while the threshold was 10).

        Otherwise, this value is returned as all F's
        (2^64 - 1) and adds no useful information.
        "
 10: dot3OamEventLogRunningTotal
     Syntax="COUNTER64"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        this event has happened since the last reset (for example,
        3253, when 3253 symbol errors have occurred since the last
        reset, which has resulted in 51 symbol error threshold
        crossing events since the last reset).
        "
 11: dot3OamEventLogEventTotal
     Syntax="UNSIGNED32"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        one or more of these occurrences have resulted in an Event
        Notification (for example, 51 when 3253 symbol errors have
        occurred since the last reset, which has resulted in 51 symbol
        error threshold crossing events since the last reset).
        "
EDESC
#
#
#
EVENT dot3OamNonThresholdEvent .1.3.6.1.2.1.158.0.2 "Status Events" Normal
FORMAT A dot3OamNonThresholdEvent notification is sent when a local $*
SDESC
A dot3OamNonThresholdEvent notification is sent when a local
or remote non-threshold crossing event is detected.  A local
event is detected by the local entity, while a remote event is
detected by the reception of an Ethernet OAM Event
Notification OAMPDU that indicates a non-threshold crossing
event.
This notification should not be sent more than once per
second.
The OAM entity can be derived from extracting the ifIndex from
the variable bindings.  The objects in the notification
correspond to the values in a row instance of the
dot3OamEventLogTable.
The management entity should periodically check
dot3OamEventLogTable to detect any missed events.
Variables:
  1: dot3OamEventLogTimestamp
     Syntax="TICKS"
     Descr="The value of sysUpTime at the time of the logged event.  For
        locally generated events, the time of the event can be
        accurately retrieved from sysUpTime.  For remotely generated
        events, the time of the event is indicated by the reception of
        the Event Notification OAMPDU indicating that the event
        occurred on the peer.  A system may attempt to adjust the
        timestamp value to more accurately reflect the time of the
        event at the peer OAM entity by using other information, such
        as that found in the timestamp found of the Event Notification
        TLVs, which provides an indication of the relative time
        between events at the peer entity.  "
  2: dot3OamEventLogOui
     Syntax="OCTETSTR"
     Descr="The OUI of the entity defining the object type.  All IEEE
        802.3 defined events (as appearing in [802.3ah] except for the
        Organizationally Unique Event TLVs) use the IEEE 802.3 OUI of
        0x0180C2.  Organizations defining their own Event Notification
        TLVs include their OUI in the Event Notification TLV that
        gets reflected here.  "
  3: dot3OamEventLogType
     Syntax="UNSIGNED32"
     Descr="The type of event that generated this entry in the event log.
        When the OUI is the IEEE 802.3 OUI of 0x0180C2, the following
        event types are defined:
        erroredSymbolEvent(1),
        erroredFramePeriodEvent(2),
        erroredFrameEvent(3),
        erroredFrameSecondsEvent(4),
        linkFault(256),
        dyingGaspEvent(257),
        criticalLinkEvent(258)
        The first four are considered threshold crossing events, as
        they are generated when a metric exceeds a given value within
        a specified window.  The other three are not threshold
        crossing events.

        When the OUI is not 71874 (0x0180C2 in hex), then some other
        organization has defined the event space.  If event subtyping
        is known to the implementation, it may be reflected here.
        Otherwise, this value should return all F's (2^32 - 1).
        "
  4: dot3OamEventLogLocation
     Syntax="INTEGER"
       1: local
       2: remote
     Descr="Whether this event occurred locally (local(1)), or was
        received from the OAM peer via Ethernet OAM (remote(2)).
        "
  5: dot3OamEventLogEventTotal
     Syntax="UNSIGNED32"
     Descr="Each Event Notification TLV contains a running total of the
        number of times an event has occurred, as well as the number
        of times an Event Notification for the event has been
        transmitted.  For non-threshold crossing events, the number of
        events (dot3OamLogRunningTotal) and the number of resultant
        Event Notifications (dot3OamLogEventTotal) should be
        identical.

        For threshold crossing events, since multiple occurrences may
        be required to cross the threshold, these values are likely
        different.  This value represents the total number of times
        one or more of these occurrences have resulted in an Event
        Notification (for example, 51 when 3253 symbol errors have
        occurred since the last reset, which has resulted in 51 symbol
        error threshold crossing events since the last reset).
        "
EDESC
#
#
#
#
MIB: T11-FC-FABRIC-CONFIG-SERVER-MIB (file:./rfc4935-t11-fc-fabric-config-server.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11FcsRqRejectNotification .1.3.6.1.2.1.162.0.1 "Status Events" Normal
FORMAT This notification is generated whenever the Fabric $*
SDESC
This notification is generated whenever the Fabric
Configuration Server on a switch (indicated by the
value of t11FamLocalSwitchWwn) rejects a Fabric
Configuration Server request.
The Fabric Configuration Server should update the
t11FcsRejectReasonCode, t11FcsRejectReasonCodeExp
and t11FcsRejectReasonVendorCode objects with the
corresponding reason code, explanation and vendor
specific code before sending the notification.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11FcsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="This object contains the reason code corresponding
        to the latest Fabric Configuration Server request
        rejected by the local system."
  3: t11FcsRejectReasonCodeExp
     Syntax="INTEGER"
       1: noAdditionalExplanation
       10: ieInfoListNotAvailable
       11: portListNotAvailable
       12: portTypeNotAvailable
       13: phyPortNumNotAvailable
       14: attPortNameListNotAvailable
       15: portStateNotAvailable
       16: unableToRegIELogName
       17: platformNameNoExist
       18: platformNameAlreadyExists
       19: platformNodeNameNoExists
       2: invNameIdForIEOrPort
       20: platformNodeNameAlreadyExists
       21: resourceUnavailable
       22: noEntriesInLunMap
       23: invalidDeviceNameLength
       24: multipleAttributes
       25: invalidAttribBlockLength
       26: attributesMissing
       3: ieListNotAvailable
       4: ieTypeNotAvailable
       5: domainIdNotAvailable
       6: mgmtIdNotAvailable
       7: fabNameNotAvailable
       8: ielogNameNotAvailable
       9: mgmtAddrListNotAvailable
     Descr="When the corresponding instance of
        t11FcsRejectReasonCode has the value: 'unable to
        perform command request', this object contains the
        corresponding reason code explanation."
  4: t11FcsRejectReasonVendorCode
     Syntax="OCTETSTR"
     Descr="A registration reject vendor-specific code.  This
        object contains the vendor-specific code of the most
        recently rejected Fabric Configuration Server
        Registration request for the particular port on
        the particular Fabric."
EDESC
#
#
#
EVENT t11FcsDiscoveryCompleteNotify .1.3.6.1.2.1.162.0.2 "Status Events" Normal
FORMAT This notification is generated by the Fabric $*
SDESC
This notification is generated by the Fabric
Configuration Server on the completion of the
discovery of Fabrics in the range that has
t11FcsFabricDiscoveryRangeLow at its low end.
Variables:
  1: t11FcsFabricDiscoveryRangeLow
     Syntax="UNSIGNED32"
     Descr="The discovery by a particular switch operates
        within all existing Fabrics that have a Fabric
        Index within a specific inclusive range.  This
        object specifies the minimum Fabric Index value
        within that range.  This value just represents
        the lower end of the range and does not necessarily
        represent any existing Fabric."
EDESC
#
#
#
EVENT t11FcsMgmtAddrChangeNotify .1.3.6.1.2.1.162.0.3 "Status Events" Normal
FORMAT This notification is generated by the Fabric $*
SDESC
This notification is generated by the Fabric
Configuration Server whenever the management
address of an IE changes, i.e., whenever an
entry in the t11FcsMgmtAddrListTable changes.
Variables:
  1: t11FcsMgmtAddrChangeFabricIndex
     Syntax="UNSIGNED32"
     Descr="The index value that identifies the Fabric on which
        a management address change has been detected."
  2: t11FcsMgmtAddrChangeIeName
     Syntax="OCTETSTR"
     Descr="The IE for which a management address change has been
        detected."
EDESC
#
#
#
#
MIB: T11-FC-ZONE-SERVER-MIB (file:./rfc4936-t11-fc-zone-server.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT t11ZsRequestRejectNotify .1.3.6.1.2.1.160.0.1 "Status Events" Normal
FORMAT This notification is generated whenever a Zone Server $*
SDESC
This notification is generated whenever a Zone Server
(indicated by the value of t11FamLocalSwitchWwn) rejects
a request.
The value of t11ZsRejectCtCommandString indicates the
rejected request, and the values of t11ZsRejectReasonCode,
t11ZsRejectReasonCodeExp and t11ZsRejectReasonVendorCode
indicate the reason for the rejection.  The value of
t11ZsRequestClient indicates the source of the request.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11ZsRejectRequestSource
     Syntax="OCTETSTR"
     Descr="The WWN that was the source of the CT_IU
           contained in the corresponding instance of
           t11ZsRejectCtCommandString."
  3: t11ZsRejectCtCommandString
     Syntax="OCTETSTR"
     Descr="The binary content of the Zone Server request,
           formatted as an octet string (in network byte order)
           containing the Common Transport Information Unit
           (CT_IU), as described in Table 2 of FC-GS-5 (including
           the preamble), which was most recently rejected by the
           Fabric Configuration Server for this Fabric.

           This object contains the zero-length string
           if and when the CT-IU's content is unavailable.

           When the length of this object is 255 octets, it
           contains the first 255 octets of the CT-IU (in
           network byte order)."
  4: t11ZsRejectReasonCode
     Syntax="INTEGER"
       1: none
       10: serverNotAvailable
       11: couldNotEstabSession
       12: vendorError
       2: invalidCmdCode
       3: invalidVerLevel
       4: logicalError
       5: invalidIUSize
       6: logicalBusy
       7: protocolError
       8: unableToPerformCmdReq
       9: cmdNotSupported
     Descr="The reason code corresponding to the most recent
           rejection of a request by the Zone Server for
           this Fabric."
  5: t11ZsRejectReasonCodeExp
     Syntax="INTEGER"
       1: other
       10: deactivateZoneSetFailed
       11: reqNotSupported
       12: capabilityNotSupported
       13: zoneMemberIDTypeNotSupp
       14: invalidZoneSetDefinition
       15: enhancedZoningCmdsNotSupported
       16: zoneSetExists
       17: zoneExists
       18: aliasExists
       19: zoneSetUnknown
       2: noAdditionalExplanation
       20: zoneUnknown
       21: aliasUnknown
       22: zoneAliasTypeUnknown
       23: unableEnhancedMode
       24: basicZoningCmdsNotSupported
       25: zoneAttribObjectExists
       26: zoneAttribObjectUnknown
       27: requestInProcess
       28: cmitInProcess
       29: hardEnforcementFailed
       3: zonesNotSupported
       30: unresolvedReferences
       31: consistencyChecksFailed
       4: zoneSetNameUnknown
       5: noZoneSetActive
       6: zoneNameUnknown
       7: zoneStateUnknown
       8: incorrectPayloadLen
       9: tooLargeZoneSet
     Descr="When the value of t11ZsRejectReasonCode is
           'Unable to perform command request', this
           object contains the corresponding reason code
           explanation."
  6: t11ZsRejectReasonVendorCode
     Syntax="OCTETSTR"
     Descr="When the value of t11ZsRejectReasonCode is
           'Vendor Specific Error', this object contains
           the corresponding vendor-specific reason code."
EDESC
#
#
#
EVENT t11ZsMergeFailureNotify .1.3.6.1.2.1.160.0.2 "Status Events" Normal
FORMAT This notification indicates that a Zone merge $*
SDESC
This notification indicates that a Zone merge
failure has occurred on the Fabric indicated by the
value of t11ZsFabricIndex, on the interface
indicated by the value of ifIndex.
If multiple Virtual Fabrics are configured on an
interface, and all have a Zone merge failure
at the same time, then just one notification is
generated and t11ZsFabricIndex has the value 4096.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: t11ZsFabricIndex
     Syntax="UNSIGNED32"
     Descr="This object contains either a value of
           T11FabricIndex to identify the Fabric on which
           some occurrence has caused a notification to be
           generated, or it has the value 4096 to indicate
           all applicable Fabrics."
EDESC
#
#
#
EVENT t11ZsMergeSuccessNotify .1.3.6.1.2.1.160.0.3 "Status Events" Normal
FORMAT This notification indicates that a successful Zone $*
SDESC
This notification indicates that a successful Zone
merge has occurred on the Fabric indicated by the
value of t11ZsFabricIndex, on the interface
indicated by the value of ifIndex.
If multiple Virtual Fabrics are configured on an
interface, and all have a successful Zone Merge
at the same time, then just one notification is
generated and t11ZsFabricIndex has the value 4096.
Variables:
  1: ifIndex
     Syntax="INTEGER32"
     Descr="A unique value, greater than zero, for each interface.  It
            is recommended that values are assigned contiguously
            starting from 1.  The value for each interface sub-layer
            must remain constant at least from one re-initialization of
            the entity's network management system to the next re-
            initialization."
  2: t11ZsFabricIndex
     Syntax="UNSIGNED32"
     Descr="This object contains either a value of
           T11FabricIndex to identify the Fabric on which
           some occurrence has caused a notification to be
           generated, or it has the value 4096 to indicate
           all applicable Fabrics."
EDESC
#
#
#
EVENT t11ZsDefZoneChangeNotify .1.3.6.1.2.1.160.0.4 "Status Events" Normal
FORMAT This notification indicates that the $*
SDESC
This notification indicates that the
value of a Default Zone Setting has changed.
The value of t11ZsServerDefaultZoneSetting
contains the value after the change.
Variables:
  1: t11ZsServerDefaultZoneSetting
     Syntax="INTEGER"
       1: permit
       2: deny
     Descr="This object controls the Enhanced Zoning flag that
           governs the behavior of the Default Zone on this Fabric.

           If this object is set to 'permit', then the members of
           the Default Zone on this Fabric can communicate with
           each other.

           If this object is set to 'deny', then the members of the
           Default Zone on this Fabric cannot communicate with each
           other."
EDESC
#
#
#
EVENT t11ZsActivateNotify .1.3.6.1.2.1.160.0.5 "Status Events" Normal
FORMAT This notification is generated whenever a switch $*
SDESC
This notification is generated whenever a switch
(indicated by the value of t11FamLocalSwitchWwn)
activates/deactivates a Zone Set on a Fabric.
The t11ZsActivateResult object denotes the outcome
of the activation/deactivation.
Variables:
  1: t11FamLocalSwitchWwn
     Syntax="OCTETSTR"
     Descr="The WWN of the particular switch on this Fabric."
  2: t11ZsActivateResult
     Syntax="INTEGER"
       1: activateSuccess
       2: activateFailure
       3: deactivateSuccess
       4: deactivateFailure
       5: inProgress
       6: none
     Descr="This object indicates the outcome of the most recent
           activation/deactivation using this entry.

           When the value of this object is 'inProgress', the
           values of the corresponding instances of
           t11ZsActivateRequest and t11ZsActivateDeactivate
           cannot be modified.

           The value 'none' indicates activation/deactivation
           has not been attempted since the last restart of
           the management system."
EDESC
#
#
#
#
MIB: PIM-STD-MIB (file:./rfc5060-pim-std.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pimNeighborLoss .1.3.6.1.2.1.157.0.1 "Status Events" Normal
FORMAT A pimNeighborLoss notification signifies the loss of an $*
SDESC
A pimNeighborLoss notification signifies the loss of an
adjacency with a neighbor.  This notification should be
generated when the neighbor timer expires, and the router
has no other neighbors on the same interface with the same
IP version and a lower IP address than itself.
This notification is generated whenever the counter
pimNeighborLossCount is incremented, subject
to the rate limit specified by
pimNeighborLossNotificationPeriod.
REFERENCE RFC 4601 section 4.3.2
Variables:
  1: pimNeighborUpTime
     Syntax="TICKS"
     Descr="The time since this PIM neighbor (last) became a neighbor
            of the local router."
EDESC
#
#
#
#
MIB: LANGTAG-TC-MIB (file:./rfc5131-langtag-tc.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IPMCAST-MIB (file:./rfc5132-ipmcast.mib) converted on Sat Apr  2 10:27:33 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PIM-BSR-MIB (file:./rfc5240-pim-bsr.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pimBsrElectedBSRLostElection .1.3.6.1.2.1.172.0.1 "Status Events" Normal
FORMAT A pimBsrElectedBSRLostElection notification should be $*
SDESC
A pimBsrElectedBSRLostElection notification should be
generated when current E-BSR lost election to a new
Candidate-BSR.  Only an E-BSR should generate this
notification.
This notification is generated when
pimBsrCandidateBSRElectedBSR becomes FALSE.
REFERENCE RFC 5059, section 3.1
Variables:
  1: pimBsrElectedBSRAddressType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="The address type of the elected BSR."
  2: pimBsrElectedBSRAddress
     Syntax="OCTETSTR"
     Descr="The (unicast) address of the elected BSR.  The
           InetAddressType is given by the
           pimBsrElectedBSRAddressType object."
  3: pimBsrElectedBSRPriority
     Syntax="UNSIGNED32"
     Descr="The priority value for the elected BSR for this address
           type.  Numerically higher values for this object indicate
           higher priorities."
EDESC
#
#
#
EVENT pimBsrCandidateBSRWinElection .1.3.6.1.2.1.172.0.2 "Status Events" Normal
FORMAT A pimBsrCandidateBSRWinElection notification should be $*
SDESC
A pimBsrCandidateBSRWinElection notification should be
generated when a C-BSR wins BSR Election.  Only an
E-BSR should generate this notification.
This notification is generated when
pimBsrCandidateBSRElectedBSR becomes TRUE.
REFERENCE RFC 5059, section 3.1
Variables:
  1: pimBsrCandidateBSRElectedBSR
     Syntax="INTEGER"
       1: true
       2: false
     Descr="Whether the local router is the elected BSR for this
           zone."
EDESC
#
#
#
#
MIB: SYSLOG-TC-MIB (file:./rfc5427-syslog-tc.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MGMD-STD-MIB (file:./rfc5519-mgmd-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-TC-STD-MIB (file:./rfc5542-pw-tc-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: IANA-PWE3-MIB (file:./rfc5601-iana-pwe3.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-STD-MIB (file:./rfc5601-pw-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT pwDown .1.3.6.1.2.1.10.246.0.1 "Status Events" Normal
FORMAT This notification is generated when the pwOperStatus $*
SDESC
This notification is generated when the pwOperStatus
object for one or more contiguous entries in the pwTable are
about to enter the down(2) or lowerLayerDown(6) state from
any other state, except for transition from the
notPresent(5) state.  For the purpose of deciding when
these notifications occur, the lowerLayerDown(6) state
and the down(2) state are considered to be equivalent;
i.e., there is no notification on transition from
lowerLayerDown(6) into down(2), and there is a trap on
transition from any other state except down(2) (and
notPresent) into lowerLayerDown(6).
The included values of pwOperStatus MUST each be equal to
down(2) or lowerLayerDown(6).  The two instances of
pwOperStatus in this notification indicate the range of
indexes that are affected.  Note that all the indexes of
the two ends of the range can be derived from the
instance identifiers of these two objects.  For cases
where a contiguous range of cross-connects have
transitioned into the down(2) and lowerLayerDown(6) states
at roughly the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in an
effort to minimize the emission of a large number of
notifications.  If a notification has to be issued for
just a single cross-connect entry, then the instance
identifier (and values) of the two pwOperStatus objects
MUST be identical.
Variables:
  1: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
  2: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
EDESC
#
#
#
EVENT pwUp .1.3.6.1.2.1.10.246.0.2 "Status Events" Normal
FORMAT This notification is generated when the pwOperStatus $*
SDESC
This notification is generated when the pwOperStatus
object for one or more contiguous entries in the pwTable are
about to enter the up(1) state from some other state
except the notPresent(5) state and given that the pwDown
notification been issued for these entries.  The included
values of pwOperStatus MUST both be set equal to this
new state (i.e., up(1)).  The two instances of pwOperStatus
in this notification indicate the range of indexes that
are affected.  Note that all the indexes of the two ends
of the range can be derived from the instance identifiers
of these two objects.  For cases where a contiguous range
of cross-connects have transitioned into the up(1) state
at roughly the same time, the device SHOULD issue a single
notification for each range of contiguous indexes in an
effort to minimize the emission of a large number of
notifications.  If a notification has to be issued for
just a single cross-connect entry, then the instance
identifier (and values) of the two pwOperStatus objects
MUST be identical.
Variables:
  1: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
  2: pwOperStatus
     Syntax="INTEGER"
       1: up
       2: down
       3: testing
       4: dormant
       5: notPresent
       6: lowerLayerDown
     Descr="This object indicates the operational status of the PW; it
          does not reflect the status of the Customer Edge (CE) bound
          interface.  It is set to down only if pwNotForwarding,
          psnFacingPwRxFault, or psnFacingPwTxFault indications are
          set in pwLocalStatus or pwRemoteStatus.
          It indicates 'lowerLayerDown' if the only reason for
          not being in the 'up' state is that either the outer tunnel
          or physical layer of the network side is in the 'down'
          state.
          All other states are declared based on the description
          of the PwOperStatusTC.
          "
EDESC
#
#
#
EVENT pwDeleted .1.3.6.1.2.1.10.246.0.3 "Status Events" Normal
FORMAT This notification is generated when the PW has been $*
SDESC
This notification is generated when the PW has been
deleted, i.e., when the pwRowStatus has been set to
destroy(6) or the PW has been deleted by a non-MIB
application or due to an auto-discovery process.

Variables:
  1: pwType
     Syntax="INTEGER"
       0: other
       1: frameRelayDlciMartiniMode
       10: atmCellNto1Vpc
       11: ipLayer2Transport
       12: atmCell1to1Vcc
       13: atmCell1to1Vpc
       14: atmAal5PduVcc
       15: frameRelayPortMode
       16: cep
       17: e1Satop
       18: t1Satop
       19: e3Satop
       2: atmAal5SduVcc
       20: t3Satop
       21: basicCesPsn
       22: basicTdmIp
       23: tdmCasCesPsn
       24: tdmCasTdmIp
       25: frDlci
       3: atmTransparent
       32767: wildcard
       4: ethernetTagged
       5: ethernet
       6: hdlc
       7: ppp
       8: cem
       9: atmCellNto1Vcc
     Descr="This value indicates the emulated service to be carried over
         this PW.
        "
  2: pwID
     Syntax="UNSIGNED32"
     Descr="Pseudowire identifier.

         If the pwOwner object is 'pwIdFecSignaling' or
         'l2tpControlProtocol', then this object is signaled in the
         outgoing PW ID field within the 'Virtual Circuit FEC
         Element'.  For other values of pwOwner, this object is not
         signaled and it MAY be set to zero.

         For implementations that support the pwIndexMappingTable,
         a non-zero value is RECOMMENDED, even if this
         identifier is not signaled.  This is so that reverse
         mappings can be provided by pwIndexMappingTable and
         pwPeerMappingTable.  It is therefore RECOMMENDED that the
         value of this pwID be unique (or if pwPeerAddrType is not
         'unknown', at least [pwType, pwID, pwPeerAddrType, pwPeerAddr]
         is unique.)"
  3: pwPeerAddrType
     Syntax="INTEGER"
       0: unknown
       1: ipv4
       16: dns
       2: ipv6
       3: ipv4z
       4: ipv6z
     Descr="Denotes the address type of the peer node.  It should be
          set to 'unknown' if PE/PW maintenance protocol is not used
          and the address is unknown."
  4: pwPeerAddr
     Syntax="OCTETSTR"
     Descr="This object contains the value of the peer node address
          of the PW/PE maintenance protocol entity.  This object
          SHOULD contain a value of all zeroes if not applicable
          (pwPeerAddrType is 'unknown')."
EDESC
#
#
#
#
MIB: PW-MPLS-STD-MIB (file:./rfc5602-pw-mpls-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: PW-ENET-STD-MIB (file:./rfc5603-pw-enet-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: OSPFV3-MIB (file:./rfc5643-ospfv3.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ospfv3VirtIfStateChange .1.3.6.1.2.1.191.0.1 "Status Events" Normal
FORMAT An ospfv3VirtIfStateChange notification signifies that $*
SDESC
An ospfv3VirtIfStateChange notification signifies that
there has been a change in the state of an OSPFv3 virtual
interface.
This notification should be generated when the interface
state regresses (e.g., goes from Point-to-Point to Down)
or progresses to a terminal state (i.e., Point-to-Point).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
EDESC
#
#
#
EVENT ospfv3NbrStateChange .1.3.6.1.2.1.191.0.2 "Status Events" Normal
FORMAT An ospfv3NbrStateChange notification signifies that $*
SDESC
An ospfv3NbrStateChange notification signifies that
there has been a change in the state of a
non-virtual OSPFv3 neighbor.  This notification should be
generated when the neighbor state regresses
(e.g., goes from Attempt or Full to 1-Way or
Down) or progresses to a terminal state (e.g.,
2-Way or Full).  When a neighbor transitions
from or to Full on non-broadcast multi-access
and broadcast networks, the notification should be
generated by the Designated Router.  A Designated
Router transitioning to Down will be noted by
ospfIfStateChange.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3NbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the relationship with this
        neighbor."
EDESC
#
#
#
EVENT ospfv3VirtNbrStateChange .1.3.6.1.2.1.191.0.3 "Status Events" Normal
FORMAT An ospfv3VirtNbrStateChange notification signifies $*
SDESC
An ospfv3VirtNbrStateChange notification signifies
that there has been a change in the state of an OSPFv3
virtual neighbor.  This notification should be generated
when the neighbor state regresses (e.g., goes
from Attempt or Full to 1-Way or Down) or
progresses to a terminal state (e.g., Full).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtNbrState
     Syntax="INTEGER"
       1: down
       2: attempt
       3: init
       4: twoWay
       5: exchangeStart
       6: exchange
       7: loading
       8: full
     Descr="The state of the virtual neighbor relationship."
EDESC
#
#
#
EVENT ospfv3IfConfigError .1.3.6.1.2.1.191.0.4 "Status Events" Normal
FORMAT An ospfv3IfConfigError notification signifies that a $*
SDESC
An ospfv3IfConfigError notification signifies that a
packet has been received on a non-virtual
interface from a router whose configuration
parameters conflict with this router's
configuration parameters.  Note that the event
optionMismatch should cause a notification only if it
prevents an adjacency from forming.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
  3: ospfv3PacketSrc
     Syntax="OCTETSTR"
     Descr="The IPv6 address of an inbound packet that cannot
    be identified by a neighbor instance.

    Only IPv6 addresses without zone index are expected."
  4: ospfv3ConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: helloIntervalMismatch
       6: deadIntervalMismatch
       7: optionMismatch
       8: mtuMismatch
       9: duplicateRouterId
     Descr="Potential types of configuration conflicts.
    Used by the ospfv3ConfigError and
    ospfv3ConfigVirtError notifications."
  5: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3VirtIfConfigError .1.3.6.1.2.1.191.0.5 "Status Events" Normal
FORMAT An ospfv3VirtIfConfigError notification signifies that a $*
SDESC
An ospfv3VirtIfConfigError notification signifies that a
packet has been received on a virtual interface
from a router whose configuration parameters
conflict with this router's configuration
parameters.  Note that the event optionMismatch
should cause a notification only if it prevents an
adjacency from forming.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
  3: ospfv3ConfigErrorType
     Syntax="INTEGER"
       1: badVersion
       10: noError
       2: areaMismatch
       3: unknownNbmaNbr
       4: unknownVirtualNbr
       5: helloIntervalMismatch
       6: deadIntervalMismatch
       7: optionMismatch
       8: mtuMismatch
       9: duplicateRouterId
     Descr="Potential types of configuration conflicts.
    Used by the ospfv3ConfigError and
    ospfv3ConfigVirtError notifications."
  4: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3IfRxBadPacket .1.3.6.1.2.1.191.0.6 "Status Events" Normal
FORMAT An ospfv3IfRxBadPacket notification signifies that an $*
SDESC
An ospfv3IfRxBadPacket notification signifies that an
OSPFv3 packet that cannot be parsed has been received on a
non-virtual interface.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
  3: ospfv3PacketSrc
     Syntax="OCTETSTR"
     Descr="The IPv6 address of an inbound packet that cannot
    be identified by a neighbor instance.

    Only IPv6 addresses without zone index are expected."
  4: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3VirtIfRxBadPacket .1.3.6.1.2.1.191.0.7 "Status Events" Normal
FORMAT An ospfv3VirtIfRxBadPacket notification signifies $*
SDESC
An ospfv3VirtIfRxBadPacket notification signifies
that an OSPFv3 packet that cannot be parsed has been
received on a virtual interface.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtIfState
     Syntax="INTEGER"
       1: down
       4: pointToPoint
     Descr="OSPF virtual interface states.  The same encoding
        as the ospfV3IfTable is used."
  3: ospfv3PacketType
     Syntax="INTEGER"
       1: hello
       2: dbDescript
       3: lsReq
       4: lsUpdate
       5: lsAck
       6: nullPacket
     Descr="OSPFv3 packet types."
EDESC
#
#
#
EVENT ospfv3LsdbOverflow .1.3.6.1.2.1.191.0.8 "Status Events" Normal
FORMAT An ospfv3LsdbOverflow notification signifies that the $*
SDESC
An ospfv3LsdbOverflow notification signifies that the
number of LSAs in the router's link state
database has exceeded ospfv3ExtAreaLsdbLimit.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3ExtAreaLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
        AS-external-LSA entries that can be stored in the
        link state database.  If the value is -1, then
        there is no limit.

        When the number of non-default AS-external-LSAs
        in a router's link state database reaches
        ospfv3ExtAreaLsdbLimit, the router enters Overflow
        state.  The router never holds more than
        ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs
        in its database.  ospfv3ExtAreaLsdbLimit MUST be set
        identically in all routers attached to the OSPFv3
        backbone and/or any regular OSPFv3 area (i.e.,
        OSPFv3 stub areas and not-so-stubby-areas (NSSAs)
        are excluded).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
EDESC
#
#
#
EVENT ospfv3LsdbApproachingOverflow .1.3.6.1.2.1.191.0.9 "Status Events" Normal
FORMAT An ospfv3LsdbApproachingOverflow notification signifies $*
SDESC
An ospfv3LsdbApproachingOverflow notification signifies
that the number of LSAs in the router's
link state database has exceeded ninety percent of
ospfv3ExtAreaLsdbLimit.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3ExtAreaLsdbLimit
     Syntax="INTEGER32"
     Descr="The maximum number of non-default
        AS-external-LSA entries that can be stored in the
        link state database.  If the value is -1, then
        there is no limit.

        When the number of non-default AS-external-LSAs
        in a router's link state database reaches
        ospfv3ExtAreaLsdbLimit, the router enters Overflow
        state.  The router never holds more than
        ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs
        in its database.  ospfv3ExtAreaLsdbLimit MUST be set
        identically in all routers attached to the OSPFv3
        backbone and/or any regular OSPFv3 area (i.e.,
        OSPFv3 stub areas and not-so-stubby-areas (NSSAs)
        are excluded).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
EDESC
#
#
#
EVENT ospfv3IfStateChange .1.3.6.1.2.1.191.0.10 "Status Events" Normal
FORMAT An ospfv3IfStateChange notification signifies that there $*
SDESC
An ospfv3IfStateChange notification signifies that there
has been a change in the state of a non-virtual
OSPFv3 interface.  This notification should be generated
when the interface state regresses (e.g., goes
from DR to Down) or progresses to a terminal
state (i.e., Point-to-Point, DR Other, DR, or
Backup).
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3IfState
     Syntax="INTEGER"
       1: down
       2: loopback
       3: waiting
       4: pointToPoint
       5: designatedRouter
       6: backupDesignatedRouter
       7: otherDesignatedRouter
       8: standby
     Descr="The OSPFv3 interface state.  An interface may be
        in standby state if there are multiple interfaces
        on the link and another interface is active.  The
        interface may be in Down state if the underlying
        IPv6 interface is down or if the admin status is
        'disabled' either globally or for the interface."
EDESC
#
#
#
EVENT ospfv3NssaTranslatorStatusChange .1.3.6.1.2.1.191.0.11 "Status Events" Normal
FORMAT An ospfv3NssaTranslatorStatusChange notification $*
SDESC
An ospfv3NssaTranslatorStatusChange notification
indicates that there has been a change in the router's
ability to translate OSPFv3 NSSA LSAs into OSPFv3 External
LSAs.  This notification should be generated when the
Translator Status transitions from or to any defined
status on a per-area basis.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3AreaNssaTranslatorState
     Syntax="INTEGER"
       1: enabled
       2: elected
       3: disabled
     Descr="Indicates if and how an NSSA border router is
         performing NSSA translation of NSSA-LSAs into
         AS-External-LSAs.  When this object is set to
         'enabled', the NSSA border router's
         ospfv3AreaNssaTranslatorRole has been set to 'always'.
         When this object is set to 'elected', a candidate
         NSSA border router is translating NSSA-LSAs into
         AS-External-LSAs.  When this object is set to
         'disabled', a candidate NSSA Border router is NOT
         translating NSSA-LSAs into AS-External-LSAs."
EDESC
#
#
#
EVENT ospfv3RestartStatusChange .1.3.6.1.2.1.191.0.12 "Status Events" Normal
FORMAT An ospfv3RestartStatusChange notification signifies that $*
SDESC
An ospfv3RestartStatusChange notification signifies that
there has been a change in the graceful restart
state for the router.  This notification should be
generated when the router restart status
changes.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3RestartStatus
     Syntax="INTEGER"
       1: notRestarting
       2: plannedRestart
       3: unplannedRestart
     Descr="The current status of OSPF graceful restart capability."
  3: ospfv3RestartInterval
     Syntax="UNSIGNED32"
     Descr="Configured OSPF graceful restart timeout interval.

       This object is persistent, and when written, the
       entity SHOULD save the change to non-volatile
       storage."
  4: ospfv3RestartExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at a
      graceful restart.

      none:        no restart has yet been attempted.
      inProgress:      a restart attempt is currently underway.
      completed:       the last restart completed successfully.
      timedOut:    the last restart timed out.
      topologyChanged: the last restart was aborted due to
               a topology change."
EDESC
#
#
#
EVENT ospfv3NbrRestartHelperStatusChange .1.3.6.1.2.1.191.0.13 "Status Events" Normal
FORMAT An ospfv3NbrRestartHelperStatusChange notification $*
SDESC
An ospfv3NbrRestartHelperStatusChange notification
signifies that there has been a change in the
graceful restart helper state for the neighbor.
This notification should be generated when the
neighbor restart helper status transitions for a neighbor.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3NbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
      as a graceful restart helper for the neighbor."
  3: ospfv3NbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in current OSPF graceful restart
      interval, if the router is acting as a restart
      helper for the neighbor."
  4: ospfv3NbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
      as a graceful restart helper for the neighbor.

      none:        no restart has yet been attempted.
      inProgress:      a restart attempt is currently underway.
      completed:       the last restart completed successfully.
      timedOut:    the last restart timed out.
      topologyChanged: the last restart was aborted due to
               a topology change."
EDESC
#
#
#
EVENT ospfv3VirtNbrRestartHelperStatusChange .1.3.6.1.2.1.191.0.14 "Status Events" Normal
FORMAT An ospfv3VirtNbrRestartHelperStatusChange $*
SDESC
An ospfv3VirtNbrRestartHelperStatusChange
notification signifies that there has been a
change in the graceful restart helper state for
the virtual neighbor.  This notification should be
generated when the virtual neighbor restart helper status
transitions for a virtual neighbor.
Variables:
  1: ospfv3RouterId
     Syntax="UNSIGNED32"
     Descr="A 32-bit unsigned integer uniquely identifying
        the router in the Autonomous System.  To ensure
        uniqueness, this may default to the 32-bit
        unsigned integer representation of one of
        the router's IPv4 interface addresses (if IPv4
        is configured on the router).

        This object is persistent, and when written, the
        entity SHOULD save the change to non-volatile
        storage."
  2: ospfv3VirtNbrRestartHelperStatus
     Syntax="INTEGER"
       1: notHelping
       2: helping
     Descr="Indicates whether the router is acting
       as a graceful restart helper for the neighbor."
  3: ospfv3VirtNbrRestartHelperAge
     Syntax="UNSIGNED32"
     Descr="Remaining time in the current OSPF graceful restart
       interval, if the router is acting as a restart
       helper for the neighbor."
  4: ospfv3VirtNbrRestartHelperExitReason
     Syntax="INTEGER"
       1: none
       2: inProgress
       3: completed
       4: timedOut
       5: topologyChanged
     Descr="Describes the outcome of the last attempt at acting
       as a graceful restart helper for the neighbor.

       none:        no restart has yet been attempted.
       inProgress:      a restart attempt is currently underway.
       completed:       the last restart completed successfully.
       timedOut:    the last restart timed out.
       topologyChanged: the last restart was aborted due to
                a topology change."
EDESC
#
#
#
#
MIB: SYSLOG-MSG-MIB (file:./rfc5676-syslog-msg.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT syslogMsgNotification .1.3.6.1.2.1.192.0.1 "Status Events" Normal
FORMAT The syslogMsgNotification is generated when a new SYSLOG $*
SDESC
The syslogMsgNotification is generated when a new SYSLOG
message is received and the value of
syslogMsgGenerateNotifications is true.
Implementations may add syslogMsgSDParamValue objects as long
as the resulting notification fits into the size constraints
imposed by the implementation environment and the notification
message size constraints imposed by maxMessageSize [RFC3412]
and SNMP transport mappings.
Variables:
  1: syslogMsgFacility
     Syntax="INTEGER"
       0: kern
       1: user
       10: authpriv
       11: ftp
       12: ntp
       13: audit
       14: console
       15: cron2
       16: local0
       17: local1
       18: local2
       19: local3
       2: mail
       20: local4
       21: local5
       22: local6
       23: local7
       3: daemon
       4: auth
       5: syslog
       6: lpr
       7: news
       8: uucp
       9: cron
     Descr="The facility of the SYSLOG message."
  2: syslogMsgSeverity
     Syntax="INTEGER"
       0: emerg
       1: alert
       2: crit
       3: err
       4: warning
       5: notice
       6: info
       7: debug
     Descr="The severity of the SYSLOG message"
  3: syslogMsgVersion
     Syntax="UNSIGNED32"
     Descr="The version of the SYSLOG message.  A value of 0 indicates
        that the version is unknown."
  4: syslogMsgTimeStamp
     Syntax="OCTETSTR"
     Descr="The timestamp of the SYSLOG message.  A zero-length
        string is returned if the timestamp is unknown."
  5: syslogMsgHostName
     Syntax="OCTETSTR"
     Descr="The hostname and the (optional) domain name of the SYSLOG
        message.  A zero-length string indicates an unknown hostname.
        The SYSLOG protocol specification constrains this string to
        printable US-ASCII code points."
  6: syslogMsgAppName
     Syntax="OCTETSTR"
     Descr="The app-name of the SYSLOG message.  A zero-length string
        indicates an unknown app-name.  The SYSLOG protocol
        specification constrains this string to printable US-ASCII
        code points."
  7: syslogMsgProcID
     Syntax="OCTETSTR"
     Descr="The procid of the SYSLOG message.  A zero-length string
        indicates an unknown procid.  The SYSLOG protocol
        specification constrains this string to printable
        US-ASCII code points."
  8: syslogMsgMsgID
     Syntax="OCTETSTR"
     Descr="The msgid of the SYSLOG message.  A zero-length string
        indicates an unknown msgid.  The SYSLOG protocol specification
        constrains this string to printable US-ASCII code points."
  9: syslogMsgSDParams
     Syntax="UNSIGNED32"
     Descr="The total number of structured data element parameters
        carried in the SYSLOG message.  This number effectively
        indicates the number of entries in the syslogMsgSDTable.
        It can be used, for example, by a notification receiver
        to determine whether a notification carried all
        structured data element parameters of a SYSLOG message."
 10: syslogMsgMsg
     Syntax="OCTETSTR"
     Descr="The message part of the SYSLOG message.  The syntax does not
        impose a size restriction.  Implementations of this MIB module
        may truncate the message part of the SYSLOG message such that
        it fits into the size constraints imposed by the implementation
        environment.  Such truncations can also happen elsewhere in the
        SYSLOG forwarding chain.

        If the first octets contain the value 'EFBBBF'h, then the rest
        of the message is a UTF-8 string.  Since SYSLOG messages may be
        truncated at arbitrary octet boundaries during forwarding, the
        message may contain invalid UTF-8 encodings at the end."
EDESC
#
#
#
#
MIB: CAPWAP-BASE-MIB (file:./rfc5833-capwap-base.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT capwapBaseChannelUp .1.3.6.1.2.1.196.0.1 "Status Events" Normal
FORMAT This notification is sent by the AC when a CAPWAP channel $*
SDESC
This notification is sent by the AC when a CAPWAP channel
is established.
The notification is separated for data or control channel.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfAuthenMethod
     Syntax="INTEGER"
       1: other
       2: clear
       3: x509
       4: psk
     Descr="Represents the authentication method for the CAPWAP Channel."
EDESC
#
#
#
EVENT capwapBaseChannelDown .1.3.6.1.2.1.196.0.2 "Status Events" Normal
FORMAT This notification is sent by the AC when a CAPWAP channel $*
SDESC
This notification is sent by the AC when a CAPWAP channel
is down.
The notification is separated for data or control channel.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfChannelDownReason
     Syntax="INTEGER"
       1: timeout
       2: rekeyFailure
       3: acRebootWtp
       4: dtlsError
       5: maxRetransmit
     Descr="Represents the reason the channel is down.
         The following enumerated values are supported:
           timeout(1)       - The keepalive timed out
           rekeyFailure(2)  - Rekey process failed; channel will be
                              broken
           acRebootWtp(3)   - The AC rebooted the WTP
           dtlsError(4)     - DTLS notifications: DTLSAborted,
                              DTLSReassemblyFailure, DTLSPeerDisconnect,
                              or frequent DTLSDecapFailure
           maxRetransmit(5) - The underlying reliable transport's
                              RetransmitCount counter has reached the
                              MaxRetransmit variable"
EDESC
#
#
#
EVENT capwapBaseDecryptErrorReport .1.3.6.1.2.1.196.0.3 "Status Events" Normal
FORMAT This notification is generated when a WTP has had a $*
SDESC
This notification is generated when a WTP has had a
decryption error since the last report.
REFERENCE
Section 4.6.17 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfRadioId
     Syntax="UNSIGNED32"
     Descr="Represents the identifier of a PHY radio on a WTP, which is
         only required to be unique on a WTP.
         For example, WTP A and WTP B can use the same value of
         capwapBaseNtfRadioId for their first radio."
  3: capwapBaseNtfStationIdList
     Syntax="OCTETSTR"
     Descr="Represents a list of station MAC addresses separated by
         semicolons."
EDESC
#
#
#
EVENT capwapBaseJoinFailure .1.3.6.1.2.1.196.0.4 "Status Events" Normal
FORMAT This notification is generated when a WTP fails to join. $*
SDESC
This notification is generated when a WTP fails to join.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfJoinFailureReason
     Syntax="INTEGER"
       1: unspecified
       2: resDepletion
       3: unknownSource
       4: incorrectData
       5: sessionIdInUse
       6: unsupportedHw
       7: unsupportedBinding
     Descr="Represents the reason of join failure.
         The following enumerated values are supported:
           unspecified(1)        - Unspecified failure
           resDepletion(2)       - Resource depletion
           unknownSource(3)      - Unknown source
           incorrectData(4)      - Incorrect data
           sessionIdInUse(5)     - Session ID already in use
           unsupportedHw(6)      - WTP hardware not supported
           unsupportedBinding(7) - Binding not supported"
EDESC
#
#
#
EVENT capwapBaseImageUpgradeFailure .1.3.6.1.2.1.196.0.5 "Status Events" Normal
FORMAT This notification is generated when a WTP fails to update $*
SDESC
This notification is generated when a WTP fails to update
the firmware image.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfImageFailureReason
     Syntax="INTEGER"
       1: invalidChecksum
       2: invalidLength
       3: other
       4: inStorage
     Descr="Represents the reason of image failure.
         The following enumerated values are supported:
           invalidChecksum(1) - Invalid checksum
           invalidLength(2)   - Invalid data length
           other(3)           - Other error
           inStorage(4)       - Image already present"
EDESC
#
#
#
EVENT capwapBaseConfigMsgError .1.3.6.1.2.1.196.0.6 "Status Events" Normal
FORMAT This notification is generated when a WTP receives message $*
SDESC
This notification is generated when a WTP receives message
elements in the configuration management messages that it
is unable to apply locally.
REFERENCE
Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfConfigMsgErrorType
     Syntax="INTEGER"
       1: unknownElement
       2: unsupportedElement
       3: unknownValue
       4: unsupportedValue
     Descr="Represents the type of configuration message error.
         The following enumerated values are supported:
           unknownElement(1)     - Unknown message element
           unsupportedElement(2) - Unsupported message element
           unknownValue(3)       - Unknown message element value
           unsupportedValue(4)   - Unsupported message element value"
  3: capwapBaseNtfMsgErrorElements
     Syntax="OCTETSTR"
     Descr="Represents the message elements sent by the AC in the
         Configuration Status Response message that caused the error."
EDESC
#
#
#
EVENT capwapBaseRadioOperableStatus .1.3.6.1.2.1.196.0.7 "Status Events" Normal
FORMAT The notification is generated when a radio's operational state $*
SDESC
The notification is generated when a radio's operational state
has changed.
REFERENCE
Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfRadioId
     Syntax="UNSIGNED32"
     Descr="Represents the identifier of a PHY radio on a WTP, which is
         only required to be unique on a WTP.
         For example, WTP A and WTP B can use the same value of
         capwapBaseNtfRadioId for their first radio."
  3: capwapBaseNtfRadioOperStatusFlag
     Syntax="INTEGER"
       0: operable
       1: inoperable
     Descr="Represents the operation status of a radio.
         The following enumerated values are supported:
           operable(0)   - The radio is operable
           inoperable(1) - The radio is inoperable, and the
                           capwapBaseNtfRadioStatusCause object
                           gives the reason in detail
         Note that the CAPWAP field [RFC5415] modeled by this
         object takes zero as starting value; this MIB object
         follows that rule."
  4: capwapBaseNtfRadioStatusCause
     Syntax="INTEGER"
       0: normal
       1: hwError
       2: swError
       3: adminSet
     Descr="Represents the reason why the radio is out of service.
         The following enumerated values are supported:
           normal(0)   - Normal status
           hwError(1)  - Radio failure
           swError(2)  - Software failure
           adminSet(3) - Administratively set
         Note that the CAPWAP field [RFC5415] modeled by this
         object takes zero as starting value; this MIB object
         follows that rule."
EDESC
#
#
#
EVENT capwapBaseAuthenFailure .1.3.6.1.2.1.196.0.8 "Status Events" Normal
FORMAT This is notification of an authentication failure event $*
SDESC
This is notification of an authentication failure event
and provides the reason for it.
Variables:
  1: capwapBaseNtfWtpId
     Syntax="OCTETSTR"
     Descr="Represents the unique identifier of a WTP."
  2: capwapBaseNtfChannelType
     Syntax="INTEGER"
       1: data
       2: control
     Descr="Represents the channel type for the CAPWAP protocol."
  3: capwapBaseNtfAuthenMethod
     Syntax="INTEGER"
       1: other
       2: clear
       3: x509
       4: psk
     Descr="Represents the authentication method for the CAPWAP Channel."
  4: capwapBaseNtfAuthenFailureReason
     Syntax="INTEGER"
       1: keyMismatch
       2: invalidCert
       3: reassemblyFailure
       4: decapFailure
       5: encapFailure
       6: timeout
       8: unknown
     Descr="Represents the reason for WTP authorization failure.
         The following enumerated values are supported:
           keyMismatch(1)       - WTP's and AC's keys did not match
           invalidCert(2)       - Certification is not valid
           reassemblyFailure(3) - Fragment reassembly failure
           decapFailure(4)      - Decapsulation error
           encapFailure(5)      - Encapsulation error
           timeout(6)           - WaitDTLS timer timeout
           unknown(8)           - Unknown reason"
EDESC
#
#
#
#
MIB: CAPWAP-DOT11-MIB (file:./rfc5834-capwap-dot11.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: MPLS-FRR-FACILITY-STD-MIB (file:./rfc6445-mpls-frr-facility-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT mplsFrrFacilityInitialBackupTunnelInvoked .1.3.6.1.2.1.204.0.1 "Status Events" Normal
FORMAT This notification is generated when a tunnel running over an $*
SDESC
This notification is generated when a tunnel running over an
interface as specified in the mplsFrrConstraintsTable is
initially protected by the backup tunnel also specified in the
mplsFrrConstraintsTable.  In some implementations, there may
be a difference between when the control plane triggers
this notification and when the hardware is programmed to
utilize the protection path.  Due to the urgency of this
operation, it is acceptable for the control plane to
issue this notification either before or after it programs
the hardware.  In cases where it is the latter approach,
the notification MUST be sent immediately after the
data plane has been altered.
This notification should not be generated for each subsequent
tunnel that is backed up by the FRR feature on this LSR, as
this may result in potential scaling issues with regard to
LSR performance and network load.  Note also that
notifications MUST be generated in accordance with the
mplsFrrNotificationsMaxRate.
Variables:
  1: mplsFrrFacilityDBNumProtectingTunnelOnIf
     Syntax="GAUGE"
     Descr="The number of backup tunnels protecting the
       interface specified by mplsFrrFacilityProtectedIfIndex."
  2: mplsFrrFacilityDBNumProtectedLspOnIf
     Syntax="GAUGE"
     Descr="The number of LSPs currently being protected on
       the interface specified by
       mplsFrrFacilityProtectedIfIndex."
  3: mplsFrrFacilityDBNumProtectedTunnels
     Syntax="GAUGE"
     Descr="The number of tunnels protected on the interface
       specified by mplsFrrFacilityProtectedIfIndex."
  4: mplsFrrFacilityDBProtectingTunnelStatus
     Syntax="INTEGER"
       1: active
       2: ready
       3: partial
     Descr="Specifies the state of the protecting tunnel as
       specified by mplsFrrFacilityProtectingTunnelIndex.

       active  - This tunnel's label has been placed in the
                 LFIB and is ready to be applied to incoming
                 packets.
       ready   - This tunnel's label entry has been created but
                 is not yet in the LFIB.
       partial - This tunnel's label entry has not been fully
                 created."
  5: mplsFrrFacilityDBProtectingTunnelResvBw
     Syntax="UNSIGNED32"
     Descr="Specifies the amount of bandwidth in units
       of '1,000 bits per second', actually reserved by
       the protecting tunnel for facility backup purposes.
       This value is repeated here from the MPLS-TE-STD-MIB
       module because the tunnel entry will reveal the
       bandwidth reserved by the signaling protocol, which is
       typically 0 for backup tunnels so as to not over-book
       bandwidth.  However, internal reservations are
       typically made on the PLR; thus, this value should be
       revealed here, as it is often different from
       mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB
       module."
EDESC
#
#
#
EVENT mplsFrrFacilityFinalTunnelRestored .1.3.6.1.2.1.204.0.2 "Status Events" Normal
FORMAT This notification is generated when the final tunnel that is $*
SDESC
This notification is generated when the final tunnel that is
being protected by a backup tunnel as specified in the
mplsFrrConstraintsTable is restored to normal operation.  This
notification should not be generated for each restored tunnel,
as this may result in potential scaling issues with regard to
LSR performance and network load.  Note also that
notifications MUST be generated in accordance with the
mplsFrrNotificationsMaxRate.
Variables:
  1: mplsFrrFacilityDBNumProtectingTunnelOnIf
     Syntax="GAUGE"
     Descr="The number of backup tunnels protecting the
       interface specified by mplsFrrFacilityProtectedIfIndex."
  2: mplsFrrFacilityDBNumProtectedLspOnIf
     Syntax="GAUGE"
     Descr="The number of LSPs currently being protected on
       the interface specified by
       mplsFrrFacilityProtectedIfIndex."
  3: mplsFrrFacilityDBNumProtectedTunnels
     Syntax="GAUGE"
     Descr="The number of tunnels protected on the interface
       specified by mplsFrrFacilityProtectedIfIndex."
  4: mplsFrrFacilityDBProtectingTunnelStatus
     Syntax="INTEGER"
       1: active
       2: ready
       3: partial
     Descr="Specifies the state of the protecting tunnel as
       specified by mplsFrrFacilityProtectingTunnelIndex.

       active  - This tunnel's label has been placed in the
                 LFIB and is ready to be applied to incoming
                 packets.
       ready   - This tunnel's label entry has been created but
                 is not yet in the LFIB.
       partial - This tunnel's label entry has not been fully
                 created."
  5: mplsFrrFacilityDBProtectingTunnelResvBw
     Syntax="UNSIGNED32"
     Descr="Specifies the amount of bandwidth in units
       of '1,000 bits per second', actually reserved by
       the protecting tunnel for facility backup purposes.
       This value is repeated here from the MPLS-TE-STD-MIB
       module because the tunnel entry will reveal the
       bandwidth reserved by the signaling protocol, which is
       typically 0 for backup tunnels so as to not over-book
       bandwidth.  However, internal reservations are
       typically made on the PLR; thus, this value should be
       revealed here, as it is often different from
       mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB
       module."
EDESC
#
#
#
#
MIB: MPLS-FRR-GENERAL-STD-MIB (file:./rfc6445-mpls-frr-general-std.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: RBRIDGE-MIB (file:./rfc6850-rbridge.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT rbridgeBaseNewDrb .1.3.6.1.2.1.214.0.1 "Status Events" Normal
FORMAT The rbridgeBaseNewDrb notification indicates that the $*
SDESC
The rbridgeBaseNewDrb notification indicates that the
sending agent has become the new Designated RBridge; the
notification is sent by an RBridge soon after its election
as the new DRB root, e.g., upon expiration of the Topology
Change Timer, immediately subsequent to its election.
EDESC
#
#
#
EVENT rbridgeBaseTopologyChange .1.3.6.1.2.1.214.0.2 "Status Events" Normal
FORMAT The rbridgeBaseTopologyChange notification is sent by an $*
SDESC
The rbridgeBaseTopologyChange notification is sent by an
RBridge when any of its configured ports transition to/from
the VLAN-x designated forwarder.  The notification is not
sent if an rbridgeBaseNewDrb notification is sent for the
same transition.
EDESC
#
#
#
#
MIB: SNMP-USM-HMAC-SHA2-MIB (file:./rfc7860-snmp-usm-hmac-sha2.mib) converted on Sat Apr  2 10:27:34 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SAVI-MIB (file:./savi.mib) converted on Sat Apr  2 10:27:35 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: SFLOW-MIB (file:./sflow.mib) converted on Sat Apr  2 10:27:35 2022 using snmpttconvertmib v1.4.2
#
#
#
#
MIB: StationSW-MIB (file:./station-sw.mib) converted on Sat Apr  2 10:27:35 2022 using snmpttconvertmib v1.4.2
#
#
#
EVENT ucMacChangeTrap .1.3.6.1.4.1.49763.1.2.1 "Status Events" Normal
FORMAT Traps of unicaset mac address change. $*
SDESC
Traps of unicaset mac address change.
Variables:
  1: ucMacChange
     Syntax="OCTETSTR"
     Descr="Describe unicaset mac address change.
        The format is as follows:
        port_id<space>macAddress1&macAddress2&...<space>vlan_id1
        <space>macAddress3&macAddress4&...<space>vlan_id2..."
EDESC
#
#
#
EVENT userTrap .1.3.6.1.4.1.49763.1.2.2 "Status Events" Normal
FORMAT Traps of user operation. $*
SDESC
Traps of user operation.
Variables:
  1: userIndex
     Syntax="INTEGER32"
     Descr="Index of userTable."
  2: userName
     Syntax="OCTETSTR"
     Descr="Device user name."
  3: userType
     Syntax="INTEGER"
       1: http
       2: https
       3: snmp
       4: telnet
       5: ssh
       6: cli
       7: iec61850
       8: console
     Descr="Device user type."
  4: userStatus
     Syntax="INTEGER"
       1: logIn
       2: logOut
       3: changePassword
       4: loginFail
     Descr="Device user type."
  5: userModified
     Syntax="OCTETSTR"
     Descr="changePassword: Username who's password was modified.
        other operation: None."
  6: userIP
     Syntax="OCTETSTR"
     Descr="Device user IP. If no IP, use 0.0.0.0."
EDESC
#
#
#
EVENT userOperTrap .1.3.6.1.4.1.49763.1.2.3 "Status Events" Normal
FORMAT Traps of user operate command. $*
SDESC
Traps of user operate command.
Variables:
  1: userOperIndex
     Syntax="INTEGER32"
     Descr="Index of userOperTable."
  2: userOperName
     Syntax="OCTETSTR"
     Descr="Device user name."
  3: userOperIP
     Syntax="OCTETSTR"
     Descr="Device user IP. If no IP, use 0.0.0.0."
  4: userOperCommand
     Syntax="OCTETSTR"
     Descr="Device user Command."
EDESC
